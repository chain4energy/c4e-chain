// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeairdrop/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgClaim struct {
	Claimer    string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	CampaignId uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	MissionId  uint64 `protobuf:"varint,3,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
}

func (m *MsgClaim) Reset()         { *m = MsgClaim{} }
func (m *MsgClaim) String() string { return proto.CompactTextString(m) }
func (*MsgClaim) ProtoMessage()    {}
func (*MsgClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{0}
}
func (m *MsgClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaim.Merge(m, src)
}
func (m *MsgClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaim proto.InternalMessageInfo

func (m *MsgClaim) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *MsgClaim) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgClaim) GetMissionId() uint64 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

type MsgClaimResponse struct {
}

func (m *MsgClaimResponse) Reset()         { *m = MsgClaimResponse{} }
func (m *MsgClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimResponse) ProtoMessage()    {}
func (*MsgClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{1}
}
func (m *MsgClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimResponse.Merge(m, src)
}
func (m *MsgClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimResponse proto.InternalMessageInfo

type MsgInitialClaim struct {
	Claimer        string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	CampaignId     uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	AddressToClaim string `protobuf:"bytes,4,opt,name=addressToClaim,proto3" json:"addressToClaim,omitempty"`
}

func (m *MsgInitialClaim) Reset()         { *m = MsgInitialClaim{} }
func (m *MsgInitialClaim) String() string { return proto.CompactTextString(m) }
func (*MsgInitialClaim) ProtoMessage()    {}
func (*MsgInitialClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{2}
}
func (m *MsgInitialClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitialClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitialClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitialClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitialClaim.Merge(m, src)
}
func (m *MsgInitialClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitialClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitialClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitialClaim proto.InternalMessageInfo

func (m *MsgInitialClaim) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *MsgInitialClaim) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgInitialClaim) GetAddressToClaim() string {
	if m != nil {
		return m.AddressToClaim
	}
	return ""
}

type MsgInitialClaimResponse struct {
}

func (m *MsgInitialClaimResponse) Reset()         { *m = MsgInitialClaimResponse{} }
func (m *MsgInitialClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitialClaimResponse) ProtoMessage()    {}
func (*MsgInitialClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{3}
}
func (m *MsgInitialClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitialClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitialClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitialClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitialClaimResponse.Merge(m, src)
}
func (m *MsgInitialClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitialClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitialClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitialClaimResponse proto.InternalMessageInfo

type MsgCreateAirdropCampaign struct {
	Owner                  string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                   string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AllowFeegrant          bool                                   `protobuf:"varint,4,opt,name=allow_feegrant,json=allowFeegrant,proto3" json:"allow_feegrant,omitempty"`
	InitialClaimFreeAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=initial_claim_free_amount,json=initialClaimFreeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_claim_free_amount"`
	StartTime              time.Time                              `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime                time.Time                              `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	LockupPeriod           time.Duration                          `protobuf:"bytes,8,opt,name=lockup_period,json=lockupPeriod,proto3,stdduration" json:"lockup_period"`
	VestingPeriod          time.Duration                          `protobuf:"bytes,9,opt,name=vesting_period,json=vestingPeriod,proto3,stdduration" json:"vesting_period"`
}

func (m *MsgCreateAirdropCampaign) Reset()         { *m = MsgCreateAirdropCampaign{} }
func (m *MsgCreateAirdropCampaign) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdropCampaign) ProtoMessage()    {}
func (*MsgCreateAirdropCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{4}
}
func (m *MsgCreateAirdropCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdropCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdropCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdropCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdropCampaign.Merge(m, src)
}
func (m *MsgCreateAirdropCampaign) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdropCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdropCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdropCampaign proto.InternalMessageInfo

func (m *MsgCreateAirdropCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateAirdropCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateAirdropCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateAirdropCampaign) GetAllowFeegrant() bool {
	if m != nil {
		return m.AllowFeegrant
	}
	return false
}

func (m *MsgCreateAirdropCampaign) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *MsgCreateAirdropCampaign) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *MsgCreateAirdropCampaign) GetLockupPeriod() time.Duration {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

func (m *MsgCreateAirdropCampaign) GetVestingPeriod() time.Duration {
	if m != nil {
		return m.VestingPeriod
	}
	return 0
}

type MsgCreateAirdropCampaignResponse struct {
}

func (m *MsgCreateAirdropCampaignResponse) Reset()         { *m = MsgCreateAirdropCampaignResponse{} }
func (m *MsgCreateAirdropCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdropCampaignResponse) ProtoMessage()    {}
func (*MsgCreateAirdropCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{5}
}
func (m *MsgCreateAirdropCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdropCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdropCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdropCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdropCampaignResponse.Merge(m, src)
}
func (m *MsgCreateAirdropCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdropCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdropCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdropCampaignResponse proto.InternalMessageInfo

type MsgAddMissionToAidropCampaign struct {
	Owner          string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId     uint64                                 `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Name           string                                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MissionType    MissionType                            `protobuf:"varint,5,opt,name=missionType,proto3,enum=chain4energy.c4echain.cfeairdrop.MissionType" json:"missionType,omitempty"`
	Weight         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
	ClaimStartDate *time.Time                             `protobuf:"bytes,7,opt,name=claim_start_date,json=claimStartDate,proto3,stdtime" json:"claim_start_date,omitempty"`
}

func (m *MsgAddMissionToAidropCampaign) Reset()         { *m = MsgAddMissionToAidropCampaign{} }
func (m *MsgAddMissionToAidropCampaign) String() string { return proto.CompactTextString(m) }
func (*MsgAddMissionToAidropCampaign) ProtoMessage()    {}
func (*MsgAddMissionToAidropCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{6}
}
func (m *MsgAddMissionToAidropCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMissionToAidropCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMissionToAidropCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMissionToAidropCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMissionToAidropCampaign.Merge(m, src)
}
func (m *MsgAddMissionToAidropCampaign) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMissionToAidropCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMissionToAidropCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMissionToAidropCampaign proto.InternalMessageInfo

func (m *MsgAddMissionToAidropCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddMissionToAidropCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgAddMissionToAidropCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAddMissionToAidropCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgAddMissionToAidropCampaign) GetMissionType() MissionType {
	if m != nil {
		return m.MissionType
	}
	return MissionType_MISSION_TYPE_UNSPECIFIED
}

func (m *MsgAddMissionToAidropCampaign) GetClaimStartDate() *time.Time {
	if m != nil {
		return m.ClaimStartDate
	}
	return nil
}

type MsgAddMissionToAidropCampaignResponse struct {
}

func (m *MsgAddMissionToAidropCampaignResponse) Reset()         { *m = MsgAddMissionToAidropCampaignResponse{} }
func (m *MsgAddMissionToAidropCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMissionToAidropCampaignResponse) ProtoMessage()    {}
func (*MsgAddMissionToAidropCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{7}
}
func (m *MsgAddMissionToAidropCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMissionToAidropCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMissionToAidropCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMissionToAidropCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMissionToAidropCampaignResponse.Merge(m, src)
}
func (m *MsgAddMissionToAidropCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMissionToAidropCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMissionToAidropCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMissionToAidropCampaignResponse proto.InternalMessageInfo

type MsgAddAirdropEntries struct {
	Owner          string          `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId     uint64          `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	AirdropEntries []*AirdropEntry `protobuf:"bytes,3,rep,name=airdrop_entries,json=airdropEntries,proto3" json:"airdrop_entries,omitempty"`
}

func (m *MsgAddAirdropEntries) Reset()         { *m = MsgAddAirdropEntries{} }
func (m *MsgAddAirdropEntries) String() string { return proto.CompactTextString(m) }
func (*MsgAddAirdropEntries) ProtoMessage()    {}
func (*MsgAddAirdropEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{8}
}
func (m *MsgAddAirdropEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAirdropEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAirdropEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAirdropEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAirdropEntries.Merge(m, src)
}
func (m *MsgAddAirdropEntries) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAirdropEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAirdropEntries.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAirdropEntries proto.InternalMessageInfo

func (m *MsgAddAirdropEntries) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddAirdropEntries) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgAddAirdropEntries) GetAirdropEntries() []*AirdropEntry {
	if m != nil {
		return m.AirdropEntries
	}
	return nil
}

type MsgAddAirdropEntriesResponse struct {
}

func (m *MsgAddAirdropEntriesResponse) Reset()         { *m = MsgAddAirdropEntriesResponse{} }
func (m *MsgAddAirdropEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAirdropEntriesResponse) ProtoMessage()    {}
func (*MsgAddAirdropEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{9}
}
func (m *MsgAddAirdropEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAirdropEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAirdropEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAirdropEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAirdropEntriesResponse.Merge(m, src)
}
func (m *MsgAddAirdropEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAirdropEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAirdropEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAirdropEntriesResponse proto.InternalMessageInfo

type MsgDeleteAirdropEntry struct {
	Owner       string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId  uint64 `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	UserAddress string `protobuf:"bytes,3,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *MsgDeleteAirdropEntry) Reset()         { *m = MsgDeleteAirdropEntry{} }
func (m *MsgDeleteAirdropEntry) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAirdropEntry) ProtoMessage()    {}
func (*MsgDeleteAirdropEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{10}
}
func (m *MsgDeleteAirdropEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAirdropEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAirdropEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAirdropEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAirdropEntry.Merge(m, src)
}
func (m *MsgDeleteAirdropEntry) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAirdropEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAirdropEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAirdropEntry proto.InternalMessageInfo

func (m *MsgDeleteAirdropEntry) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgDeleteAirdropEntry) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgDeleteAirdropEntry) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgDeleteAirdropEntryResponse struct {
}

func (m *MsgDeleteAirdropEntryResponse) Reset()         { *m = MsgDeleteAirdropEntryResponse{} }
func (m *MsgDeleteAirdropEntryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAirdropEntryResponse) ProtoMessage()    {}
func (*MsgDeleteAirdropEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{11}
}
func (m *MsgDeleteAirdropEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAirdropEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAirdropEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAirdropEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAirdropEntryResponse.Merge(m, src)
}
func (m *MsgDeleteAirdropEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAirdropEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAirdropEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAirdropEntryResponse proto.InternalMessageInfo

type MsgCloseAirdropCampaign struct {
	Owner              string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId         uint64             `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	AirdropCloseAction AirdropCloseAction `protobuf:"varint,3,opt,name=airdrop_close_action,json=airdropCloseAction,proto3,enum=chain4energy.c4echain.cfeairdrop.AirdropCloseAction" json:"airdrop_close_action,omitempty"`
}

func (m *MsgCloseAirdropCampaign) Reset()         { *m = MsgCloseAirdropCampaign{} }
func (m *MsgCloseAirdropCampaign) String() string { return proto.CompactTextString(m) }
func (*MsgCloseAirdropCampaign) ProtoMessage()    {}
func (*MsgCloseAirdropCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{12}
}
func (m *MsgCloseAirdropCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseAirdropCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseAirdropCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseAirdropCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseAirdropCampaign.Merge(m, src)
}
func (m *MsgCloseAirdropCampaign) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseAirdropCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseAirdropCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseAirdropCampaign proto.InternalMessageInfo

func (m *MsgCloseAirdropCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCloseAirdropCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgCloseAirdropCampaign) GetAirdropCloseAction() AirdropCloseAction {
	if m != nil {
		return m.AirdropCloseAction
	}
	return AirdropCloseAction_AIRDROP_CLOSE_ACTION_UNSPECIFIED
}

type MsgCloseAirdropCampaignResponse struct {
}

func (m *MsgCloseAirdropCampaignResponse) Reset()         { *m = MsgCloseAirdropCampaignResponse{} }
func (m *MsgCloseAirdropCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseAirdropCampaignResponse) ProtoMessage()    {}
func (*MsgCloseAirdropCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{13}
}
func (m *MsgCloseAirdropCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseAirdropCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseAirdropCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseAirdropCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseAirdropCampaignResponse.Merge(m, src)
}
func (m *MsgCloseAirdropCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseAirdropCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseAirdropCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseAirdropCampaignResponse proto.InternalMessageInfo

type MsgStartAirdropCampaign struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId uint64 `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (m *MsgStartAirdropCampaign) Reset()         { *m = MsgStartAirdropCampaign{} }
func (m *MsgStartAirdropCampaign) String() string { return proto.CompactTextString(m) }
func (*MsgStartAirdropCampaign) ProtoMessage()    {}
func (*MsgStartAirdropCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{14}
}
func (m *MsgStartAirdropCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartAirdropCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartAirdropCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartAirdropCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartAirdropCampaign.Merge(m, src)
}
func (m *MsgStartAirdropCampaign) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartAirdropCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartAirdropCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartAirdropCampaign proto.InternalMessageInfo

func (m *MsgStartAirdropCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgStartAirdropCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type MsgStartAirdropCampaignResponse struct {
}

func (m *MsgStartAirdropCampaignResponse) Reset()         { *m = MsgStartAirdropCampaignResponse{} }
func (m *MsgStartAirdropCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartAirdropCampaignResponse) ProtoMessage()    {}
func (*MsgStartAirdropCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{15}
}
func (m *MsgStartAirdropCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartAirdropCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartAirdropCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartAirdropCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartAirdropCampaignResponse.Merge(m, src)
}
func (m *MsgStartAirdropCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartAirdropCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartAirdropCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartAirdropCampaignResponse proto.InternalMessageInfo

type MsgEditAirdropCampaign struct {
	Owner                  string                                  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId             uint64                                  `protobuf:"varint,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Name                   string                                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	AllowFeegrant          bool                                    `protobuf:"varint,5,opt,name=allow_feegrant,json=allowFeegrant,proto3" json:"allow_feegrant,omitempty"`
	InitialClaimFreeAmount *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=initial_claim_free_amount,json=initialClaimFreeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_claim_free_amount,omitempty"`
	Denom                  string                                  `protobuf:"bytes,7,opt,name=denom,proto3" json:"denom,omitempty"`
	StartTime              *time.Time                              `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	EndTime                *time.Time                              `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time,omitempty"`
	LockupPeriod           *time.Duration                          `protobuf:"bytes,10,opt,name=lockup_period,json=lockupPeriod,proto3,stdduration" json:"lockup_period,omitempty"`
	VestingPeriod          *time.Duration                          `protobuf:"bytes,11,opt,name=vesting_period,json=vestingPeriod,proto3,stdduration" json:"vesting_period,omitempty"`
}

func (m *MsgEditAirdropCampaign) Reset()         { *m = MsgEditAirdropCampaign{} }
func (m *MsgEditAirdropCampaign) String() string { return proto.CompactTextString(m) }
func (*MsgEditAirdropCampaign) ProtoMessage()    {}
func (*MsgEditAirdropCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{16}
}
func (m *MsgEditAirdropCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditAirdropCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditAirdropCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditAirdropCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditAirdropCampaign.Merge(m, src)
}
func (m *MsgEditAirdropCampaign) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditAirdropCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditAirdropCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditAirdropCampaign proto.InternalMessageInfo

func (m *MsgEditAirdropCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgEditAirdropCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *MsgEditAirdropCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgEditAirdropCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgEditAirdropCampaign) GetAllowFeegrant() bool {
	if m != nil {
		return m.AllowFeegrant
	}
	return false
}

func (m *MsgEditAirdropCampaign) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgEditAirdropCampaign) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MsgEditAirdropCampaign) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *MsgEditAirdropCampaign) GetLockupPeriod() *time.Duration {
	if m != nil {
		return m.LockupPeriod
	}
	return nil
}

func (m *MsgEditAirdropCampaign) GetVestingPeriod() *time.Duration {
	if m != nil {
		return m.VestingPeriod
	}
	return nil
}

type MsgEditAirdropCampaignResponse struct {
}

func (m *MsgEditAirdropCampaignResponse) Reset()         { *m = MsgEditAirdropCampaignResponse{} }
func (m *MsgEditAirdropCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditAirdropCampaignResponse) ProtoMessage()    {}
func (*MsgEditAirdropCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1316949aeac1227b, []int{17}
}
func (m *MsgEditAirdropCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditAirdropCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditAirdropCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditAirdropCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditAirdropCampaignResponse.Merge(m, src)
}
func (m *MsgEditAirdropCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditAirdropCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditAirdropCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditAirdropCampaignResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClaim)(nil), "chain4energy.c4echain.cfeairdrop.MsgClaim")
	proto.RegisterType((*MsgClaimResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgClaimResponse")
	proto.RegisterType((*MsgInitialClaim)(nil), "chain4energy.c4echain.cfeairdrop.MsgInitialClaim")
	proto.RegisterType((*MsgInitialClaimResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgInitialClaimResponse")
	proto.RegisterType((*MsgCreateAirdropCampaign)(nil), "chain4energy.c4echain.cfeairdrop.MsgCreateAirdropCampaign")
	proto.RegisterType((*MsgCreateAirdropCampaignResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgCreateAirdropCampaignResponse")
	proto.RegisterType((*MsgAddMissionToAidropCampaign)(nil), "chain4energy.c4echain.cfeairdrop.MsgAddMissionToAidropCampaign")
	proto.RegisterType((*MsgAddMissionToAidropCampaignResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgAddMissionToAidropCampaignResponse")
	proto.RegisterType((*MsgAddAirdropEntries)(nil), "chain4energy.c4echain.cfeairdrop.MsgAddAirdropEntries")
	proto.RegisterType((*MsgAddAirdropEntriesResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgAddAirdropEntriesResponse")
	proto.RegisterType((*MsgDeleteAirdropEntry)(nil), "chain4energy.c4echain.cfeairdrop.MsgDeleteAirdropEntry")
	proto.RegisterType((*MsgDeleteAirdropEntryResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgDeleteAirdropEntryResponse")
	proto.RegisterType((*MsgCloseAirdropCampaign)(nil), "chain4energy.c4echain.cfeairdrop.MsgCloseAirdropCampaign")
	proto.RegisterType((*MsgCloseAirdropCampaignResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgCloseAirdropCampaignResponse")
	proto.RegisterType((*MsgStartAirdropCampaign)(nil), "chain4energy.c4echain.cfeairdrop.MsgStartAirdropCampaign")
	proto.RegisterType((*MsgStartAirdropCampaignResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgStartAirdropCampaignResponse")
	proto.RegisterType((*MsgEditAirdropCampaign)(nil), "chain4energy.c4echain.cfeairdrop.MsgEditAirdropCampaign")
	proto.RegisterType((*MsgEditAirdropCampaignResponse)(nil), "chain4energy.c4echain.cfeairdrop.MsgEditAirdropCampaignResponse")
}

func init() { proto.RegisterFile("cfeairdrop/tx.proto", fileDescriptor_1316949aeac1227b) }

var fileDescriptor_1316949aeac1227b = []byte{
	// 1095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x36, 0x4e, 0x62, 0x1f, 0x37, 0x6e, 0x99, 0xba, 0xc5, 0x59, 0x51, 0xdb, 0xac, 0xd4,
	0x12, 0x81, 0xb2, 0x16, 0x26, 0x02, 0xca, 0x05, 0xc1, 0x49, 0x1a, 0x08, 0x92, 0x5b, 0xb4, 0x44,
	0x42, 0xe2, 0xc6, 0x9a, 0xec, 0x4e, 0x36, 0xa3, 0x7a, 0x77, 0xac, 0x9d, 0x31, 0x69, 0x24, 0xde,
	0x00, 0x09, 0x05, 0xa9, 0x12, 0x3c, 0x41, 0x9f, 0x81, 0x47, 0xe8, 0x15, 0xea, 0x25, 0xe2, 0xa2,
	0xa0, 0xe4, 0x15, 0x78, 0x80, 0x6a, 0x67, 0x7f, 0xb2, 0x89, 0xd7, 0xf1, 0xd8, 0xed, 0x95, 0x77,
	0xcf, 0xee, 0xf7, 0x9d, 0x6f, 0xce, 0x7e, 0x73, 0xce, 0x18, 0x6e, 0xd9, 0x07, 0x04, 0xd3, 0xc0,
	0x09, 0xd8, 0xa0, 0x25, 0x9e, 0x9a, 0x83, 0x80, 0x09, 0x86, 0x9a, 0xf6, 0x21, 0xa6, 0xfe, 0x3a,
	0xf1, 0x49, 0xe0, 0x1e, 0x9b, 0xf6, 0x3a, 0x91, 0xf7, 0xe6, 0xf9, 0xab, 0x7a, 0xdd, 0x65, 0xcc,
	0xed, 0x93, 0x96, 0x7c, 0x7f, 0x7f, 0x78, 0xd0, 0x72, 0x86, 0x01, 0x16, 0x94, 0xf9, 0x11, 0x83,
	0x5e, 0xcb, 0xd0, 0xc6, 0xbf, 0xf1, 0x93, 0xaa, 0xcb, 0x5c, 0x26, 0x2f, 0x5b, 0xe1, 0x55, 0x1c,
	0x6d, 0x5c, 0xe6, 0x13, 0xd4, 0x23, 0x5c, 0x60, 0x2f, 0x86, 0x19, 0x0e, 0x14, 0xbb, 0xdc, 0xdd,
	0xea, 0x63, 0xea, 0xa1, 0x1a, 0x2c, 0xd9, 0xe1, 0x05, 0x09, 0x6a, 0x5a, 0x53, 0x5b, 0x2d, 0x59,
	0xc9, 0x2d, 0x6a, 0x40, 0xd9, 0xc6, 0xde, 0x00, 0x53, 0xd7, 0xef, 0x51, 0xa7, 0x76, 0xad, 0xa9,
	0xad, 0x16, 0x2c, 0x48, 0x42, 0xbb, 0x0e, 0xba, 0x0b, 0xe0, 0x51, 0xce, 0x29, 0x93, 0xcf, 0xe7,
	0xe5, 0xf3, 0x52, 0x1c, 0xd9, 0x75, 0x0c, 0x04, 0x37, 0x93, 0x2c, 0x16, 0xe1, 0x03, 0xe6, 0x73,
	0x62, 0x08, 0xb8, 0xd1, 0xe5, 0xee, 0xae, 0x4f, 0x05, 0xc5, 0xfd, 0x37, 0x16, 0x70, 0x1f, 0x2a,
	0xd8, 0x71, 0x02, 0xc2, 0xf9, 0x1e, 0x93, 0x64, 0xb5, 0x82, 0x64, 0xb8, 0x14, 0x35, 0x56, 0xe0,
	0xdd, 0x4b, 0x59, 0x53, 0x41, 0xcf, 0x0a, 0x50, 0x0b, 0x55, 0x06, 0x04, 0x0b, 0xd2, 0x89, 0x8a,
	0xbb, 0x15, 0x67, 0x40, 0x55, 0x58, 0x60, 0x47, 0x7e, 0x2a, 0x2c, 0xba, 0x41, 0x08, 0x0a, 0x3e,
	0xf6, 0x88, 0xd4, 0x53, 0xb2, 0xe4, 0x35, 0x6a, 0x42, 0xd9, 0x21, 0xdc, 0x0e, 0xe8, 0x20, 0xfc,
	0x6e, 0xb2, 0x16, 0x25, 0x2b, 0x1b, 0x42, 0xf7, 0xa0, 0x82, 0xfb, 0x7d, 0x76, 0xd4, 0x3b, 0x20,
	0xc4, 0x0d, 0xb0, 0x2f, 0xa4, 0xd6, 0xa2, 0xb5, 0x2c, 0xa3, 0x3b, 0x71, 0x10, 0x51, 0x58, 0xa1,
	0x91, 0xce, 0x9e, 0x2c, 0x43, 0xef, 0x20, 0x20, 0xa4, 0x87, 0x3d, 0x36, 0xf4, 0x45, 0x6d, 0x21,
	0xa4, 0xdd, 0x34, 0x5f, 0xbc, 0x6a, 0xcc, 0xfd, 0xf3, 0xaa, 0x71, 0xdf, 0xa5, 0xe2, 0x70, 0xb8,
	0x6f, 0xda, 0xcc, 0x6b, 0xd9, 0x8c, 0x7b, 0x8c, 0xc7, 0x3f, 0x6b, 0xdc, 0x79, 0xd2, 0x12, 0xc7,
	0x03, 0xc2, 0xcd, 0x5d, 0x5f, 0x58, 0x77, 0x68, 0x66, 0xe1, 0x3b, 0x01, 0x21, 0x1d, 0xc9, 0x86,
	0xb6, 0x00, 0xb8, 0xc0, 0x81, 0xe8, 0x85, 0xf6, 0xa8, 0x2d, 0x36, 0xb5, 0xd5, 0x72, 0x5b, 0x37,
	0x23, 0xef, 0x98, 0x89, 0x77, 0xcc, 0xbd, 0xc4, 0x3b, 0x9b, 0xc5, 0x30, 0xef, 0xc9, 0xbf, 0x0d,
	0xcd, 0x2a, 0x49, 0x5c, 0xf8, 0x04, 0x6d, 0x40, 0x91, 0xf8, 0x4e, 0x44, 0xb1, 0x34, 0x05, 0xc5,
	0x12, 0xf1, 0x1d, 0x49, 0xf0, 0x0d, 0x2c, 0xf7, 0x99, 0xfd, 0x64, 0x38, 0xe8, 0x0d, 0x48, 0x40,
	0x99, 0x53, 0x2b, 0x4a, 0x96, 0x95, 0x11, 0x96, 0xed, 0x78, 0x53, 0x44, 0x24, 0x7f, 0x84, 0x24,
	0xd7, 0x23, 0xe4, 0x77, 0x12, 0x88, 0xbe, 0x85, 0xca, 0x4f, 0x84, 0x0b, 0xea, 0xbb, 0x09, 0x55,
	0x49, 0x9d, 0x6a, 0x39, 0x86, 0x46, 0x5c, 0x86, 0x01, 0xcd, 0x71, 0xae, 0x48, 0xad, 0xf3, 0xff,
	0x35, 0xb8, 0xdb, 0xe5, 0x6e, 0xc7, 0x71, 0xba, 0x91, 0xe7, 0xf7, 0x58, 0x87, 0x2a, 0xf8, 0xa7,
	0x0e, 0x19, 0x0f, 0xe7, 0xb8, 0x3a, 0xf1, 0xd7, 0xfc, 0x78, 0x7f, 0x15, 0x46, 0xfd, 0xf5, 0x18,
	0xca, 0xf1, 0xd6, 0xdb, 0x3b, 0x1e, 0x10, 0x69, 0x95, 0x4a, 0x7b, 0xcd, 0x9c, 0xd4, 0x7c, 0xcc,
	0xee, 0x39, 0xc8, 0xca, 0x32, 0xa0, 0x1d, 0x58, 0x3c, 0x22, 0xd4, 0x3d, 0x14, 0xd2, 0x1a, 0xd3,
	0xd9, 0x6e, 0x9b, 0xd8, 0x56, 0x8c, 0x46, 0x8f, 0xe0, 0x66, 0xe4, 0xe4, 0xc8, 0x6c, 0x0e, 0x16,
	0xaa, 0x4e, 0xd1, 0xa4, 0x53, 0x2a, 0x12, 0xfd, 0x7d, 0x08, 0xde, 0xc6, 0x82, 0x18, 0x1f, 0xc0,
	0xbd, 0x2b, 0xab, 0x9e, 0x7e, 0x9f, 0xe7, 0x1a, 0x54, 0xa3, 0x37, 0xe3, 0x2f, 0xf8, 0xd0, 0x17,
	0x01, 0x25, 0x7c, 0xcc, 0x67, 0x99, 0xd8, 0x6d, 0x7e, 0x80, 0x1b, 0x71, 0xd1, 0x7a, 0x24, 0x62,
	0xaa, 0xcd, 0x37, 0xe7, 0x57, 0xcb, 0x6d, 0x73, 0x72, 0x95, 0x33, 0x0a, 0x8e, 0xad, 0x0a, 0xbe,
	0xa0, 0xc7, 0xa8, 0xc3, 0x7b, 0x79, 0x3a, 0xd3, 0x85, 0x30, 0xb8, 0xdd, 0xe5, 0xee, 0x36, 0xe9,
	0x93, 0xd4, 0x8c, 0x92, 0x68, 0x46, 0x7f, 0x35, 0xa1, 0x3c, 0xe4, 0x24, 0xe8, 0x44, 0x3d, 0x32,
	0xe9, 0x55, 0x99, 0x90, 0xd1, 0x90, 0xc6, 0x1e, 0x4d, 0x98, 0x2a, 0xfa, 0x53, 0x93, 0x1d, 0x75,
	0xab, 0xcf, 0xb8, 0x62, 0xd3, 0x9c, 0x58, 0xdd, 0x03, 0xa8, 0x26, 0xd5, 0xb5, 0x43, 0xda, 0x1e,
	0xb6, 0xd3, 0x56, 0x5a, 0x69, 0xaf, 0x2b, 0x97, 0x38, 0xd2, 0x24, 0xb1, 0x16, 0xc2, 0x23, 0x31,
	0xe3, 0x7d, 0x68, 0x8c, 0x51, 0x9e, 0xae, 0xee, 0xb1, 0x5c, 0x9c, 0x74, 0x9c, 0xda, 0xe2, 0x26,
	0x54, 0x3c, 0xce, 0x99, 0x47, 0x98, 0xe6, 0xfc, 0xab, 0x00, 0x77, 0xba, 0xdc, 0x7d, 0xe8, 0xd0,
	0xb7, 0x93, 0x73, 0xc6, 0x2e, 0xf2, 0xd1, 0xc8, 0x94, 0x0a, 0x1b, 0x49, 0x71, 0xb3, 0x10, 0x6e,
	0xc7, 0xa9, 0x66, 0xd5, 0x79, 0xd3, 0xd0, 0xde, 0xc2, 0xac, 0xaa, 0xc2, 0x82, 0x43, 0x7c, 0xe6,
	0xc9, 0xce, 0x51, 0xb2, 0xa2, 0x9b, 0x4b, 0x13, 0xac, 0x38, 0x45, 0x53, 0x19, 0x33, 0xc1, 0x4a,
	0x53, 0x50, 0x8c, 0x9f, 0x60, 0xa0, 0x32, 0x76, 0x34, 0xa5, 0x09, 0x56, 0x56, 0xa7, 0xba, 0x34,
	0xc1, 0x9a, 0x50, 0xcf, 0xf7, 0x53, 0x62, 0xb9, 0xf6, 0x09, 0xc0, 0x7c, 0x97, 0xbb, 0xc8, 0x85,
	0x85, 0xe8, 0x24, 0xf6, 0xa1, 0xc2, 0xb4, 0x88, 0x0f, 0x74, 0x7a, 0x5b, 0xfd, 0xdd, 0x24, 0x21,
	0xfa, 0x19, 0xae, 0x5f, 0x38, 0xf9, 0x7d, 0xac, 0xc4, 0x91, 0x85, 0xe8, 0x0f, 0xa6, 0x86, 0xa4,
	0xd9, 0x7f, 0xd7, 0xe0, 0x76, 0xfe, 0x31, 0xef, 0x0b, 0xb5, 0xb5, 0xe4, 0x61, 0xf5, 0xcd, 0xd9,
	0xb1, 0xa9, 0xb2, 0xdf, 0x34, 0xb8, 0x95, 0xb7, 0xf1, 0x3f, 0x57, 0xe2, 0xce, 0x41, 0xea, 0x5f,
	0xcd, 0x8a, 0x4c, 0x35, 0x3d, 0xd7, 0x40, 0xbf, 0xe2, 0x64, 0xb3, 0xa1, 0x94, 0x60, 0x3c, 0x81,
	0xfe, 0xf5, 0x1b, 0x12, 0xa4, 0x42, 0x7f, 0xd1, 0xe0, 0x9d, 0xd1, 0x11, 0xff, 0xa9, 0x2a, 0xfd,
	0x45, 0x9c, 0xfe, 0xe5, 0x6c, 0xb8, 0x54, 0xcd, 0xaf, 0x1a, 0xa0, 0x9c, 0x41, 0xfd, 0x99, 0x12,
	0xed, 0x28, 0x50, 0xdf, 0x98, 0x11, 0x98, 0x0a, 0x7a, 0xa6, 0x41, 0x35, 0x77, 0x4c, 0x3f, 0x50,
	0xdc, 0xc0, 0xa3, 0x50, 0xbd, 0x33, 0x33, 0xf4, 0x82, 0xac, 0xdc, 0x01, 0xab, 0x26, 0x2b, 0x0f,
	0xaa, 0x28, 0xeb, 0xaa, 0x29, 0xbc, 0xf9, 0xe8, 0xc5, 0x69, 0x5d, 0x7b, 0x79, 0x5a, 0xd7, 0xfe,
	0x3b, 0xad, 0x6b, 0x27, 0x67, 0xf5, 0xb9, 0x97, 0x67, 0xf5, 0xb9, 0xbf, 0xcf, 0xea, 0x73, 0x3f,
	0xae, 0x67, 0x07, 0x58, 0x26, 0x4d, 0xcb, 0x5e, 0x27, 0x6b, 0x32, 0xd0, 0x7a, 0xda, 0xca, 0xfe,
	0xfd, 0x0f, 0x47, 0xda, 0xfe, 0xa2, 0x6c, 0xd8, 0x9f, 0xbc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x69,
	0x1d, 0x61, 0xff, 0x19, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error)
	InitialClaim(ctx context.Context, in *MsgInitialClaim, opts ...grpc.CallOption) (*MsgInitialClaimResponse, error)
	CreateAirdropCampaign(ctx context.Context, in *MsgCreateAirdropCampaign, opts ...grpc.CallOption) (*MsgCreateAirdropCampaignResponse, error)
	EditAirdropCampaign(ctx context.Context, in *MsgEditAirdropCampaign, opts ...grpc.CallOption) (*MsgEditAirdropCampaignResponse, error)
	AddMissionToAidropCampaign(ctx context.Context, in *MsgAddMissionToAidropCampaign, opts ...grpc.CallOption) (*MsgAddMissionToAidropCampaignResponse, error)
	AddAirdropEntries(ctx context.Context, in *MsgAddAirdropEntries, opts ...grpc.CallOption) (*MsgAddAirdropEntriesResponse, error)
	DeleteAirdropEntry(ctx context.Context, in *MsgDeleteAirdropEntry, opts ...grpc.CallOption) (*MsgDeleteAirdropEntryResponse, error)
	CloseAirdropCampaign(ctx context.Context, in *MsgCloseAirdropCampaign, opts ...grpc.CallOption) (*MsgCloseAirdropCampaignResponse, error)
	StartAirdropCampaign(ctx context.Context, in *MsgStartAirdropCampaign, opts ...grpc.CallOption) (*MsgStartAirdropCampaignResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error) {
	out := new(MsgClaimResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitialClaim(ctx context.Context, in *MsgInitialClaim, opts ...grpc.CallOption) (*MsgInitialClaimResponse, error) {
	out := new(MsgInitialClaimResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/InitialClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAirdropCampaign(ctx context.Context, in *MsgCreateAirdropCampaign, opts ...grpc.CallOption) (*MsgCreateAirdropCampaignResponse, error) {
	out := new(MsgCreateAirdropCampaignResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/CreateAirdropCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditAirdropCampaign(ctx context.Context, in *MsgEditAirdropCampaign, opts ...grpc.CallOption) (*MsgEditAirdropCampaignResponse, error) {
	out := new(MsgEditAirdropCampaignResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/EditAirdropCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMissionToAidropCampaign(ctx context.Context, in *MsgAddMissionToAidropCampaign, opts ...grpc.CallOption) (*MsgAddMissionToAidropCampaignResponse, error) {
	out := new(MsgAddMissionToAidropCampaignResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/AddMissionToAidropCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAirdropEntries(ctx context.Context, in *MsgAddAirdropEntries, opts ...grpc.CallOption) (*MsgAddAirdropEntriesResponse, error) {
	out := new(MsgAddAirdropEntriesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/AddAirdropEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAirdropEntry(ctx context.Context, in *MsgDeleteAirdropEntry, opts ...grpc.CallOption) (*MsgDeleteAirdropEntryResponse, error) {
	out := new(MsgDeleteAirdropEntryResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/DeleteAirdropEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseAirdropCampaign(ctx context.Context, in *MsgCloseAirdropCampaign, opts ...grpc.CallOption) (*MsgCloseAirdropCampaignResponse, error) {
	out := new(MsgCloseAirdropCampaignResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/CloseAirdropCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartAirdropCampaign(ctx context.Context, in *MsgStartAirdropCampaign, opts ...grpc.CallOption) (*MsgStartAirdropCampaignResponse, error) {
	out := new(MsgStartAirdropCampaignResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Msg/StartAirdropCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Claim(context.Context, *MsgClaim) (*MsgClaimResponse, error)
	InitialClaim(context.Context, *MsgInitialClaim) (*MsgInitialClaimResponse, error)
	CreateAirdropCampaign(context.Context, *MsgCreateAirdropCampaign) (*MsgCreateAirdropCampaignResponse, error)
	EditAirdropCampaign(context.Context, *MsgEditAirdropCampaign) (*MsgEditAirdropCampaignResponse, error)
	AddMissionToAidropCampaign(context.Context, *MsgAddMissionToAidropCampaign) (*MsgAddMissionToAidropCampaignResponse, error)
	AddAirdropEntries(context.Context, *MsgAddAirdropEntries) (*MsgAddAirdropEntriesResponse, error)
	DeleteAirdropEntry(context.Context, *MsgDeleteAirdropEntry) (*MsgDeleteAirdropEntryResponse, error)
	CloseAirdropCampaign(context.Context, *MsgCloseAirdropCampaign) (*MsgCloseAirdropCampaignResponse, error)
	StartAirdropCampaign(context.Context, *MsgStartAirdropCampaign) (*MsgStartAirdropCampaignResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Claim(ctx context.Context, req *MsgClaim) (*MsgClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedMsgServer) InitialClaim(ctx context.Context, req *MsgInitialClaim) (*MsgInitialClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialClaim not implemented")
}
func (*UnimplementedMsgServer) CreateAirdropCampaign(ctx context.Context, req *MsgCreateAirdropCampaign) (*MsgCreateAirdropCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirdropCampaign not implemented")
}
func (*UnimplementedMsgServer) EditAirdropCampaign(ctx context.Context, req *MsgEditAirdropCampaign) (*MsgEditAirdropCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAirdropCampaign not implemented")
}
func (*UnimplementedMsgServer) AddMissionToAidropCampaign(ctx context.Context, req *MsgAddMissionToAidropCampaign) (*MsgAddMissionToAidropCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMissionToAidropCampaign not implemented")
}
func (*UnimplementedMsgServer) AddAirdropEntries(ctx context.Context, req *MsgAddAirdropEntries) (*MsgAddAirdropEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAirdropEntries not implemented")
}
func (*UnimplementedMsgServer) DeleteAirdropEntry(ctx context.Context, req *MsgDeleteAirdropEntry) (*MsgDeleteAirdropEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirdropEntry not implemented")
}
func (*UnimplementedMsgServer) CloseAirdropCampaign(ctx context.Context, req *MsgCloseAirdropCampaign) (*MsgCloseAirdropCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAirdropCampaign not implemented")
}
func (*UnimplementedMsgServer) StartAirdropCampaign(ctx context.Context, req *MsgStartAirdropCampaign) (*MsgStartAirdropCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAirdropCampaign not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Claim(ctx, req.(*MsgClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitialClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitialClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitialClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/InitialClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitialClaim(ctx, req.(*MsgInitialClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAirdropCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAirdropCampaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAirdropCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/CreateAirdropCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAirdropCampaign(ctx, req.(*MsgCreateAirdropCampaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditAirdropCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditAirdropCampaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditAirdropCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/EditAirdropCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditAirdropCampaign(ctx, req.(*MsgEditAirdropCampaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMissionToAidropCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMissionToAidropCampaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMissionToAidropCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/AddMissionToAidropCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMissionToAidropCampaign(ctx, req.(*MsgAddMissionToAidropCampaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAirdropEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAirdropEntries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAirdropEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/AddAirdropEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAirdropEntries(ctx, req.(*MsgAddAirdropEntries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAirdropEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAirdropEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAirdropEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/DeleteAirdropEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAirdropEntry(ctx, req.(*MsgDeleteAirdropEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseAirdropCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseAirdropCampaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseAirdropCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/CloseAirdropCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseAirdropCampaign(ctx, req.(*MsgCloseAirdropCampaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartAirdropCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartAirdropCampaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartAirdropCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Msg/StartAirdropCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartAirdropCampaign(ctx, req.(*MsgStartAirdropCampaign))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfeairdrop.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _Msg_Claim_Handler,
		},
		{
			MethodName: "InitialClaim",
			Handler:    _Msg_InitialClaim_Handler,
		},
		{
			MethodName: "CreateAirdropCampaign",
			Handler:    _Msg_CreateAirdropCampaign_Handler,
		},
		{
			MethodName: "EditAirdropCampaign",
			Handler:    _Msg_EditAirdropCampaign_Handler,
		},
		{
			MethodName: "AddMissionToAidropCampaign",
			Handler:    _Msg_AddMissionToAidropCampaign_Handler,
		},
		{
			MethodName: "AddAirdropEntries",
			Handler:    _Msg_AddAirdropEntries_Handler,
		},
		{
			MethodName: "DeleteAirdropEntry",
			Handler:    _Msg_DeleteAirdropEntry_Handler,
		},
		{
			MethodName: "CloseAirdropCampaign",
			Handler:    _Msg_CloseAirdropCampaign_Handler,
		},
		{
			MethodName: "StartAirdropCampaign",
			Handler:    _Msg_StartAirdropCampaign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cfeairdrop/tx.proto",
}

func (m *MsgClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MissionId))
		i--
		dAtA[i] = 0x18
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitialClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitialClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitialClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressToClaim) > 0 {
		i -= len(m.AddressToClaim)
		copy(dAtA[i:], m.AddressToClaim)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AddressToClaim)))
		i--
		dAtA[i] = 0x22
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitialClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitialClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitialClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdropCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdropCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdropCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VestingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VestingPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockupPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTx(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	{
		size := m.InitialClaimFreeAmount.Size()
		i -= size
		if _, err := m.InitialClaimFreeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.AllowFeegrant {
		i--
		if m.AllowFeegrant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdropCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdropCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdropCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMissionToAidropCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMissionToAidropCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMissionToAidropCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimStartDate != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ClaimStartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClaimStartDate):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintTx(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.MissionType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MissionType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMissionToAidropCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMissionToAidropCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMissionToAidropCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAirdropEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAirdropEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAirdropEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AirdropEntries) > 0 {
		for iNdEx := len(m.AirdropEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AirdropEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAirdropEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAirdropEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAirdropEntriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAirdropEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAirdropEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAirdropEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAirdropEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAirdropEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAirdropEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCloseAirdropCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseAirdropCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseAirdropCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AirdropCloseAction != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AirdropCloseAction))
		i--
		dAtA[i] = 0x18
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseAirdropCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseAirdropCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseAirdropCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStartAirdropCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartAirdropCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartAirdropCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartAirdropCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartAirdropCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartAirdropCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditAirdropCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditAirdropCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditAirdropCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingPeriod != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.VestingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.VestingPeriod):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintTx(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x5a
	}
	if m.LockupPeriod != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.LockupPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.LockupPeriod):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintTx(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x52
	}
	if m.EndTime != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintTx(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x4a
	}
	if m.StartTime != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintTx(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x3a
	}
	if m.InitialClaimFreeAmount != nil {
		{
			size := m.InitialClaimFreeAmount.Size()
			i -= size
			if _, err := m.InitialClaimFreeAmount.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AllowFeegrant {
		i--
		if m.AllowFeegrant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditAirdropCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditAirdropCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditAirdropCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	if m.MissionId != 0 {
		n += 1 + sovTx(uint64(m.MissionId))
	}
	return n
}

func (m *MsgClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitialClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	l = len(m.AddressToClaim)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitialClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateAirdropCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AllowFeegrant {
		n += 2
	}
	l = m.InitialClaimFreeAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupPeriod)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VestingPeriod)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateAirdropCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMissionToAidropCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MissionType != 0 {
		n += 1 + sovTx(uint64(m.MissionType))
	}
	l = m.Weight.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ClaimStartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClaimStartDate)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMissionToAidropCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAirdropEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	if len(m.AirdropEntries) > 0 {
		for _, e := range m.AirdropEntries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAirdropEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteAirdropEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteAirdropEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCloseAirdropCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	if m.AirdropCloseAction != 0 {
		n += 1 + sovTx(uint64(m.AirdropCloseAction))
	}
	return n
}

func (m *MsgCloseAirdropCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStartAirdropCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	return n
}

func (m *MsgStartAirdropCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditAirdropCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovTx(uint64(m.CampaignId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AllowFeegrant {
		n += 2
	}
	if m.InitialClaimFreeAmount != nil {
		l = m.InitialClaimFreeAmount.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LockupPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.LockupPeriod)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VestingPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.VestingPeriod)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditAirdropCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitialClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitialClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitialClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressToClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressToClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitialClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitialClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitialClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdropCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdropCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdropCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFeegrant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFeegrant = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimFreeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialClaimFreeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockupPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VestingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdropCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdropCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdropCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMissionToAidropCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMissionToAidropCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMissionToAidropCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionType", wireType)
			}
			m.MissionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionType |= MissionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimStartDate == nil {
				m.ClaimStartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ClaimStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMissionToAidropCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMissionToAidropCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMissionToAidropCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAirdropEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAirdropEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAirdropEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropEntries = append(m.AirdropEntries, &AirdropEntry{})
			if err := m.AirdropEntries[len(m.AirdropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAirdropEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAirdropEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAirdropEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAirdropEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAirdropEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAirdropEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAirdropEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAirdropEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAirdropEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseAirdropCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseAirdropCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseAirdropCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropCloseAction", wireType)
			}
			m.AirdropCloseAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirdropCloseAction |= AirdropCloseAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseAirdropCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseAirdropCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseAirdropCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartAirdropCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartAirdropCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartAirdropCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartAirdropCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartAirdropCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartAirdropCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditAirdropCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditAirdropCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditAirdropCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFeegrant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFeegrant = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimFreeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.InitialClaimFreeAmount = &v
			if err := m.InitialClaimFreeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockupPeriod == nil {
				m.LockupPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.LockupPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VestingPeriod == nil {
				m.VestingPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.VestingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditAirdropCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditAirdropCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditAirdropCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
