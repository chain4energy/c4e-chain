// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeairdrop/airdrop.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MissionType int32

const (
	//  option (gogoproto.goproto_enum_prefix) = false;
	MissionType_UNSPECIFIED   MissionType = 0
	MissionType_INITIAL_CLAIM MissionType = 1
	MissionType_DELEGATION    MissionType = 2
	MissionType_VOTE          MissionType = 3
)

var MissionType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "INITIAL_CLAIM",
	2: "DELEGATION",
	3: "VOTE",
}

var MissionType_value = map[string]int32{
	"UNSPECIFIED":   0,
	"INITIAL_CLAIM": 1,
	"DELEGATION":    2,
	"VOTE":          3,
}

func (x MissionType) String() string {
	return proto.EnumName(MissionType_name, int32(x))
}

func (MissionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{0}
}

type UserAirdropEntries struct {
	Address        string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ClaimAddress   string          `protobuf:"bytes,2,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	AirdropEntries []*AirdropEntry `protobuf:"bytes,3,rep,name=airdrop_entries,json=airdropEntries,proto3" json:"airdrop_entries,omitempty"`
}

func (m *UserAirdropEntries) Reset()         { *m = UserAirdropEntries{} }
func (m *UserAirdropEntries) String() string { return proto.CompactTextString(m) }
func (*UserAirdropEntries) ProtoMessage()    {}
func (*UserAirdropEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{0}
}
func (m *UserAirdropEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAirdropEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAirdropEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAirdropEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAirdropEntries.Merge(m, src)
}
func (m *UserAirdropEntries) XXX_Size() int {
	return m.Size()
}
func (m *UserAirdropEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAirdropEntries.DiscardUnknown(m)
}

var xxx_messageInfo_UserAirdropEntries proto.InternalMessageInfo

func (m *UserAirdropEntries) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserAirdropEntries) GetClaimAddress() string {
	if m != nil {
		return m.ClaimAddress
	}
	return ""
}

func (m *UserAirdropEntries) GetAirdropEntries() []*AirdropEntry {
	if m != nil {
		return m.AirdropEntries
	}
	return nil
}

type AirdropEntry struct {
	CampaignId        uint64                                 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Address           string                                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	CompletedMissions []uint64                               `protobuf:"varint,4,rep,packed,name=completedMissions,proto3" json:"completedMissions,omitempty"`
	ClaimedMissions   []uint64                               `protobuf:"varint,5,rep,packed,name=claimedMissions,proto3" json:"claimedMissions,omitempty"`
}

func (m *AirdropEntry) Reset()         { *m = AirdropEntry{} }
func (m *AirdropEntry) String() string { return proto.CompactTextString(m) }
func (*AirdropEntry) ProtoMessage()    {}
func (*AirdropEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{1}
}
func (m *AirdropEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropEntry.Merge(m, src)
}
func (m *AirdropEntry) XXX_Size() int {
	return m.Size()
}
func (m *AirdropEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropEntry proto.InternalMessageInfo

func (m *AirdropEntry) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *AirdropEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AirdropEntry) GetCompletedMissions() []uint64 {
	if m != nil {
		return m.CompletedMissions
	}
	return nil
}

func (m *AirdropEntry) GetClaimedMissions() []uint64 {
	if m != nil {
		return m.ClaimedMissions
	}
	return nil
}

type AirdropEntries struct {
	AirdropEntries []*AirdropEntry `protobuf:"bytes,1,rep,name=airdrop_entries,json=airdropEntries,proto3" json:"airdrop_entries,omitempty"`
}

func (m *AirdropEntries) Reset()         { *m = AirdropEntries{} }
func (m *AirdropEntries) String() string { return proto.CompactTextString(m) }
func (*AirdropEntries) ProtoMessage()    {}
func (*AirdropEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{2}
}
func (m *AirdropEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropEntries.Merge(m, src)
}
func (m *AirdropEntries) XXX_Size() int {
	return m.Size()
}
func (m *AirdropEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropEntries.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropEntries proto.InternalMessageInfo

func (m *AirdropEntries) GetAirdropEntries() []*AirdropEntry {
	if m != nil {
		return m.AirdropEntries
	}
	return nil
}

type AirdropDistrubitions struct {
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *AirdropDistrubitions) Reset()         { *m = AirdropDistrubitions{} }
func (m *AirdropDistrubitions) String() string { return proto.CompactTextString(m) }
func (*AirdropDistrubitions) ProtoMessage()    {}
func (*AirdropDistrubitions) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{3}
}
func (m *AirdropDistrubitions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropDistrubitions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropDistrubitions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropDistrubitions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropDistrubitions.Merge(m, src)
}
func (m *AirdropDistrubitions) XXX_Size() int {
	return m.Size()
}
func (m *AirdropDistrubitions) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropDistrubitions.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropDistrubitions proto.InternalMessageInfo

func (m *AirdropDistrubitions) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type AirdropClaimsLeft struct {
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *AirdropClaimsLeft) Reset()         { *m = AirdropClaimsLeft{} }
func (m *AirdropClaimsLeft) String() string { return proto.CompactTextString(m) }
func (*AirdropClaimsLeft) ProtoMessage()    {}
func (*AirdropClaimsLeft) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{4}
}
func (m *AirdropClaimsLeft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropClaimsLeft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropClaimsLeft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropClaimsLeft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropClaimsLeft.Merge(m, src)
}
func (m *AirdropClaimsLeft) XXX_Size() int {
	return m.Size()
}
func (m *AirdropClaimsLeft) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropClaimsLeft.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropClaimsLeft proto.InternalMessageInfo

func (m *AirdropClaimsLeft) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type Campaign struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner       string     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name        string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     bool       `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Denom       string     `protobuf:"bytes,6,opt,name=denom,proto3" json:"denom,omitempty"`
	StartTime   *time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	EndTime     *time.Time `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time,omitempty"`
	// period of locked coins from claim
	LockupPeriod time.Duration `protobuf:"bytes,9,opt,name=lockup_period,json=lockupPeriod,proto3,stdduration" json:"lockup_period"`
	// period of vesting coins after lockup period
	VestingPeriod time.Duration `protobuf:"bytes,10,opt,name=vesting_period,json=vestingPeriod,proto3,stdduration" json:"vesting_period"`
}

func (m *Campaign) Reset()         { *m = Campaign{} }
func (m *Campaign) String() string { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()    {}
func (*Campaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{5}
}
func (m *Campaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Campaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Campaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Campaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign.Merge(m, src)
}
func (m *Campaign) XXX_Size() int {
	return m.Size()
}
func (m *Campaign) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign proto.InternalMessageInfo

func (m *Campaign) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Campaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Campaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Campaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Campaign) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Campaign) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Campaign) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Campaign) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Campaign) GetLockupPeriod() time.Duration {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

func (m *Campaign) GetVestingPeriod() time.Duration {
	if m != nil {
		return m.VestingPeriod
	}
	return 0
}

type Mission struct {
	Id             uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CampaignId     uint64                                  `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Name           string                                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MissionType    MissionType                             `protobuf:"varint,5,opt,name=missionType,proto3,enum=chain4energy.c4echain.cfeairdrop.MissionType" json:"missionType,omitempty"`
	Weight         *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight,omitempty"`
	ClaimStartDate *time.Time                              `protobuf:"bytes,7,opt,name=claim_start_date,json=claimStartDate,proto3,stdtime" json:"claim_start_date,omitempty"`
}

func (m *Mission) Reset()         { *m = Mission{} }
func (m *Mission) String() string { return proto.CompactTextString(m) }
func (*Mission) ProtoMessage()    {}
func (*Mission) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c7cf133d4c8bc8, []int{6}
}
func (m *Mission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mission.Merge(m, src)
}
func (m *Mission) XXX_Size() int {
	return m.Size()
}
func (m *Mission) XXX_DiscardUnknown() {
	xxx_messageInfo_Mission.DiscardUnknown(m)
}

var xxx_messageInfo_Mission proto.InternalMessageInfo

func (m *Mission) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mission) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *Mission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mission) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Mission) GetMissionType() MissionType {
	if m != nil {
		return m.MissionType
	}
	return MissionType_UNSPECIFIED
}

func (m *Mission) GetClaimStartDate() *time.Time {
	if m != nil {
		return m.ClaimStartDate
	}
	return nil
}

func init() {
	proto.RegisterEnum("chain4energy.c4echain.cfeairdrop.MissionType", MissionType_name, MissionType_value)
	proto.RegisterType((*UserAirdropEntries)(nil), "chain4energy.c4echain.cfeairdrop.UserAirdropEntries")
	proto.RegisterType((*AirdropEntry)(nil), "chain4energy.c4echain.cfeairdrop.AirdropEntry")
	proto.RegisterType((*AirdropEntries)(nil), "chain4energy.c4echain.cfeairdrop.AirdropEntries")
	proto.RegisterType((*AirdropDistrubitions)(nil), "chain4energy.c4echain.cfeairdrop.AirdropDistrubitions")
	proto.RegisterType((*AirdropClaimsLeft)(nil), "chain4energy.c4echain.cfeairdrop.AirdropClaimsLeft")
	proto.RegisterType((*Campaign)(nil), "chain4energy.c4echain.cfeairdrop.Campaign")
	proto.RegisterType((*Mission)(nil), "chain4energy.c4echain.cfeairdrop.Mission")
}

func init() { proto.RegisterFile("cfeairdrop/airdrop.proto", fileDescriptor_10c7cf133d4c8bc8) }

var fileDescriptor_10c7cf133d4c8bc8 = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0xb4, 0x4d, 0x5f, 0xda, 0x34, 0x1d, 0xf5, 0x60, 0x7a, 0x48, 0xa2, 0x20, 0x41,
	0x84, 0xa8, 0xad, 0x2d, 0xbd, 0xa3, 0x34, 0xc9, 0x82, 0xa1, 0x4d, 0x57, 0xde, 0x2c, 0x48, 0x5c,
	0xa2, 0x89, 0x3d, 0x75, 0x47, 0x1b, 0xcf, 0x58, 0x9e, 0xc9, 0x96, 0xf0, 0x2b, 0xf6, 0xc8, 0x6f,
	0x40, 0x9c, 0xf8, 0x15, 0x3d, 0xee, 0x11, 0x38, 0x74, 0x51, 0x7b, 0xe2, 0x5f, 0x20, 0xcf, 0x8c,
	0x59, 0x37, 0x45, 0xda, 0x16, 0x21, 0x4e, 0xf1, 0x9b, 0xf7, 0xbe, 0x6f, 0xde, 0xfb, 0xde, 0x9b,
	0x17, 0xb0, 0x83, 0x73, 0x82, 0x69, 0x1a, 0xa6, 0x3c, 0x71, 0xcd, 0xaf, 0x93, 0xa4, 0x5c, 0x72,
	0xd4, 0x09, 0x2e, 0x30, 0x65, 0x47, 0x84, 0x91, 0x34, 0x5a, 0x3a, 0xc1, 0x11, 0x51, 0xb6, 0xf3,
	0x2e, 0x7e, 0x7f, 0x2f, 0xe2, 0x11, 0x57, 0xc1, 0x6e, 0xf6, 0xa5, 0x71, 0xfb, 0xed, 0x88, 0xf3,
	0x68, 0x4e, 0x5c, 0x65, 0xcd, 0x16, 0xe7, 0xae, 0xa4, 0x31, 0x11, 0x12, 0xc7, 0x86, 0x78, 0xbf,
	0xb5, 0x1a, 0x10, 0x2e, 0x52, 0x2c, 0x29, 0x67, 0xb9, 0x3f, 0xe0, 0x22, 0xe6, 0xc2, 0x9d, 0x61,
	0x41, 0xdc, 0x57, 0x4f, 0x66, 0x44, 0xe2, 0x27, 0x6e, 0xc0, 0xa9, 0xf1, 0x77, 0x7f, 0xb6, 0x00,
	0xbd, 0x10, 0x24, 0xed, 0xeb, 0x34, 0x46, 0x4c, 0xa6, 0x94, 0x08, 0x64, 0xc3, 0x06, 0x0e, 0xc3,
	0x94, 0x08, 0x61, 0x5b, 0x1d, 0xab, 0xb7, 0xe9, 0xe7, 0x26, 0xfa, 0x10, 0xb6, 0x83, 0x39, 0xa6,
	0xf1, 0x34, 0xf7, 0x97, 0x95, 0x7f, 0x4b, 0x1d, 0xf6, 0x4d, 0xd0, 0xb7, 0xb0, 0x63, 0xea, 0x9a,
	0x12, 0xcd, 0x68, 0x57, 0x3a, 0x95, 0x5e, 0xfd, 0xd0, 0x71, 0xde, 0x27, 0x84, 0x53, 0xc8, 0x64,
	0xe9, 0x37, 0xf0, 0x9d, 0xbc, 0xba, 0x7f, 0x5a, 0xb0, 0x55, 0x0c, 0x40, 0x6d, 0xa8, 0x07, 0x38,
	0x4e, 0x30, 0x8d, 0xd8, 0x94, 0x86, 0x2a, 0xd9, 0xaa, 0x0f, 0xf9, 0x91, 0x17, 0x16, 0x2b, 0x29,
	0xdf, 0xad, 0xe4, 0x29, 0xac, 0xe3, 0x98, 0x2f, 0x98, 0xb4, 0x2b, 0x99, 0xe3, 0xd8, 0xb9, 0xba,
	0x6e, 0x97, 0x7e, 0xbf, 0x6e, 0x7f, 0x14, 0x51, 0x79, 0xb1, 0x98, 0x39, 0x01, 0x8f, 0x5d, 0xa3,
	0x9e, 0xfe, 0x39, 0x10, 0xe1, 0x4b, 0x57, 0x2e, 0x13, 0x22, 0x1c, 0x8f, 0x49, 0xdf, 0xa0, 0xd1,
	0xa7, 0xb0, 0x1b, 0xf0, 0x38, 0x99, 0x13, 0x49, 0xc2, 0x53, 0x2a, 0x04, 0xe5, 0x4c, 0xd8, 0xd5,
	0x4e, 0xa5, 0x57, 0xf5, 0xef, 0x3b, 0x50, 0x0f, 0x76, 0x94, 0x54, 0x85, 0xd8, 0x35, 0x15, 0xbb,
	0x7a, 0xdc, 0xa5, 0xd0, 0x58, 0xe9, 0xca, 0x3f, 0xc8, 0x6a, 0xfd, 0x27, 0xb2, 0xfe, 0x00, 0x7b,
	0xc6, 0x3f, 0xa4, 0x42, 0xa6, 0x8b, 0x19, 0x95, 0x2a, 0xd9, 0xd9, 0x1d, 0x89, 0xea, 0x87, 0x1f,
	0x38, 0x5a, 0x09, 0x27, 0x1b, 0x27, 0xc7, 0x8c, 0x93, 0x33, 0xe0, 0x94, 0x1d, 0xbb, 0x99, 0x7a,
	0x3f, 0xbd, 0x6d, 0x7f, 0xfc, 0x00, 0xf5, 0x32, 0x40, 0x2e, 0x5f, 0xf7, 0x12, 0x76, 0xcd, 0xdd,
	0x83, 0x4c, 0x00, 0x71, 0x42, 0xce, 0xe5, 0xff, 0x72, 0xf1, 0x2f, 0x15, 0xa8, 0x0d, 0xcc, 0xa0,
	0xa0, 0x06, 0x94, 0xff, 0x1e, 0x9f, 0x32, 0x0d, 0xd1, 0x1e, 0xac, 0xf1, 0x4b, 0x46, 0x52, 0x33,
	0x34, 0xda, 0x40, 0x08, 0xaa, 0x0c, 0xc7, 0x44, 0x0f, 0x8c, 0xaf, 0xbe, 0x51, 0x07, 0xea, 0x21,
	0x11, 0x41, 0x4a, 0x93, 0x4c, 0x33, 0xbb, 0xaa, 0x5c, 0xc5, 0xa3, 0x6c, 0x04, 0x09, 0xc3, 0xb3,
	0x39, 0x09, 0xed, 0xb5, 0x8e, 0xd5, 0xab, 0xf9, 0xb9, 0x99, 0xdd, 0x12, 0x12, 0xc6, 0x63, 0x7b,
	0x5d, 0xdf, 0xa2, 0x0c, 0x34, 0x00, 0x10, 0x12, 0xa7, 0x72, 0x9a, 0x3d, 0x76, 0x7b, 0x43, 0x09,
	0xb0, 0xef, 0xe8, 0x87, 0xee, 0xe4, 0x0f, 0xdd, 0x99, 0xe4, 0x9b, 0xe0, 0xb8, 0x76, 0x75, 0xdd,
	0xb6, 0x5e, 0xbf, 0x6d, 0x5b, 0xfe, 0xa6, 0xc2, 0x65, 0x1e, 0xf4, 0x39, 0xd4, 0x08, 0x0b, 0x35,
	0x45, 0xed, 0x11, 0x14, 0x1b, 0x84, 0x85, 0x8a, 0xe0, 0x4b, 0xd8, 0x9e, 0xf3, 0xe0, 0xe5, 0x22,
	0x99, 0x26, 0x24, 0xa5, 0x3c, 0xb4, 0x37, 0x4d, 0x27, 0x56, 0x59, 0x86, 0x66, 0xe3, 0x28, 0x92,
	0xd2, 0x8f, 0x19, 0xc9, 0x96, 0x46, 0x3e, 0x53, 0x40, 0xf4, 0x15, 0x34, 0x5e, 0x11, 0x21, 0x29,
	0x8b, 0x72, 0x2a, 0x78, 0x38, 0xd5, 0xb6, 0x81, 0x6a, 0xae, 0xee, 0x6f, 0x65, 0xd8, 0x30, 0x2f,
	0xe4, 0x5e, 0xcf, 0x56, 0x76, 0x41, 0xf9, 0xde, 0x2e, 0xf8, 0x77, 0xed, 0x3b, 0x83, 0x7a, 0xac,
	0x6f, 0x9c, 0x2c, 0x13, 0xa2, 0x5a, 0xd8, 0x38, 0x3c, 0x78, 0xff, 0x8b, 0x3b, 0x7d, 0x07, 0xf2,
	0x8b, 0x0c, 0xd9, 0xe2, 0xb9, 0x24, 0x34, 0xba, 0x90, 0xba, 0xed, 0x6a, 0xf1, 0x58, 0x0f, 0x5c,
	0x3c, 0x43, 0x12, 0xf8, 0x06, 0x8d, 0xc6, 0xd0, 0xd4, 0xab, 0x58, 0x4f, 0x4b, 0x88, 0xe5, 0xe3,
	0xa6, 0xa5, 0xa1, 0xd0, 0xcf, 0x33, 0xf0, 0x10, 0x4b, 0xf2, 0xc9, 0xd7, 0x50, 0x2f, 0xe4, 0x8c,
	0x76, 0xa0, 0xfe, 0x62, 0xfc, 0xfc, 0xd9, 0x68, 0xe0, 0x3d, 0xf5, 0x46, 0xc3, 0x66, 0x09, 0xed,
	0xc2, 0xb6, 0x37, 0xf6, 0x26, 0x5e, 0xff, 0x64, 0x3a, 0x38, 0xe9, 0x7b, 0xa7, 0x4d, 0x0b, 0x35,
	0x00, 0x86, 0xa3, 0x93, 0xd1, 0x17, 0xfd, 0x89, 0x77, 0x36, 0x6e, 0x96, 0x51, 0x0d, 0xaa, 0xdf,
	0x9c, 0x4d, 0x46, 0xcd, 0xca, 0xf1, 0xf8, 0xea, 0xa6, 0x65, 0xbd, 0xb9, 0x69, 0x59, 0x7f, 0xdc,
	0xb4, 0xac, 0xd7, 0xb7, 0xad, 0xd2, 0x9b, 0xdb, 0x56, 0xe9, 0xd7, 0xdb, 0x56, 0xe9, 0xbb, 0xa3,
	0x62, 0x99, 0x05, 0x11, 0xdd, 0xe0, 0x88, 0x1c, 0xa8, 0x03, 0xf7, 0x7b, 0xb7, 0xf0, 0x4f, 0xaa,
	0x0a, 0x9f, 0xad, 0xab, 0x52, 0x3e, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x21, 0xe2, 0xa6, 0xc8,
	0x64, 0x07, 0x00, 0x00,
}

func (m *UserAirdropEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAirdropEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAirdropEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AirdropEntries) > 0 {
		for iNdEx := len(m.AirdropEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AirdropEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAirdrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AirdropEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedMissions) > 0 {
		dAtA2 := make([]byte, len(m.ClaimedMissions)*10)
		var j1 int
		for _, num := range m.ClaimedMissions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintAirdrop(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CompletedMissions) > 0 {
		dAtA4 := make([]byte, len(m.CompletedMissions)*10)
		var j3 int
		for _, num := range m.CompletedMissions {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintAirdrop(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignId != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AirdropEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AirdropEntries) > 0 {
		for iNdEx := len(m.AirdropEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AirdropEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAirdrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AirdropDistrubitions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropDistrubitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropDistrubitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}

func (m *AirdropClaimsLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropClaimsLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropClaimsLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}

func (m *Campaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Campaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Campaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VestingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VestingPeriod):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintAirdrop(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x52
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockupPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupPeriod):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintAirdrop(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x4a
	if m.EndTime != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintAirdrop(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x42
	}
	if m.StartTime != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintAirdrop(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x32
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Mission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimStartDate != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ClaimStartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClaimStartDate):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintAirdrop(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x3a
	}
	if m.Weight != nil {
		{
			size := m.Weight.Size()
			i -= size
			if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintAirdrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MissionType != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.MissionType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAirdrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovAirdrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserAirdropEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if len(m.AirdropEntries) > 0 {
		for _, e := range m.AirdropEntries {
			l = e.Size()
			n += 1 + l + sovAirdrop(uint64(l))
		}
	}
	return n
}

func (m *AirdropEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovAirdrop(uint64(m.CampaignId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	if len(m.CompletedMissions) > 0 {
		l = 0
		for _, e := range m.CompletedMissions {
			l += sovAirdrop(uint64(e))
		}
		n += 1 + sovAirdrop(uint64(l)) + l
	}
	if len(m.ClaimedMissions) > 0 {
		l = 0
		for _, e := range m.ClaimedMissions {
			l += sovAirdrop(uint64(e))
		}
		n += 1 + sovAirdrop(uint64(l)) + l
	}
	return n
}

func (m *AirdropEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AirdropEntries) > 0 {
		for _, e := range m.AirdropEntries {
			l = e.Size()
			n += 1 + l + sovAirdrop(uint64(l))
		}
	}
	return n
}

func (m *AirdropDistrubitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	return n
}

func (m *AirdropClaimsLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	return n
}

func (m *Campaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAirdrop(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupPeriod)
	n += 1 + l + sovAirdrop(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VestingPeriod)
	n += 1 + l + sovAirdrop(uint64(l))
	return n
}

func (m *Mission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAirdrop(uint64(m.Id))
	}
	if m.CampaignId != 0 {
		n += 1 + sovAirdrop(uint64(m.CampaignId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.MissionType != 0 {
		n += 1 + sovAirdrop(uint64(m.MissionType))
	}
	if m.Weight != nil {
		l = m.Weight.Size()
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.ClaimStartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClaimStartDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	return n
}

func sovAirdrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAirdrop(x uint64) (n int) {
	return sovAirdrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserAirdropEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAirdropEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAirdropEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropEntries = append(m.AirdropEntries, &AirdropEntry{})
			if err := m.AirdropEntries[len(m.AirdropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAirdrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompletedMissions = append(m.CompletedMissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAirdrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAirdrop
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAirdrop
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompletedMissions) == 0 {
					m.CompletedMissions = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAirdrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompletedMissions = append(m.CompletedMissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedMissions", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAirdrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClaimedMissions = append(m.ClaimedMissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAirdrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAirdrop
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAirdrop
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ClaimedMissions) == 0 {
					m.ClaimedMissions = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAirdrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClaimedMissions = append(m.ClaimedMissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedMissions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropEntries = append(m.AirdropEntries, &AirdropEntry{})
			if err := m.AirdropEntries[len(m.AirdropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropDistrubitions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropDistrubitions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropDistrubitions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropClaimsLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropClaimsLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropClaimsLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Campaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Campaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Campaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockupPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VestingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionType", wireType)
			}
			m.MissionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionType |= MissionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Weight = &v
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimStartDate == nil {
				m.ClaimStartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ClaimStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAirdrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAirdrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAirdrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAirdrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAirdrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAirdrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAirdrop = fmt.Errorf("proto: unexpected end of group")
)
