// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfeairdrop/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewCampaign struct {
	Owner                  string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description            string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CampaignType           string `protobuf:"bytes,5,opt,name=campaignType,proto3" json:"campaignType,omitempty"`
	FeegrantAmount         string `protobuf:"bytes,6,opt,name=feegrant_amount,json=feegrantAmount,proto3" json:"feegrant_amount,omitempty"`
	InitialClaimFreeAmount string `protobuf:"bytes,7,opt,name=initial_claim_free_amount,json=initialClaimFreeAmount,proto3" json:"initial_claim_free_amount,omitempty"`
	Enabled                string `protobuf:"bytes,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StartTime              string `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                string `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LockupPeriod           string `protobuf:"bytes,11,opt,name=lockup_period,json=lockupPeriod,proto3" json:"lockup_period,omitempty"`
	VestingPeriod          string `protobuf:"bytes,12,opt,name=vesting_period,json=vestingPeriod,proto3" json:"vesting_period,omitempty"`
}

func (m *NewCampaign) Reset()         { *m = NewCampaign{} }
func (m *NewCampaign) String() string { return proto.CompactTextString(m) }
func (*NewCampaign) ProtoMessage()    {}
func (*NewCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{0}
}
func (m *NewCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCampaign.Merge(m, src)
}
func (m *NewCampaign) XXX_Size() int {
	return m.Size()
}
func (m *NewCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_NewCampaign proto.InternalMessageInfo

func (m *NewCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NewCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NewCampaign) GetCampaignType() string {
	if m != nil {
		return m.CampaignType
	}
	return ""
}

func (m *NewCampaign) GetFeegrantAmount() string {
	if m != nil {
		return m.FeegrantAmount
	}
	return ""
}

func (m *NewCampaign) GetInitialClaimFreeAmount() string {
	if m != nil {
		return m.InitialClaimFreeAmount
	}
	return ""
}

func (m *NewCampaign) GetEnabled() string {
	if m != nil {
		return m.Enabled
	}
	return ""
}

func (m *NewCampaign) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *NewCampaign) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *NewCampaign) GetLockupPeriod() string {
	if m != nil {
		return m.LockupPeriod
	}
	return ""
}

func (m *NewCampaign) GetVestingPeriod() string {
	if m != nil {
		return m.VestingPeriod
	}
	return ""
}

type EditCampaign struct {
	Owner                  string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description            string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CampaignType           string `protobuf:"bytes,5,opt,name=campaignType,proto3" json:"campaignType,omitempty"`
	FeegrantAmount         string `protobuf:"bytes,6,opt,name=feegrant_amount,json=feegrantAmount,proto3" json:"feegrant_amount,omitempty"`
	InitialClaimFreeAmount string `protobuf:"bytes,7,opt,name=initial_claim_free_amount,json=initialClaimFreeAmount,proto3" json:"initial_claim_free_amount,omitempty"`
	Enabled                string `protobuf:"bytes,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StartTime              string `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                string `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LockupPeriod           string `protobuf:"bytes,11,opt,name=lockup_period,json=lockupPeriod,proto3" json:"lockup_period,omitempty"`
	VestingPeriod          string `protobuf:"bytes,12,opt,name=vesting_period,json=vestingPeriod,proto3" json:"vesting_period,omitempty"`
}

func (m *EditCampaign) Reset()         { *m = EditCampaign{} }
func (m *EditCampaign) String() string { return proto.CompactTextString(m) }
func (*EditCampaign) ProtoMessage()    {}
func (*EditCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{1}
}
func (m *EditCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditCampaign.Merge(m, src)
}
func (m *EditCampaign) XXX_Size() int {
	return m.Size()
}
func (m *EditCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_EditCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_EditCampaign proto.InternalMessageInfo

func (m *EditCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EditCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EditCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EditCampaign) GetCampaignType() string {
	if m != nil {
		return m.CampaignType
	}
	return ""
}

func (m *EditCampaign) GetFeegrantAmount() string {
	if m != nil {
		return m.FeegrantAmount
	}
	return ""
}

func (m *EditCampaign) GetInitialClaimFreeAmount() string {
	if m != nil {
		return m.InitialClaimFreeAmount
	}
	return ""
}

func (m *EditCampaign) GetEnabled() string {
	if m != nil {
		return m.Enabled
	}
	return ""
}

func (m *EditCampaign) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *EditCampaign) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *EditCampaign) GetLockupPeriod() string {
	if m != nil {
		return m.LockupPeriod
	}
	return ""
}

func (m *EditCampaign) GetVestingPeriod() string {
	if m != nil {
		return m.VestingPeriod
	}
	return ""
}

type CloseCampaign struct {
	Owner               string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId          string `protobuf:"bytes,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	CampaignCloseAction string `protobuf:"bytes,3,opt,name=campaign_close_action,json=campaignCloseAction,proto3" json:"campaign_close_action,omitempty"`
}

func (m *CloseCampaign) Reset()         { *m = CloseCampaign{} }
func (m *CloseCampaign) String() string { return proto.CompactTextString(m) }
func (*CloseCampaign) ProtoMessage()    {}
func (*CloseCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{2}
}
func (m *CloseCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseCampaign.Merge(m, src)
}
func (m *CloseCampaign) XXX_Size() int {
	return m.Size()
}
func (m *CloseCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_CloseCampaign proto.InternalMessageInfo

func (m *CloseCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CloseCampaign) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *CloseCampaign) GetCampaignCloseAction() string {
	if m != nil {
		return m.CampaignCloseAction
	}
	return ""
}

type RemoveCampaign struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId string `protobuf:"bytes,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (m *RemoveCampaign) Reset()         { *m = RemoveCampaign{} }
func (m *RemoveCampaign) String() string { return proto.CompactTextString(m) }
func (*RemoveCampaign) ProtoMessage()    {}
func (*RemoveCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{3}
}
func (m *RemoveCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveCampaign.Merge(m, src)
}
func (m *RemoveCampaign) XXX_Size() int {
	return m.Size()
}
func (m *RemoveCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveCampaign proto.InternalMessageInfo

func (m *RemoveCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RemoveCampaign) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

type StartCampaign struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId string `protobuf:"bytes,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
}

func (m *StartCampaign) Reset()         { *m = StartCampaign{} }
func (m *StartCampaign) String() string { return proto.CompactTextString(m) }
func (*StartCampaign) ProtoMessage()    {}
func (*StartCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{4}
}
func (m *StartCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartCampaign.Merge(m, src)
}
func (m *StartCampaign) XXX_Size() int {
	return m.Size()
}
func (m *StartCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_StartCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_StartCampaign proto.InternalMessageInfo

func (m *StartCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *StartCampaign) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

type AddMissionToCampaign struct {
	Owner          string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId     string `protobuf:"bytes,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MissionType    string `protobuf:"bytes,5,opt,name=missionType,proto3" json:"missionType,omitempty"`
	Weight         string `protobuf:"bytes,6,opt,name=weight,proto3" json:"weight,omitempty"`
	ClaimStartDate string `protobuf:"bytes,7,opt,name=claim_start_date,json=claimStartDate,proto3" json:"claim_start_date,omitempty"`
}

func (m *AddMissionToCampaign) Reset()         { *m = AddMissionToCampaign{} }
func (m *AddMissionToCampaign) String() string { return proto.CompactTextString(m) }
func (*AddMissionToCampaign) ProtoMessage()    {}
func (*AddMissionToCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{5}
}
func (m *AddMissionToCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMissionToCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMissionToCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMissionToCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMissionToCampaign.Merge(m, src)
}
func (m *AddMissionToCampaign) XXX_Size() int {
	return m.Size()
}
func (m *AddMissionToCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMissionToCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_AddMissionToCampaign proto.InternalMessageInfo

func (m *AddMissionToCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AddMissionToCampaign) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *AddMissionToCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddMissionToCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddMissionToCampaign) GetMissionType() string {
	if m != nil {
		return m.MissionType
	}
	return ""
}

func (m *AddMissionToCampaign) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *AddMissionToCampaign) GetClaimStartDate() string {
	if m != nil {
		return m.ClaimStartDate
	}
	return ""
}

type Claim struct {
	Claimer    string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	CampaignId string `protobuf:"bytes,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	MissionId  string `protobuf:"bytes,3,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Amount     string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{6}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *Claim) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *Claim) GetMissionId() string {
	if m != nil {
		return m.MissionId
	}
	return ""
}

func (m *Claim) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type InitialClaim struct {
	Claimer        string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	CampaignId     string `protobuf:"bytes,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	AddressToClaim string `protobuf:"bytes,3,opt,name=addressToClaim,proto3" json:"addressToClaim,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *InitialClaim) Reset()         { *m = InitialClaim{} }
func (m *InitialClaim) String() string { return proto.CompactTextString(m) }
func (*InitialClaim) ProtoMessage()    {}
func (*InitialClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{7}
}
func (m *InitialClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitialClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitialClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitialClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitialClaim.Merge(m, src)
}
func (m *InitialClaim) XXX_Size() int {
	return m.Size()
}
func (m *InitialClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_InitialClaim.DiscardUnknown(m)
}

var xxx_messageInfo_InitialClaim proto.InternalMessageInfo

func (m *InitialClaim) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *InitialClaim) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *InitialClaim) GetAddressToClaim() string {
	if m != nil {
		return m.AddressToClaim
	}
	return ""
}

func (m *InitialClaim) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type AddClaimRecords struct {
	Owner                   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId              string `protobuf:"bytes,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	ClaimRecordsTotalAmount string `protobuf:"bytes,3,opt,name=claim_records_total_amount,json=claimRecordsTotalAmount,proto3" json:"claim_records_total_amount,omitempty"`
	ClaimRecordsNumber      string `protobuf:"bytes,4,opt,name=claim_records_number,json=claimRecordsNumber,proto3" json:"claim_records_number,omitempty"`
}

func (m *AddClaimRecords) Reset()         { *m = AddClaimRecords{} }
func (m *AddClaimRecords) String() string { return proto.CompactTextString(m) }
func (*AddClaimRecords) ProtoMessage()    {}
func (*AddClaimRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{8}
}
func (m *AddClaimRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddClaimRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddClaimRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddClaimRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClaimRecords.Merge(m, src)
}
func (m *AddClaimRecords) XXX_Size() int {
	return m.Size()
}
func (m *AddClaimRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClaimRecords.DiscardUnknown(m)
}

var xxx_messageInfo_AddClaimRecords proto.InternalMessageInfo

func (m *AddClaimRecords) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AddClaimRecords) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *AddClaimRecords) GetClaimRecordsTotalAmount() string {
	if m != nil {
		return m.ClaimRecordsTotalAmount
	}
	return ""
}

func (m *AddClaimRecords) GetClaimRecordsNumber() string {
	if m != nil {
		return m.ClaimRecordsNumber
	}
	return ""
}

type DeleteClaimRecord struct {
	Owner             string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId        string `protobuf:"bytes,2,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	UserAddress       string `protobuf:"bytes,3,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	ClaimRecordAmount string `protobuf:"bytes,4,opt,name=claim_record_amount,json=claimRecordAmount,proto3" json:"claim_record_amount,omitempty"`
}

func (m *DeleteClaimRecord) Reset()         { *m = DeleteClaimRecord{} }
func (m *DeleteClaimRecord) String() string { return proto.CompactTextString(m) }
func (*DeleteClaimRecord) ProtoMessage()    {}
func (*DeleteClaimRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{9}
}
func (m *DeleteClaimRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteClaimRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteClaimRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteClaimRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClaimRecord.Merge(m, src)
}
func (m *DeleteClaimRecord) XXX_Size() int {
	return m.Size()
}
func (m *DeleteClaimRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClaimRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClaimRecord proto.InternalMessageInfo

func (m *DeleteClaimRecord) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DeleteClaimRecord) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *DeleteClaimRecord) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *DeleteClaimRecord) GetClaimRecordAmount() string {
	if m != nil {
		return m.ClaimRecordAmount
	}
	return ""
}

type CompleteMissionFromHook struct {
	CampaignId  string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	MissionId   string `protobuf:"bytes,2,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	UserAddress string `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *CompleteMissionFromHook) Reset()         { *m = CompleteMissionFromHook{} }
func (m *CompleteMissionFromHook) String() string { return proto.CompactTextString(m) }
func (*CompleteMissionFromHook) ProtoMessage()    {}
func (*CompleteMissionFromHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9bc6c2d85cc850, []int{10}
}
func (m *CompleteMissionFromHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteMissionFromHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteMissionFromHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteMissionFromHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteMissionFromHook.Merge(m, src)
}
func (m *CompleteMissionFromHook) XXX_Size() int {
	return m.Size()
}
func (m *CompleteMissionFromHook) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteMissionFromHook.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteMissionFromHook proto.InternalMessageInfo

func (m *CompleteMissionFromHook) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *CompleteMissionFromHook) GetMissionId() string {
	if m != nil {
		return m.MissionId
	}
	return ""
}

func (m *CompleteMissionFromHook) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*NewCampaign)(nil), "chain4energy.c4echain.cfeairdrop.NewCampaign")
	proto.RegisterType((*EditCampaign)(nil), "chain4energy.c4echain.cfeairdrop.EditCampaign")
	proto.RegisterType((*CloseCampaign)(nil), "chain4energy.c4echain.cfeairdrop.CloseCampaign")
	proto.RegisterType((*RemoveCampaign)(nil), "chain4energy.c4echain.cfeairdrop.RemoveCampaign")
	proto.RegisterType((*StartCampaign)(nil), "chain4energy.c4echain.cfeairdrop.StartCampaign")
	proto.RegisterType((*AddMissionToCampaign)(nil), "chain4energy.c4echain.cfeairdrop.AddMissionToCampaign")
	proto.RegisterType((*Claim)(nil), "chain4energy.c4echain.cfeairdrop.Claim")
	proto.RegisterType((*InitialClaim)(nil), "chain4energy.c4echain.cfeairdrop.InitialClaim")
	proto.RegisterType((*AddClaimRecords)(nil), "chain4energy.c4echain.cfeairdrop.AddClaimRecords")
	proto.RegisterType((*DeleteClaimRecord)(nil), "chain4energy.c4echain.cfeairdrop.DeleteClaimRecord")
	proto.RegisterType((*CompleteMissionFromHook)(nil), "chain4energy.c4echain.cfeairdrop.CompleteMissionFromHook")
}

func init() { proto.RegisterFile("c4echain/cfeairdrop/event.proto", fileDescriptor_1e9bc6c2d85cc850) }

var fileDescriptor_1e9bc6c2d85cc850 = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x3d, 0x4f, 0x1c, 0x49,
	0x10, 0x65, 0xf8, 0xde, 0xda, 0x0f, 0x8e, 0x66, 0x0f, 0x06, 0x24, 0x96, 0xbd, 0x39, 0xdd, 0x1d,
	0xc9, 0xed, 0x9e, 0xce, 0x9b, 0x58, 0x8e, 0xd6, 0x0b, 0xc8, 0x04, 0x46, 0x16, 0xde, 0xc8, 0xc9,
	0xa8, 0x77, 0xba, 0x18, 0x5a, 0xec, 0x4c, 0x8f, 0x7a, 0x7a, 0xc1, 0x6b, 0x39, 0xb1, 0x33, 0x67,
	0xce, 0xfd, 0x43, 0xfc, 0x17, 0x1c, 0x12, 0x3a, 0xb4, 0x40, 0xf2, 0xef, 0xb0, 0xa6, 0xbb, 0x07,
	0x06, 0x10, 0x42, 0x82, 0xc0, 0x89, 0xb3, 0xe9, 0x57, 0xaf, 0xaa, 0x5f, 0x57, 0xbd, 0x1e, 0x35,
	0x6c, 0x04, 0x1d, 0x0c, 0x0e, 0x29, 0x8f, 0xdb, 0xc1, 0x01, 0x52, 0x2e, 0x99, 0x14, 0x49, 0x1b,
	0x8f, 0x31, 0x56, 0xad, 0x44, 0x0a, 0x25, 0x48, 0x53, 0x47, 0x3b, 0x18, 0xa3, 0x0c, 0xc7, 0xad,
	0x9c, 0xdd, 0xba, 0x64, 0xaf, 0xd5, 0x43, 0x11, 0x0a, 0x4d, 0x6e, 0x67, 0x5f, 0x26, 0xcf, 0x7b,
	0x37, 0x05, 0xe5, 0x3d, 0x3c, 0xe9, 0xd1, 0x28, 0xa1, 0x3c, 0x8c, 0x49, 0x1d, 0x66, 0xc4, 0x49,
	0x8c, 0xd2, 0x9d, 0x6c, 0x3a, 0x9b, 0xa5, 0x7d, 0xb3, 0x20, 0x04, 0xa6, 0x63, 0x1a, 0xa1, 0x3b,
	0xa5, 0x41, 0xfd, 0x4d, 0x9a, 0x50, 0x66, 0x98, 0x06, 0x92, 0x27, 0x8a, 0x8b, 0xd8, 0x9d, 0xd6,
	0xa1, 0x22, 0x44, 0x3c, 0xa8, 0x04, 0xb6, 0x6e, 0x7f, 0x9c, 0xa0, 0x3b, 0xa3, 0x29, 0x57, 0x30,
	0xf2, 0x0f, 0x2c, 0x1c, 0x20, 0x86, 0x92, 0xc6, 0xca, 0xa7, 0x91, 0x18, 0xc5, 0xca, 0x9d, 0xd5,
	0xb4, 0x5a, 0x0e, 0x77, 0x35, 0x4a, 0x1e, 0xc3, 0x2a, 0x8f, 0xb9, 0xe2, 0x74, 0xe8, 0x07, 0x43,
	0xca, 0x23, 0xff, 0x40, 0x22, 0xe6, 0x29, 0x73, 0x3a, 0x65, 0xd9, 0x12, 0x7a, 0x59, 0x7c, 0x47,
	0x22, 0xda, 0x54, 0x17, 0xe6, 0x30, 0xa6, 0x83, 0x21, 0x32, 0x77, 0x5e, 0x13, 0xf3, 0x25, 0x59,
	0x07, 0x48, 0x15, 0x95, 0xca, 0x57, 0x3c, 0x42, 0xb7, 0xa4, 0x83, 0x25, 0x8d, 0xf4, 0x79, 0x84,
	0x64, 0x15, 0xe6, 0x31, 0x66, 0x26, 0x08, 0x79, 0x26, 0xd3, 0xa1, 0x3f, 0xa1, 0x3a, 0x14, 0xc1,
	0xd1, 0x28, 0xf1, 0x13, 0x94, 0x5c, 0x30, 0xb7, 0x6c, 0x0e, 0x67, 0xc0, 0x17, 0x1a, 0x23, 0x7f,
	0x41, 0xed, 0x18, 0x53, 0xc5, 0xe3, 0x30, 0x67, 0x55, 0x34, 0xab, 0x6a, 0x51, 0x43, 0xf3, 0xde,
	0x4f, 0x41, 0x65, 0x9b, 0x71, 0xf5, 0x6b, 0x08, 0x3f, 0x71, 0x08, 0x6f, 0xa0, 0xda, 0x1b, 0x8a,
	0x14, 0x6f, 0x0e, 0xc1, 0x29, 0x0e, 0x61, 0x03, 0xca, 0x79, 0xeb, 0x7c, 0xce, 0xec, 0x80, 0x20,
	0x87, 0x76, 0x19, 0xf9, 0x1f, 0x7e, 0xbf, 0x20, 0x04, 0x59, 0x41, 0x9f, 0x06, 0x7a, 0x36, 0x66,
	0x6c, 0x4b, 0x79, 0x50, 0x6f, 0xd6, 0xd5, 0x21, 0x6f, 0x07, 0x6a, 0xfb, 0x18, 0x89, 0xe3, 0xbb,
	0x36, 0x6f, 0x40, 0x61, 0xa7, 0x9b, 0x7b, 0x7b, 0xdb, 0x50, 0x7d, 0x99, 0xf5, 0xed, 0x81, 0x65,
	0xbe, 0x3b, 0x50, 0xef, 0x32, 0xf6, 0x9c, 0xa7, 0x29, 0x17, 0x71, 0x5f, 0x3c, 0xac, 0xdc, 0x3d,
	0x7d, 0xdb, 0x84, 0x72, 0x64, 0x05, 0x5c, 0xda, 0xb6, 0x08, 0x91, 0x65, 0x98, 0x3d, 0x41, 0x1e,
	0x1e, 0xe6, 0x66, 0xb5, 0x2b, 0xb2, 0x09, 0xbf, 0x19, 0x73, 0x1a, 0x57, 0x31, 0xaa, 0xd0, 0x7a,
	0xb3, 0xa6, 0x71, 0xdd, 0xa2, 0x2d, 0xaa, 0xd0, 0x1b, 0xc3, 0x8c, 0xb6, 0x69, 0x66, 0x4e, 0x1d,
	0xba, 0x38, 0x5a, 0xbe, 0xbc, 0x7b, 0xde, 0xeb, 0x00, 0x56, 0x54, 0x16, 0x37, 0x67, 0x2c, 0x59,
	0x64, 0x97, 0x65, 0x22, 0xed, 0xf5, 0x30, 0x67, 0xb4, 0x2b, 0xef, 0x83, 0x03, 0x95, 0xdd, 0xc2,
	0x4d, 0x79, 0x88, 0x84, 0xbf, 0xa1, 0x46, 0x19, 0x93, 0x98, 0xa6, 0x7d, 0xa1, 0x8b, 0x59, 0x19,
	0xd7, 0xd0, 0x5b, 0xb5, 0x7c, 0x76, 0x60, 0xa1, 0xcb, 0x98, 0x26, 0xed, 0x63, 0x20, 0x24, 0x4b,
	0xef, 0xeb, 0xfe, 0x27, 0xb0, 0x66, 0x7a, 0x2f, 0x4d, 0x1d, 0x5f, 0x09, 0x45, 0x87, 0xf9, 0x1f,
	0xc2, 0xc8, 0x5a, 0x09, 0x0a, 0x1b, 0xf5, 0xb3, 0xb8, 0xfd, 0x45, 0xfc, 0x07, 0xf5, 0xab, 0xc9,
	0xf1, 0x28, 0x1a, 0xa0, 0xb4, 0x6a, 0x49, 0x31, 0x6d, 0x4f, 0x47, 0xbc, 0x4f, 0x0e, 0x2c, 0x6e,
	0xe1, 0x10, 0x15, 0x16, 0xc4, 0xdf, 0xd3, 0xa6, 0x4d, 0x28, 0x8f, 0x52, 0x94, 0x5d, 0xd3, 0x33,
	0xab, 0xb5, 0x08, 0x91, 0x16, 0x2c, 0x15, 0xf5, 0xf9, 0x57, 0x9a, 0xb9, 0x58, 0x90, 0x67, 0xce,
	0xe3, 0xbd, 0x85, 0x95, 0x9e, 0x88, 0x92, 0x4c, 0x9e, 0xbd, 0x4b, 0x3b, 0x52, 0x44, 0xcf, 0x84,
	0x38, 0xba, 0xde, 0x48, 0xe7, 0x0e, 0x5b, 0x4d, 0x5e, 0xb7, 0xd5, 0x1f, 0x50, 0xc9, 0x94, 0xf9,
	0xf4, 0x56, 0xb5, 0x4f, 0xf7, 0xbe, 0x9c, 0x35, 0x9c, 0xd3, 0xb3, 0x86, 0xf3, 0xed, 0xac, 0xe1,
	0x7c, 0x3c, 0x6f, 0x4c, 0x9c, 0x9e, 0x37, 0x26, 0xbe, 0x9e, 0x37, 0x26, 0x5e, 0x75, 0x42, 0xae,
	0x0e, 0x47, 0x83, 0x56, 0x20, 0xa2, 0x76, 0xf1, 0xd9, 0xd0, 0x0e, 0x3a, 0xf8, 0xaf, 0x79, 0x65,
	0xbc, 0x2e, 0xbe, 0x33, 0xd4, 0x38, 0xc1, 0x74, 0x30, 0xab, 0x1f, 0x0c, 0x8f, 0x7e, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x94, 0x8f, 0xf7, 0x01, 0x8b, 0x08, 0x00, 0x00,
}

func (m *NewCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingPeriod) > 0 {
		i -= len(m.VestingPeriod)
		copy(dAtA[i:], m.VestingPeriod)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.VestingPeriod)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LockupPeriod) > 0 {
		i -= len(m.LockupPeriod)
		copy(dAtA[i:], m.LockupPeriod)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LockupPeriod)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Enabled) > 0 {
		i -= len(m.Enabled)
		copy(dAtA[i:], m.Enabled)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Enabled)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InitialClaimFreeAmount) > 0 {
		i -= len(m.InitialClaimFreeAmount)
		copy(dAtA[i:], m.InitialClaimFreeAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.InitialClaimFreeAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FeegrantAmount) > 0 {
		i -= len(m.FeegrantAmount)
		copy(dAtA[i:], m.FeegrantAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeegrantAmount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CampaignType) > 0 {
		i -= len(m.CampaignType)
		copy(dAtA[i:], m.CampaignType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *EditCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingPeriod) > 0 {
		i -= len(m.VestingPeriod)
		copy(dAtA[i:], m.VestingPeriod)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.VestingPeriod)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LockupPeriod) > 0 {
		i -= len(m.LockupPeriod)
		copy(dAtA[i:], m.LockupPeriod)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LockupPeriod)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Enabled) > 0 {
		i -= len(m.Enabled)
		copy(dAtA[i:], m.Enabled)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Enabled)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InitialClaimFreeAmount) > 0 {
		i -= len(m.InitialClaimFreeAmount)
		copy(dAtA[i:], m.InitialClaimFreeAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.InitialClaimFreeAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FeegrantAmount) > 0 {
		i -= len(m.FeegrantAmount)
		copy(dAtA[i:], m.FeegrantAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeegrantAmount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CampaignType) > 0 {
		i -= len(m.CampaignType)
		copy(dAtA[i:], m.CampaignType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CloseCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampaignCloseAction) > 0 {
		i -= len(m.CampaignCloseAction)
		copy(dAtA[i:], m.CampaignCloseAction)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignCloseAction)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMissionToCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMissionToCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMissionToCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimStartDate) > 0 {
		i -= len(m.ClaimStartDate)
		copy(dAtA[i:], m.ClaimStartDate)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimStartDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MissionType) > 0 {
		i -= len(m.MissionType)
		copy(dAtA[i:], m.MissionType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MissionType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MissionId) > 0 {
		i -= len(m.MissionId)
		copy(dAtA[i:], m.MissionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MissionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitialClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitialClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitialClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddressToClaim) > 0 {
		i -= len(m.AddressToClaim)
		copy(dAtA[i:], m.AddressToClaim)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AddressToClaim)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddClaimRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddClaimRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddClaimRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimRecordsNumber) > 0 {
		i -= len(m.ClaimRecordsNumber)
		copy(dAtA[i:], m.ClaimRecordsNumber)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimRecordsNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimRecordsTotalAmount) > 0 {
		i -= len(m.ClaimRecordsTotalAmount)
		copy(dAtA[i:], m.ClaimRecordsTotalAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimRecordsTotalAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteClaimRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteClaimRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteClaimRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimRecordAmount) > 0 {
		i -= len(m.ClaimRecordAmount)
		copy(dAtA[i:], m.ClaimRecordAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimRecordAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteMissionFromHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteMissionFromHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteMissionFromHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MissionId) > 0 {
		i -= len(m.MissionId)
		copy(dAtA[i:], m.MissionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MissionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.FeegrantAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.InitialClaimFreeAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Enabled)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.LockupPeriod)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.VestingPeriod)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EditCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.FeegrantAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.InitialClaimFreeAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Enabled)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.LockupPeriod)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.VestingPeriod)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *CloseCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignCloseAction)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RemoveCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *StartCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AddMissionToCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.MissionType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimStartDate)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.MissionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *InitialClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AddressToClaim)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AddClaimRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimRecordsTotalAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimRecordsNumber)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DeleteClaimRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimRecordAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *CompleteMissionFromHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.MissionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeegrantAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeegrantAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimFreeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialClaimFreeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enabled = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeegrantAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeegrantAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimFreeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialClaimFreeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enabled = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignCloseAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignCloseAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMissionToCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMissionToCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMissionToCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitialClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitialClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitialClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressToClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressToClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddClaimRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddClaimRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddClaimRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecordsTotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecordsTotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecordsNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecordsNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteClaimRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteClaimRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteClaimRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecordAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecordAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteMissionFromHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteMissionFromHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteMissionFromHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
