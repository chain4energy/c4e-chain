// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeairdrop/initial_claim.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitialClaim struct {
	CampaignId string `protobuf:"bytes,1,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	Enabled    string `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MissionId  string `protobuf:"bytes,3,opt,name=missionId,proto3" json:"missionId,omitempty"`
}

func (m *InitialClaim) Reset()         { *m = InitialClaim{} }
func (m *InitialClaim) String() string { return proto.CompactTextString(m) }
func (*InitialClaim) ProtoMessage()    {}
func (*InitialClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1496a3a98ebf78, []int{0}
}
func (m *InitialClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitialClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitialClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitialClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitialClaim.Merge(m, src)
}
func (m *InitialClaim) XXX_Size() int {
	return m.Size()
}
func (m *InitialClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_InitialClaim.DiscardUnknown(m)
}

var xxx_messageInfo_InitialClaim proto.InternalMessageInfo

func (m *InitialClaim) GetCampaignId() string {
	if m != nil {
		return m.CampaignId
	}
	return ""
}

func (m *InitialClaim) GetEnabled() string {
	if m != nil {
		return m.Enabled
	}
	return ""
}

func (m *InitialClaim) GetMissionId() string {
	if m != nil {
		return m.MissionId
	}
	return ""
}

func init() {
	proto.RegisterType((*InitialClaim)(nil), "chain4energy.c4echain.cfeairdrop.InitialClaim")
}

func init() { proto.RegisterFile("cfeairdrop/initial_claim.proto", fileDescriptor_6b1496a3a98ebf78) }

var fileDescriptor_6b1496a3a98ebf78 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x4e, 0x4b, 0x4d,
	0xcc, 0x2c, 0x4a, 0x29, 0xca, 0x2f, 0xd0, 0xcf, 0xcc, 0xcb, 0x2c, 0xc9, 0x4c, 0xcc, 0x89, 0x4f,
	0xce, 0x49, 0xcc, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x48, 0xce, 0x48, 0xcc,
	0xcc, 0x33, 0x49, 0xcd, 0x4b, 0x2d, 0x4a, 0xaf, 0xd4, 0x4b, 0x36, 0x49, 0x05, 0xf3, 0xf5, 0x10,
	0xba, 0x94, 0xd2, 0xb8, 0x78, 0x3c, 0x21, 0x1a, 0x9d, 0x41, 0xfa, 0x84, 0xe4, 0xb8, 0xb8, 0x92,
	0x13, 0x73, 0x0b, 0x12, 0x33, 0xd3, 0xf3, 0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0x90, 0x44, 0x84, 0x24, 0xb8, 0xd8, 0x53, 0xf3, 0x12, 0x93, 0x72, 0x52, 0x53, 0x24, 0x98, 0xc0,
	0x92, 0x30, 0xae, 0x90, 0x0c, 0x17, 0x67, 0x6e, 0x66, 0x71, 0x71, 0x66, 0x3e, 0x48, 0x23, 0x33,
	0x58, 0x0e, 0x21, 0xe0, 0xe4, 0x77, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51,
	0x26, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xc8, 0xce, 0xd5, 0x4f,
	0x36, 0x49, 0xd5, 0x05, 0x0b, 0xe8, 0x57, 0xe8, 0x23, 0xf9, 0xb3, 0xa4, 0xb2, 0x20, 0xb5, 0x38,
	0x89, 0x0d, 0xec, 0x41, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x58, 0xf1, 0x29, 0x02,
	0x01, 0x00, 0x00,
}

func (m *InitialClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitialClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitialClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissionId) > 0 {
		i -= len(m.MissionId)
		copy(dAtA[i:], m.MissionId)
		i = encodeVarintInitialClaim(dAtA, i, uint64(len(m.MissionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Enabled) > 0 {
		i -= len(m.Enabled)
		copy(dAtA[i:], m.Enabled)
		i = encodeVarintInitialClaim(dAtA, i, uint64(len(m.Enabled)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CampaignId) > 0 {
		i -= len(m.CampaignId)
		copy(dAtA[i:], m.CampaignId)
		i = encodeVarintInitialClaim(dAtA, i, uint64(len(m.CampaignId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInitialClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovInitialClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitialClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampaignId)
	if l > 0 {
		n += 1 + l + sovInitialClaim(uint64(l))
	}
	l = len(m.Enabled)
	if l > 0 {
		n += 1 + l + sovInitialClaim(uint64(l))
	}
	l = len(m.MissionId)
	if l > 0 {
		n += 1 + l + sovInitialClaim(uint64(l))
	}
	return n
}

func sovInitialClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInitialClaim(x uint64) (n int) {
	return sovInitialClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitialClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInitialClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitialClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitialClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInitialClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInitialClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInitialClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInitialClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInitialClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInitialClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enabled = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInitialClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInitialClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInitialClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInitialClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInitialClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInitialClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInitialClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInitialClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInitialClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInitialClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInitialClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInitialClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInitialClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInitialClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInitialClaim = fmt.Errorf("proto: unexpected end of group")
)
