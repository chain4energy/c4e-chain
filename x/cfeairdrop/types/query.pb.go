// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfeairdrop/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryUserEntryRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserEntryRequest) Reset()         { *m = QueryUserEntryRequest{} }
func (m *QueryUserEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserEntryRequest) ProtoMessage()    {}
func (*QueryUserEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{2}
}
func (m *QueryUserEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserEntryRequest.Merge(m, src)
}
func (m *QueryUserEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserEntryRequest proto.InternalMessageInfo

func (m *QueryUserEntryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserEntryResponse struct {
	UserEntry UserEntry `protobuf:"bytes,1,opt,name=user_entry,json=userEntry,proto3" json:"user_entry"`
}

func (m *QueryUserEntryResponse) Reset()         { *m = QueryUserEntryResponse{} }
func (m *QueryUserEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserEntryResponse) ProtoMessage()    {}
func (*QueryUserEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{3}
}
func (m *QueryUserEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserEntryResponse.Merge(m, src)
}
func (m *QueryUserEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserEntryResponse proto.InternalMessageInfo

func (m *QueryUserEntryResponse) GetUserEntry() UserEntry {
	if m != nil {
		return m.UserEntry
	}
	return UserEntry{}
}

type QueryCampaignTotalAmountRequest struct {
	CampaignId uint64 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
}

func (m *QueryCampaignTotalAmountRequest) Reset()         { *m = QueryCampaignTotalAmountRequest{} }
func (m *QueryCampaignTotalAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignTotalAmountRequest) ProtoMessage()    {}
func (*QueryCampaignTotalAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{4}
}
func (m *QueryCampaignTotalAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignTotalAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignTotalAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignTotalAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignTotalAmountRequest.Merge(m, src)
}
func (m *QueryCampaignTotalAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignTotalAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignTotalAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignTotalAmountRequest proto.InternalMessageInfo

func (m *QueryCampaignTotalAmountRequest) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type QueryCampaignTotalAmountResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QueryCampaignTotalAmountResponse) Reset()         { *m = QueryCampaignTotalAmountResponse{} }
func (m *QueryCampaignTotalAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignTotalAmountResponse) ProtoMessage()    {}
func (*QueryCampaignTotalAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{5}
}
func (m *QueryCampaignTotalAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignTotalAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignTotalAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignTotalAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignTotalAmountResponse.Merge(m, src)
}
func (m *QueryCampaignTotalAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignTotalAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignTotalAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignTotalAmountResponse proto.InternalMessageInfo

func (m *QueryCampaignTotalAmountResponse) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type QueryCampaignAmountLeftRequest struct {
	CampaignId uint64 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
}

func (m *QueryCampaignAmountLeftRequest) Reset()         { *m = QueryCampaignAmountLeftRequest{} }
func (m *QueryCampaignAmountLeftRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignAmountLeftRequest) ProtoMessage()    {}
func (*QueryCampaignAmountLeftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{6}
}
func (m *QueryCampaignAmountLeftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignAmountLeftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignAmountLeftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignAmountLeftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignAmountLeftRequest.Merge(m, src)
}
func (m *QueryCampaignAmountLeftRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignAmountLeftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignAmountLeftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignAmountLeftRequest proto.InternalMessageInfo

func (m *QueryCampaignAmountLeftRequest) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type QueryCampaignAmountLeftResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QueryCampaignAmountLeftResponse) Reset()         { *m = QueryCampaignAmountLeftResponse{} }
func (m *QueryCampaignAmountLeftResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignAmountLeftResponse) ProtoMessage()    {}
func (*QueryCampaignAmountLeftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{7}
}
func (m *QueryCampaignAmountLeftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignAmountLeftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignAmountLeftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignAmountLeftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignAmountLeftResponse.Merge(m, src)
}
func (m *QueryCampaignAmountLeftResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignAmountLeftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignAmountLeftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignAmountLeftResponse proto.InternalMessageInfo

func (m *QueryCampaignAmountLeftResponse) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type QueryUsersEntriesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUsersEntriesRequest) Reset()         { *m = QueryUsersEntriesRequest{} }
func (m *QueryUsersEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUsersEntriesRequest) ProtoMessage()    {}
func (*QueryUsersEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{8}
}
func (m *QueryUsersEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUsersEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUsersEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUsersEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUsersEntriesRequest.Merge(m, src)
}
func (m *QueryUsersEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUsersEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUsersEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUsersEntriesRequest proto.InternalMessageInfo

func (m *QueryUsersEntriesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUsersEntriesResponse struct {
	UsersEntries []UserEntry         `protobuf:"bytes,1,rep,name=users_entries,json=usersEntries,proto3" json:"users_entries"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUsersEntriesResponse) Reset()         { *m = QueryUsersEntriesResponse{} }
func (m *QueryUsersEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUsersEntriesResponse) ProtoMessage()    {}
func (*QueryUsersEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{9}
}
func (m *QueryUsersEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUsersEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUsersEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUsersEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUsersEntriesResponse.Merge(m, src)
}
func (m *QueryUsersEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUsersEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUsersEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUsersEntriesResponse proto.InternalMessageInfo

func (m *QueryUsersEntriesResponse) GetUsersEntries() []UserEntry {
	if m != nil {
		return m.UsersEntries
	}
	return nil
}

func (m *QueryUsersEntriesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMissionRequest struct {
	CampaignId uint64 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	MissionId  uint64 `protobuf:"varint,2,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
}

func (m *QueryMissionRequest) Reset()         { *m = QueryMissionRequest{} }
func (m *QueryMissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissionRequest) ProtoMessage()    {}
func (*QueryMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{10}
}
func (m *QueryMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionRequest.Merge(m, src)
}
func (m *QueryMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionRequest proto.InternalMessageInfo

func (m *QueryMissionRequest) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *QueryMissionRequest) GetMissionId() uint64 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

type QueryMissionResponse struct {
	Mission Mission `protobuf:"bytes,1,opt,name=mission,proto3" json:"mission"`
}

func (m *QueryMissionResponse) Reset()         { *m = QueryMissionResponse{} }
func (m *QueryMissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissionResponse) ProtoMessage()    {}
func (*QueryMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{11}
}
func (m *QueryMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionResponse.Merge(m, src)
}
func (m *QueryMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionResponse proto.InternalMessageInfo

func (m *QueryMissionResponse) GetMission() Mission {
	if m != nil {
		return m.Mission
	}
	return Mission{}
}

type QueryMissionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMissionsRequest) Reset()         { *m = QueryMissionsRequest{} }
func (m *QueryMissionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissionsRequest) ProtoMessage()    {}
func (*QueryMissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{12}
}
func (m *QueryMissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionsRequest.Merge(m, src)
}
func (m *QueryMissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionsRequest proto.InternalMessageInfo

func (m *QueryMissionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMissionsResponse struct {
	Mission    []Mission           `protobuf:"bytes,1,rep,name=mission,proto3" json:"mission"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMissionsResponse) Reset()         { *m = QueryMissionsResponse{} }
func (m *QueryMissionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissionsResponse) ProtoMessage()    {}
func (*QueryMissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{13}
}
func (m *QueryMissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionsResponse.Merge(m, src)
}
func (m *QueryMissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionsResponse proto.InternalMessageInfo

func (m *QueryMissionsResponse) GetMission() []Mission {
	if m != nil {
		return m.Mission
	}
	return nil
}

func (m *QueryMissionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCampaignsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCampaignsRequest) Reset()         { *m = QueryCampaignsRequest{} }
func (m *QueryCampaignsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignsRequest) ProtoMessage()    {}
func (*QueryCampaignsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{14}
}
func (m *QueryCampaignsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignsRequest.Merge(m, src)
}
func (m *QueryCampaignsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignsRequest proto.InternalMessageInfo

func (m *QueryCampaignsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCampaignsResponse struct {
	Campaign   []Campaign          `protobuf:"bytes,1,rep,name=campaign,proto3" json:"campaign"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCampaignsResponse) Reset()         { *m = QueryCampaignsResponse{} }
func (m *QueryCampaignsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignsResponse) ProtoMessage()    {}
func (*QueryCampaignsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{15}
}
func (m *QueryCampaignsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignsResponse.Merge(m, src)
}
func (m *QueryCampaignsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignsResponse proto.InternalMessageInfo

func (m *QueryCampaignsResponse) GetCampaign() []Campaign {
	if m != nil {
		return m.Campaign
	}
	return nil
}

func (m *QueryCampaignsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCampaignRequest struct {
	CampaignId uint64 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
}

func (m *QueryCampaignRequest) Reset()         { *m = QueryCampaignRequest{} }
func (m *QueryCampaignRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignRequest) ProtoMessage()    {}
func (*QueryCampaignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{16}
}
func (m *QueryCampaignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignRequest.Merge(m, src)
}
func (m *QueryCampaignRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignRequest proto.InternalMessageInfo

func (m *QueryCampaignRequest) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type QueryCampaignResponse struct {
	Campaign Campaign `protobuf:"bytes,1,opt,name=campaign,proto3" json:"campaign"`
}

func (m *QueryCampaignResponse) Reset()         { *m = QueryCampaignResponse{} }
func (m *QueryCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCampaignResponse) ProtoMessage()    {}
func (*QueryCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca5d23fe2dee9ad, []int{17}
}
func (m *QueryCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCampaignResponse.Merge(m, src)
}
func (m *QueryCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCampaignResponse proto.InternalMessageInfo

func (m *QueryCampaignResponse) GetCampaign() Campaign {
	if m != nil {
		return m.Campaign
	}
	return Campaign{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryParamsResponse")
	proto.RegisterType((*QueryUserEntryRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryUserEntryRequest")
	proto.RegisterType((*QueryUserEntryResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryUserEntryResponse")
	proto.RegisterType((*QueryCampaignTotalAmountRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignTotalAmountRequest")
	proto.RegisterType((*QueryCampaignTotalAmountResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignTotalAmountResponse")
	proto.RegisterType((*QueryCampaignAmountLeftRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignAmountLeftRequest")
	proto.RegisterType((*QueryCampaignAmountLeftResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignAmountLeftResponse")
	proto.RegisterType((*QueryUsersEntriesRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryUsersEntriesRequest")
	proto.RegisterType((*QueryUsersEntriesResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryUsersEntriesResponse")
	proto.RegisterType((*QueryMissionRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryMissionRequest")
	proto.RegisterType((*QueryMissionResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryMissionResponse")
	proto.RegisterType((*QueryMissionsRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryMissionsRequest")
	proto.RegisterType((*QueryMissionsResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryMissionsResponse")
	proto.RegisterType((*QueryCampaignsRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignsRequest")
	proto.RegisterType((*QueryCampaignsResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignsResponse")
	proto.RegisterType((*QueryCampaignRequest)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignRequest")
	proto.RegisterType((*QueryCampaignResponse)(nil), "chain4energy.c4echain.cfeairdrop.QueryCampaignResponse")
}

func init() { proto.RegisterFile("c4echain/cfeairdrop/query.proto", fileDescriptor_eca5d23fe2dee9ad) }

var fileDescriptor_eca5d23fe2dee9ad = []byte{
	// 1032 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x6d, 0x49, 0xea, 0x97, 0xf6, 0x32, 0x0d, 0x28, 0x35, 0xed, 0xda, 0x2c, 0x55,
	0x48, 0x13, 0x65, 0x97, 0xa4, 0xa6, 0x0e, 0x45, 0x82, 0xda, 0x15, 0x45, 0x91, 0x0a, 0x0a, 0x16,
	0xe5, 0x80, 0x04, 0xd6, 0x78, 0x3d, 0xd9, 0x2e, 0xd8, 0x3b, 0xee, 0xce, 0x1a, 0x11, 0x45, 0xb9,
	0x70, 0x00, 0x71, 0x43, 0xe2, 0xc6, 0x15, 0x89, 0x03, 0x1c, 0x00, 0x71, 0x42, 0xe2, 0x0f, 0xe8,
	0xb1, 0x12, 0x17, 0xb8, 0x14, 0x94, 0xf0, 0x87, 0xa0, 0x9d, 0x7d, 0x63, 0xef, 0xda, 0x9b, 0xd8,
	0xdb, 0x44, 0x9c, 0x12, 0xcf, 0xbe, 0x1f, 0x9f, 0xef, 0x9b, 0xb7, 0x6f, 0x66, 0xa1, 0xe4, 0x54,
	0xb8, 0xf3, 0x80, 0x79, 0xbe, 0xed, 0xec, 0x70, 0xe6, 0x05, 0xed, 0x40, 0xf4, 0xec, 0x87, 0x7d,
	0x1e, 0xec, 0x5a, 0xbd, 0x40, 0x84, 0x82, 0x96, 0xd5, 0xd3, 0x0a, 0xf7, 0x79, 0xe0, 0xee, 0x5a,
	0xda, 0xda, 0x1a, 0x5a, 0x17, 0x17, 0x5c, 0xe1, 0x0a, 0x65, 0x6c, 0x47, 0xff, 0xc5, 0x7e, 0xc5,
	0x2b, 0xae, 0x10, 0x6e, 0x87, 0xdb, 0xac, 0xe7, 0xd9, 0xcc, 0xf7, 0x45, 0xc8, 0x42, 0x4f, 0xf8,
	0x12, 0x9f, 0xae, 0x38, 0x42, 0x76, 0x85, 0xb4, 0x5b, 0x4c, 0xf2, 0x38, 0x9d, 0xfd, 0xe9, 0x7a,
	0x8b, 0x87, 0x6c, 0xdd, 0xee, 0x31, 0xd7, 0xf3, 0x95, 0x31, 0xda, 0x1a, 0x49, 0x5b, 0x6d, 0xe5,
	0x08, 0x4f, 0x3f, 0x2f, 0x67, 0x49, 0xe8, 0xb1, 0x80, 0x75, 0x75, 0x36, 0x33, 0xcb, 0xc2, 0x61,
	0xdd, 0x1e, 0xf3, 0x5c, 0x1d, 0xe5, 0x85, 0x2c, 0x9b, 0xae, 0x27, 0xe5, 0x10, 0x64, 0x29, 0x33,
	0x4c, 0x87, 0x79, 0xdd, 0x66, 0xc0, 0x1d, 0x11, 0xb4, 0x63, 0x3b, 0x73, 0x01, 0xe8, 0xbb, 0x91,
	0xa4, 0x6d, 0xc5, 0xd0, 0xe0, 0x0f, 0xfb, 0x5c, 0x86, 0xe6, 0x87, 0x70, 0x29, 0xb5, 0x2a, 0x7b,
	0xc2, 0x97, 0x9c, 0xde, 0x85, 0xd9, 0x98, 0x75, 0x91, 0x94, 0xc9, 0xf2, 0xfc, 0xc6, 0xb2, 0x35,
	0xa9, 0xe0, 0x56, 0x1c, 0xa1, 0x7e, 0xee, 0xd1, 0x93, 0xd2, 0x4c, 0x03, 0xbd, 0xcd, 0x75, 0x78,
	0x56, 0x85, 0xbf, 0x2f, 0x79, 0xf0, 0xa6, 0x1f, 0x06, 0xbb, 0x98, 0x97, 0x2e, 0xc2, 0x1c, 0x6b,
	0xb7, 0x03, 0x2e, 0xe3, 0x0c, 0x85, 0x86, 0xfe, 0x69, 0x7e, 0x0c, 0xcf, 0x8d, 0xba, 0x20, 0xd4,
	0x36, 0x40, 0x5f, 0xf2, 0xa0, 0xc9, 0xa3, 0x55, 0x04, 0x5b, 0x9d, 0x0c, 0x36, 0x08, 0x84, 0x6c,
	0x85, 0xbe, 0x5e, 0x30, 0xeb, 0x50, 0x52, 0xb9, 0xee, 0x60, 0xd5, 0xdf, 0x13, 0x21, 0xeb, 0xd4,
	0xba, 0xa2, 0xef, 0x87, 0x1a, 0xb4, 0x04, 0xf3, 0x7a, 0x4f, 0x9a, 0x5e, 0x5b, 0x65, 0x3d, 0xd7,
	0x00, 0xbd, 0xb4, 0xd5, 0x36, 0xbf, 0x24, 0x50, 0x3e, 0x3a, 0x08, 0xa2, 0x3b, 0x30, 0xcb, 0xd4,
	0xca, 0x22, 0x29, 0x9f, 0x5d, 0x9e, 0xdf, 0xb8, 0x6c, 0xc5, 0xed, 0x63, 0x45, 0xed, 0x63, 0x61,
	0xfb, 0x58, 0x77, 0x84, 0xe7, 0xd7, 0x5f, 0x8e, 0x20, 0x7f, 0xf8, 0xbb, 0xb4, 0xec, 0x7a, 0xe1,
	0x83, 0x7e, 0xcb, 0x72, 0x44, 0xd7, 0xc6, 0x5e, 0x8b, 0xff, 0xac, 0xc9, 0xf6, 0x27, 0x76, 0xb8,
	0xdb, 0xe3, 0x52, 0x39, 0xc8, 0x06, 0x86, 0x36, 0x6b, 0x60, 0xa4, 0x40, 0x62, 0x86, 0x7b, 0x7c,
	0x67, 0x7a, 0x31, 0x5f, 0x90, 0x91, 0x8a, 0x24, 0x63, 0xfc, 0x9f, 0x5a, 0x5a, 0xb0, 0x38, 0xe8,
	0x02, 0x19, 0x6d, 0x96, 0xc7, 0x75, 0xcf, 0xd2, 0xbb, 0x00, 0xc3, 0xd7, 0x11, 0xfb, 0x60, 0x29,
	0x05, 0x11, 0x8f, 0x0a, 0x8d, 0xb2, 0xcd, 0x5c, 0x8e, 0xbe, 0x8d, 0x84, 0xa7, 0xf9, 0x3b, 0x81,
	0xcb, 0x19, 0x49, 0x50, 0xe6, 0xfb, 0x70, 0x31, 0x6a, 0x14, 0xa9, 0xda, 0xcd, 0xe3, 0x12, 0xd5,
	0x3e, 0x45, 0xc3, 0x5d, 0xe8, 0x27, 0xe2, 0xd3, 0xb7, 0x52, 0xf4, 0x67, 0x14, 0xfd, 0x4b, 0x13,
	0xe9, 0x63, 0xa8, 0x14, 0xfe, 0x7d, 0x7c, 0x75, 0xdf, 0x8e, 0xc7, 0xc1, 0xb4, 0x7b, 0x4c, 0xaf,
	0x02, 0xe0, 0x04, 0x89, 0x9e, 0x9f, 0x51, 0xcf, 0x0b, 0xb8, 0xb2, 0xd5, 0x36, 0x19, 0x2c, 0xa4,
	0xc3, 0x62, 0x3d, 0xb6, 0x60, 0x0e, 0x8d, 0xb0, 0xe4, 0xd7, 0x27, 0x57, 0x02, 0x63, 0x60, 0x1d,
	0xb4, 0xbf, 0xf9, 0x51, 0x3a, 0xc5, 0xa9, 0x6f, 0xec, 0x8f, 0x04, 0xc7, 0xce, 0x30, 0x41, 0x96,
	0x88, 0xb3, 0x27, 0x11, 0x71, 0x7a, 0xfb, 0xd8, 0x44, 0x58, 0xfd, 0xca, 0x9d, 0x7a, 0x39, 0x7e,
	0x22, 0x38, 0x52, 0x13, 0x19, 0xb0, 0x1e, 0xf7, 0xe0, 0xbc, 0xee, 0x0c, 0x2c, 0xc8, 0xca, 0xe4,
	0x82, 0xe8, 0x30, 0x58, 0x91, 0x41, 0x84, 0xd3, 0x2b, 0x49, 0x15, 0x1b, 0x44, 0x67, 0x9a, 0x7a,
	0x7e, 0xf1, 0x91, 0x5a, 0x1e, 0x21, 0x94, 0x9c, 0x4c, 0xe8, 0xc6, 0x57, 0x17, 0xe1, 0x19, 0x95,
	0x87, 0x7e, 0x4b, 0x60, 0x36, 0x3e, 0xf9, 0x68, 0x65, 0x72, 0xc0, 0xf1, 0x03, 0xb8, 0xf8, 0x4a,
	0x4e, 0xaf, 0x58, 0x8f, 0xf9, 0xe2, 0xe7, 0x7f, 0xfc, 0xfb, 0xcd, 0x99, 0xab, 0xf4, 0x79, 0xdb,
	0xa9, 0x70, 0x5b, 0x1f, 0xfb, 0xc3, 0xdb, 0x8a, 0x22, 0xfa, 0x85, 0x40, 0x61, 0x30, 0x8c, 0x68,
	0x75, 0xca, 0x4c, 0xa3, 0x67, 0x75, 0x71, 0x33, 0xbf, 0x23, 0x52, 0xae, 0x2b, 0xca, 0x55, 0x7a,
	0x3d, 0x93, 0x72, 0x78, 0x98, 0xdb, 0x7b, 0x78, 0xfa, 0xef, 0xd3, 0x5f, 0x09, 0x5c, 0x48, 0xce,
	0x63, 0x7a, 0x2b, 0x47, 0xf6, 0x91, 0x93, 0xa2, 0xf8, 0xda, 0x53, 0xf9, 0x22, 0xfc, 0x8a, 0x82,
	0xbf, 0x46, 0xcd, 0x23, 0xe1, 0x07, 0x67, 0x03, 0xfd, 0x8d, 0xc0, 0x1c, 0xce, 0x09, 0x3a, 0xed,
	0x8e, 0xa6, 0xe7, 0x76, 0xf1, 0x66, 0x5e, 0x37, 0xc4, 0x7c, 0x43, 0x61, 0xbe, 0x4a, 0xab, 0x99,
	0x98, 0x38, 0xad, 0xec, 0xbd, 0xc4, 0x7b, 0xb3, 0x6f, 0xef, 0x0d, 0x0f, 0x80, 0x7d, 0xfa, 0x1d,
	0x01, 0xc0, 0xa0, 0xb5, 0x4e, 0x87, 0xe6, 0xe4, 0x18, 0xd4, 0xba, 0x9a, 0xdb, 0x0f, 0x05, 0x5c,
	0x53, 0x02, 0x0c, 0x7a, 0xe5, 0x38, 0x01, 0xf4, 0x7b, 0x02, 0x85, 0xc1, 0xfc, 0x9a, 0xba, 0x97,
	0x47, 0x67, 0xea, 0xd4, 0xbd, 0x3c, 0x36, 0x2a, 0xcd, 0x25, 0x85, 0x59, 0xa6, 0x46, 0x26, 0xa6,
	0x33, 0x40, 0xfb, 0x99, 0xc0, 0x79, 0xed, 0x3d, 0x75, 0x31, 0x47, 0x06, 0x5d, 0xb1, 0x9a, 0xdb,
	0x0f, 0x29, 0x6f, 0x28, 0xca, 0x35, 0xba, 0x7a, 0x2c, 0x65, 0xba, 0x1d, 0xe8, 0x13, 0x02, 0x97,
	0x32, 0x6e, 0xaf, 0xb4, 0x96, 0x93, 0x62, 0xfc, 0xfa, 0x5c, 0xac, 0x9f, 0x24, 0x04, 0x6a, 0xba,
	0xad, 0x34, 0xdd, 0xa2, 0x9b, 0x99, 0x9a, 0xf0, 0x77, 0xb3, 0xed, 0xc9, 0x30, 0xf0, 0x5a, 0x7d,
	0xf5, 0x41, 0x37, 0x22, 0xf0, 0x2f, 0x02, 0x74, 0xfc, 0x46, 0x4b, 0x6f, 0xe7, 0x84, 0x1b, 0xbb,
	0x50, 0x17, 0x6b, 0x27, 0x88, 0x80, 0xea, 0x5e, 0x57, 0xea, 0x36, 0xe9, 0xcd, 0x63, 0xd5, 0xa9,
	0x0f, 0x3a, 0xd9, 0xec, 0xf0, 0x9d, 0x30, 0xad, 0xad, 0xfe, 0xce, 0xa3, 0x03, 0x83, 0x3c, 0x3e,
	0x30, 0xc8, 0x3f, 0x07, 0x06, 0xf9, 0xfa, 0xd0, 0x98, 0x79, 0x7c, 0x68, 0xcc, 0xfc, 0x79, 0x68,
	0xcc, 0x7c, 0x50, 0x49, 0xde, 0xba, 0x13, 0x98, 0x51, 0xa2, 0xb5, 0xf8, 0x93, 0xf1, 0xb3, 0xe4,
	0x47, 0xa3, 0xba, 0x87, 0xb7, 0x66, 0xd5, 0xe7, 0xe2, 0x8d, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xdf, 0x58, 0xde, 0x08, 0x84, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a UserEntry by index.
	UserEntry(ctx context.Context, in *QueryUserEntryRequest, opts ...grpc.CallOption) (*QueryUserEntryResponse, error)
	// Queries a list of UserEntry items.
	UsersEntries(ctx context.Context, in *QueryUsersEntriesRequest, opts ...grpc.CallOption) (*QueryUsersEntriesResponse, error)
	// Queries a Mission by index.
	Mission(ctx context.Context, in *QueryMissionRequest, opts ...grpc.CallOption) (*QueryMissionResponse, error)
	// Queries a list of Mission items.
	MissionAll(ctx context.Context, in *QueryMissionsRequest, opts ...grpc.CallOption) (*QueryMissionsResponse, error)
	// Queries a list of Campaigns items.
	Campaigns(ctx context.Context, in *QueryCampaignsRequest, opts ...grpc.CallOption) (*QueryCampaignsResponse, error)
	// Queries a list of Campaigns items.
	Campaign(ctx context.Context, in *QueryCampaignRequest, opts ...grpc.CallOption) (*QueryCampaignResponse, error)
	// Queries a CampaignTotalAmount by campaignId.
	CampaignTotalAmount(ctx context.Context, in *QueryCampaignTotalAmountRequest, opts ...grpc.CallOption) (*QueryCampaignTotalAmountResponse, error)
	// Queries a CampaignTotalAmount by campaignId.
	CampaignAmountLeft(ctx context.Context, in *QueryCampaignAmountLeftRequest, opts ...grpc.CallOption) (*QueryCampaignAmountLeftResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserEntry(ctx context.Context, in *QueryUserEntryRequest, opts ...grpc.CallOption) (*QueryUserEntryResponse, error) {
	out := new(QueryUserEntryResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/UserEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UsersEntries(ctx context.Context, in *QueryUsersEntriesRequest, opts ...grpc.CallOption) (*QueryUsersEntriesResponse, error) {
	out := new(QueryUsersEntriesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/UsersEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mission(ctx context.Context, in *QueryMissionRequest, opts ...grpc.CallOption) (*QueryMissionResponse, error) {
	out := new(QueryMissionResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/Mission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MissionAll(ctx context.Context, in *QueryMissionsRequest, opts ...grpc.CallOption) (*QueryMissionsResponse, error) {
	out := new(QueryMissionsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/MissionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Campaigns(ctx context.Context, in *QueryCampaignsRequest, opts ...grpc.CallOption) (*QueryCampaignsResponse, error) {
	out := new(QueryCampaignsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/Campaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Campaign(ctx context.Context, in *QueryCampaignRequest, opts ...grpc.CallOption) (*QueryCampaignResponse, error) {
	out := new(QueryCampaignResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/Campaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CampaignTotalAmount(ctx context.Context, in *QueryCampaignTotalAmountRequest, opts ...grpc.CallOption) (*QueryCampaignTotalAmountResponse, error) {
	out := new(QueryCampaignTotalAmountResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/CampaignTotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CampaignAmountLeft(ctx context.Context, in *QueryCampaignAmountLeftRequest, opts ...grpc.CallOption) (*QueryCampaignAmountLeftResponse, error) {
	out := new(QueryCampaignAmountLeftResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeairdrop.Query/CampaignAmountLeft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a UserEntry by index.
	UserEntry(context.Context, *QueryUserEntryRequest) (*QueryUserEntryResponse, error)
	// Queries a list of UserEntry items.
	UsersEntries(context.Context, *QueryUsersEntriesRequest) (*QueryUsersEntriesResponse, error)
	// Queries a Mission by index.
	Mission(context.Context, *QueryMissionRequest) (*QueryMissionResponse, error)
	// Queries a list of Mission items.
	MissionAll(context.Context, *QueryMissionsRequest) (*QueryMissionsResponse, error)
	// Queries a list of Campaigns items.
	Campaigns(context.Context, *QueryCampaignsRequest) (*QueryCampaignsResponse, error)
	// Queries a list of Campaigns items.
	Campaign(context.Context, *QueryCampaignRequest) (*QueryCampaignResponse, error)
	// Queries a CampaignTotalAmount by campaignId.
	CampaignTotalAmount(context.Context, *QueryCampaignTotalAmountRequest) (*QueryCampaignTotalAmountResponse, error)
	// Queries a CampaignTotalAmount by campaignId.
	CampaignAmountLeft(context.Context, *QueryCampaignAmountLeftRequest) (*QueryCampaignAmountLeftResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UserEntry(ctx context.Context, req *QueryUserEntryRequest) (*QueryUserEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEntry not implemented")
}
func (*UnimplementedQueryServer) UsersEntries(ctx context.Context, req *QueryUsersEntriesRequest) (*QueryUsersEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersEntries not implemented")
}
func (*UnimplementedQueryServer) Mission(ctx context.Context, req *QueryMissionRequest) (*QueryMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mission not implemented")
}
func (*UnimplementedQueryServer) MissionAll(ctx context.Context, req *QueryMissionsRequest) (*QueryMissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionAll not implemented")
}
func (*UnimplementedQueryServer) Campaigns(ctx context.Context, req *QueryCampaignsRequest) (*QueryCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaigns not implemented")
}
func (*UnimplementedQueryServer) Campaign(ctx context.Context, req *QueryCampaignRequest) (*QueryCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaign not implemented")
}
func (*UnimplementedQueryServer) CampaignTotalAmount(ctx context.Context, req *QueryCampaignTotalAmountRequest) (*QueryCampaignTotalAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignTotalAmount not implemented")
}
func (*UnimplementedQueryServer) CampaignAmountLeft(ctx context.Context, req *QueryCampaignAmountLeftRequest) (*QueryCampaignAmountLeftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignAmountLeft not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/UserEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserEntry(ctx, req.(*QueryUserEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UsersEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsersEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UsersEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/UsersEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UsersEntries(ctx, req.(*QueryUsersEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/Mission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mission(ctx, req.(*QueryMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/MissionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MissionAll(ctx, req.(*QueryMissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Campaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Campaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/Campaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Campaigns(ctx, req.(*QueryCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Campaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Campaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/Campaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Campaign(ctx, req.(*QueryCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CampaignTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCampaignTotalAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CampaignTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/CampaignTotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CampaignTotalAmount(ctx, req.(*QueryCampaignTotalAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CampaignAmountLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCampaignAmountLeftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CampaignAmountLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeairdrop.Query/CampaignAmountLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CampaignAmountLeft(ctx, req.(*QueryCampaignAmountLeftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfeairdrop.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserEntry",
			Handler:    _Query_UserEntry_Handler,
		},
		{
			MethodName: "UsersEntries",
			Handler:    _Query_UsersEntries_Handler,
		},
		{
			MethodName: "Mission",
			Handler:    _Query_Mission_Handler,
		},
		{
			MethodName: "MissionAll",
			Handler:    _Query_MissionAll_Handler,
		},
		{
			MethodName: "Campaigns",
			Handler:    _Query_Campaigns_Handler,
		},
		{
			MethodName: "Campaign",
			Handler:    _Query_Campaign_Handler,
		},
		{
			MethodName: "CampaignTotalAmount",
			Handler:    _Query_CampaignTotalAmount_Handler,
		},
		{
			MethodName: "CampaignAmountLeft",
			Handler:    _Query_CampaignAmountLeft_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfeairdrop/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserEntry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCampaignTotalAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignTotalAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignTotalAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CampaignId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignTotalAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignTotalAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignTotalAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignAmountLeftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignAmountLeftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignAmountLeftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CampaignId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignAmountLeftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignAmountLeftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignAmountLeftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUsersEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUsersEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUsersEntriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUsersEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUsersEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUsersEntriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UsersEntries) > 0 {
		for iNdEx := len(m.UsersEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.CampaignId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mission) > 0 {
		for iNdEx := len(m.Mission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Campaign) > 0 {
		for iNdEx := len(m.Campaign) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Campaign[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CampaignId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Campaign.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserEntry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCampaignTotalAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovQuery(uint64(m.CampaignId))
	}
	return n
}

func (m *QueryCampaignTotalAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCampaignAmountLeftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovQuery(uint64(m.CampaignId))
	}
	return n
}

func (m *QueryCampaignAmountLeftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUsersEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUsersEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UsersEntries) > 0 {
		for _, e := range m.UsersEntries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovQuery(uint64(m.CampaignId))
	}
	if m.MissionId != 0 {
		n += 1 + sovQuery(uint64(m.MissionId))
	}
	return n
}

func (m *QueryMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Mission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mission) > 0 {
		for _, e := range m.Mission {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCampaignsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCampaignsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Campaign) > 0 {
		for _, e := range m.Campaign {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCampaignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovQuery(uint64(m.CampaignId))
	}
	return n
}

func (m *QueryCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Campaign.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignTotalAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignTotalAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignTotalAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignTotalAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignTotalAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignTotalAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignAmountLeftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignAmountLeftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignAmountLeftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignAmountLeftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignAmountLeftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignAmountLeftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUsersEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUsersEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUsersEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUsersEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUsersEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUsersEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersEntries = append(m.UsersEntries, UserEntry{})
			if err := m.UsersEntries[len(m.UsersEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mission = append(m.Mission, Mission{})
			if err := m.Mission[len(m.Mission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Campaign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Campaign = append(m.Campaign, Campaign{})
			if err := m.Campaign[len(m.Campaign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Campaign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Campaign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
