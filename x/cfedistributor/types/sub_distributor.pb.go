// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfedistributor/sub_distributor.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type State struct {
	Account *Account                                    `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Burn    bool                                        `protobuf:"varint,2,opt,name=burn,proto3" json:"burn,omitempty"`
	Remains github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=remains,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"remains" yaml:"remains"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d6c94be2e65da, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *State) GetBurn() bool {
	if m != nil {
		return m.Burn
	}
	return false
}

func (m *State) GetRemains() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Remains
	}
	return nil
}

type SubDistributor struct {
	Name         string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sources      []*Account   `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations Destinations `protobuf:"bytes,3,opt,name=destinations,proto3" json:"destinations"`
}

func (m *SubDistributor) Reset()         { *m = SubDistributor{} }
func (m *SubDistributor) String() string { return proto.CompactTextString(m) }
func (*SubDistributor) ProtoMessage()    {}
func (*SubDistributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d6c94be2e65da, []int{1}
}
func (m *SubDistributor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubDistributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubDistributor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubDistributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubDistributor.Merge(m, src)
}
func (m *SubDistributor) XXX_Size() int {
	return m.Size()
}
func (m *SubDistributor) XXX_DiscardUnknown() {
	xxx_messageInfo_SubDistributor.DiscardUnknown(m)
}

var xxx_messageInfo_SubDistributor proto.InternalMessageInfo

func (m *SubDistributor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubDistributor) GetSources() []*Account {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *SubDistributor) GetDestinations() Destinations {
	if m != nil {
		return m.Destinations
	}
	return Destinations{}
}

type Destinations struct {
	PrimaryShare Account                                `protobuf:"bytes,1,opt,name=primary_share,json=primaryShare,proto3" json:"primary_share"`
	BurnShare    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=burn_share,json=burnShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_share" yaml:"burn_share"`
	Shares       []*DestinationShare                    `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (m *Destinations) Reset()         { *m = Destinations{} }
func (m *Destinations) String() string { return proto.CompactTextString(m) }
func (*Destinations) ProtoMessage()    {}
func (*Destinations) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d6c94be2e65da, []int{2}
}
func (m *Destinations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Destinations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Destinations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Destinations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Destinations.Merge(m, src)
}
func (m *Destinations) XXX_Size() int {
	return m.Size()
}
func (m *Destinations) XXX_DiscardUnknown() {
	xxx_messageInfo_Destinations.DiscardUnknown(m)
}

var xxx_messageInfo_Destinations proto.InternalMessageInfo

func (m *Destinations) GetPrimaryShare() Account {
	if m != nil {
		return m.PrimaryShare
	}
	return Account{}
}

func (m *Destinations) GetShares() []*DestinationShare {
	if m != nil {
		return m.Shares
	}
	return nil
}

type DestinationShare struct {
	Name        string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Share       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=share,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"share" yaml:"share"`
	Destination Account                                `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination"`
}

func (m *DestinationShare) Reset()         { *m = DestinationShare{} }
func (m *DestinationShare) String() string { return proto.CompactTextString(m) }
func (*DestinationShare) ProtoMessage()    {}
func (*DestinationShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d6c94be2e65da, []int{3}
}
func (m *DestinationShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestinationShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestinationShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DestinationShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationShare.Merge(m, src)
}
func (m *DestinationShare) XXX_Size() int {
	return m.Size()
}
func (m *DestinationShare) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationShare.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationShare proto.InternalMessageInfo

func (m *DestinationShare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DestinationShare) GetDestination() Account {
	if m != nil {
		return m.Destination
	}
	return Account{}
}

type Account struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d6c94be2e65da, []int{4}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*State)(nil), "c4echain.cfedistributor.State")
	proto.RegisterType((*SubDistributor)(nil), "c4echain.cfedistributor.SubDistributor")
	proto.RegisterType((*Destinations)(nil), "c4echain.cfedistributor.Destinations")
	proto.RegisterType((*DestinationShare)(nil), "c4echain.cfedistributor.DestinationShare")
	proto.RegisterType((*Account)(nil), "c4echain.cfedistributor.Account")
}

func init() {
	proto.RegisterFile("c4echain/cfedistributor/sub_distributor.proto", fileDescriptor_a57d6c94be2e65da)
}

var fileDescriptor_a57d6c94be2e65da = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x1c, 0x4d, 0xba, 0x7f, 0x6a, 0xa7, 0xb5, 0xe8, 0x20, 0x58, 0x16, 0x49, 0x4a, 0x40, 0xa9, 0x48,
	0x13, 0x76, 0xed, 0x41, 0xf6, 0x20, 0xda, 0xad, 0x28, 0x78, 0x10, 0x52, 0x4f, 0x5e, 0x96, 0xc9,
	0x74, 0x6c, 0x07, 0x4d, 0xa6, 0xcc, 0x4c, 0xc4, 0x1e, 0xbc, 0x7b, 0xf4, 0x73, 0x78, 0xf3, 0x4b,
	0x48, 0x8f, 0x7b, 0x14, 0x91, 0x28, 0xed, 0x37, 0xd8, 0x4f, 0x20, 0xf3, 0x27, 0x6c, 0x76, 0x71,
	0xb1, 0x7b, 0xca, 0x6f, 0x32, 0xef, 0xfd, 0xe6, 0xbd, 0xdf, 0x4b, 0x06, 0xf4, 0xf1, 0x80, 0xe0,
	0x19, 0xa2, 0x59, 0x84, 0xdf, 0x92, 0x09, 0x15, 0x92, 0xd3, 0x24, 0x97, 0x8c, 0x47, 0x22, 0x4f,
	0x8e, 0x2b, 0xeb, 0x70, 0xce, 0x99, 0x64, 0xf0, 0x76, 0x09, 0x0f, 0xcf, 0xc3, 0xf7, 0x6e, 0x4d,
	0xd9, 0x94, 0x69, 0x4c, 0xa4, 0x2a, 0x03, 0xdf, 0xf3, 0x30, 0x13, 0x29, 0x13, 0x51, 0x82, 0x04,
	0x89, 0x3e, 0xec, 0x27, 0x44, 0xa2, 0xfd, 0x08, 0x33, 0x9a, 0x99, 0xfd, 0xe0, 0x97, 0x0b, 0x76,
	0xc6, 0x12, 0x49, 0x02, 0x9f, 0x80, 0x3a, 0xc2, 0x98, 0xe5, 0x99, 0xec, 0xb8, 0x5d, 0xb7, 0xd7,
	0x3c, 0xe8, 0x86, 0x97, 0x1c, 0x15, 0x3e, 0x35, 0xb8, 0xe1, 0xf6, 0xb2, 0xf0, 0xdd, 0xb8, 0xa4,
	0x41, 0x08, 0xb6, 0x93, 0x9c, 0x67, 0x9d, 0x5a, 0xd7, 0xed, 0x5d, 0x8b, 0x75, 0x0d, 0x3f, 0x81,
	0x3a, 0x27, 0x29, 0xa2, 0x99, 0xe8, 0x6c, 0x75, 0xb7, 0x7a, 0xcd, 0x83, 0x3b, 0xa1, 0x51, 0x14,
	0x2a, 0x45, 0xa1, 0x55, 0x14, 0x8e, 0x08, 0x3e, 0x62, 0x34, 0x1b, 0x3e, 0x5b, 0x16, 0xbe, 0x73,
	0x5a, 0xf8, 0xed, 0x05, 0x4a, 0xdf, 0x1f, 0x06, 0x96, 0x1a, 0x7c, 0xfd, 0xed, 0x3f, 0x98, 0x52,
	0x39, 0xcb, 0x93, 0x10, 0xb3, 0x34, 0xb2, 0x9e, 0xcc, 0xa3, 0x2f, 0x26, 0xef, 0x22, 0xb9, 0x98,
	0x13, 0x51, 0x76, 0x11, 0x71, 0x79, 0x66, 0xf0, 0xcd, 0x05, 0xed, 0x71, 0x9e, 0x8c, 0xce, 0xc4,
	0x2b, 0x95, 0x19, 0x4a, 0x89, 0x36, 0xd9, 0x88, 0x75, 0x0d, 0x0f, 0x41, 0x5d, 0xb0, 0x9c, 0x63,
	0x22, 0x3a, 0x35, 0xad, 0xf2, 0xbf, 0xde, 0xe3, 0x92, 0x00, 0x5f, 0x81, 0xd6, 0x84, 0x08, 0x49,
	0x33, 0x24, 0x29, 0xd3, 0x36, 0xd5, 0xf0, 0xee, 0x5e, 0xda, 0x60, 0x54, 0x01, 0xeb, 0x09, 0x3a,
	0xf1, 0xb9, 0x06, 0xc1, 0xe7, 0x1a, 0x68, 0x55, 0x41, 0xf0, 0x25, 0xb8, 0x3e, 0xe7, 0x34, 0x45,
	0x7c, 0x71, 0x2c, 0x66, 0x88, 0x93, 0x2b, 0xe5, 0xe3, 0xc4, 0x2d, 0x4b, 0x1e, 0x2b, 0x2e, 0x4c,
	0x00, 0x50, 0xc1, 0xd8, 0x4e, 0x2a, 0xaa, 0xc6, 0xf0, 0x48, 0xe1, 0x7e, 0x16, 0xfe, 0xbd, 0xcd,
	0x66, 0x7c, 0x5a, 0xf8, 0x37, 0x4d, 0x3e, 0x67, 0x9d, 0x82, 0xb8, 0xa1, 0x16, 0xe6, 0x8c, 0xe7,
	0x60, 0x57, 0xbf, 0x2c, 0x33, 0xbf, 0xbf, 0xc9, 0x30, 0x34, 0xd5, 0x7e, 0x52, 0x96, 0x1e, 0x7c,
	0x77, 0xc1, 0x8d, 0x8b, 0x90, 0x7f, 0x06, 0xf8, 0x1a, 0xec, 0x54, 0x0d, 0x3d, 0xbe, 0xb2, 0xa1,
	0x96, 0x31, 0x64, 0xbd, 0x98, 0x66, 0xf0, 0x05, 0x68, 0x56, 0x92, 0xb1, 0xc9, 0x6e, 0x3a, 0xf6,
	0x2a, 0x35, 0xe8, 0x83, 0xba, 0xdd, 0x85, 0x6d, 0x50, 0xa3, 0x13, 0x2b, 0xbe, 0x46, 0x27, 0xca,
	0x8e, 0x12, 0x62, 0x94, 0xc7, 0xba, 0x1e, 0xc6, 0xcb, 0x95, 0xe7, 0x9e, 0xac, 0x3c, 0xf7, 0xcf,
	0xca, 0x73, 0xbf, 0xac, 0x3d, 0xe7, 0x64, 0xed, 0x39, 0x3f, 0xd6, 0x9e, 0xf3, 0xe6, 0x51, 0xd5,
	0x91, 0x12, 0x31, 0x20, 0x19, 0xe1, 0xd3, 0x45, 0x84, 0x07, 0xa4, 0x6f, 0xae, 0x91, 0x8f, 0x17,
	0x2f, 0x12, 0xed, 0x33, 0xd9, 0xd5, 0x3f, 0xfc, 0xc3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x52,
	0x37, 0xb0, 0x23, 0x70, 0x04, 0x00, 0x00,
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remains) > 0 {
		for iNdEx := len(m.Remains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Remains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubDistributor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Burn {
		i--
		if m.Burn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubDistributor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubDistributor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubDistributor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubDistributor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Destinations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubDistributor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Sources) > 0 {
		for iNdEx := len(m.Sources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubDistributor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Destinations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Destinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Destinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubDistributor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.BurnShare.Size()
		i -= size
		if _, err := m.BurnShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubDistributor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.PrimaryShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubDistributor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DestinationShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestinationShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DestinationShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSubDistributor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubDistributor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubDistributor(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubDistributor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	if m.Burn {
		n += 2
	}
	if len(m.Remains) > 0 {
		for _, e := range m.Remains {
			l = e.Size()
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	return n
}

func (m *SubDistributor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	if len(m.Sources) > 0 {
		for _, e := range m.Sources {
			l = e.Size()
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	l = m.Destinations.Size()
	n += 1 + l + sovSubDistributor(uint64(l))
	return n
}

func (m *Destinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimaryShare.Size()
	n += 1 + l + sovSubDistributor(uint64(l))
	l = m.BurnShare.Size()
	n += 1 + l + sovSubDistributor(uint64(l))
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	return n
}

func (m *DestinationShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovSubDistributor(uint64(l))
	l = m.Destination.Size()
	n += 1 + l + sovSubDistributor(uint64(l))
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	return n
}

func sovSubDistributor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubDistributor(x uint64) (n int) {
	return sovSubDistributor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Burn = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remains = append(m.Remains, types.DecCoin{})
			if err := m.Remains[len(m.Remains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubDistributor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubDistributor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubDistributor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, &Account{})
			if err := m.Sources[len(m.Sources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destinations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Destinations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Destinations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Destinations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimaryShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, &DestinationShare{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestinationShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestinationShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestinationShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubDistributor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubDistributor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubDistributor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubDistributor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubDistributor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubDistributor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubDistributor = fmt.Errorf("proto: unexpected end of group")
)
