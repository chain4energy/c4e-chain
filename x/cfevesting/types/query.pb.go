// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfevesting/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryVestingTypeRequest struct {
}

func (m *QueryVestingTypeRequest) Reset()         { *m = QueryVestingTypeRequest{} }
func (m *QueryVestingTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVestingTypeRequest) ProtoMessage()    {}
func (*QueryVestingTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{2}
}
func (m *QueryVestingTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingTypeRequest.Merge(m, src)
}
func (m *QueryVestingTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingTypeRequest proto.InternalMessageInfo

type QueryVestingTypeResponse struct {
	VestingTypes []GenesisVestingType `protobuf:"bytes,2,rep,name=vesting_types,json=vestingTypes,proto3" json:"vesting_types" yaml:"vesting_types"`
}

func (m *QueryVestingTypeResponse) Reset()         { *m = QueryVestingTypeResponse{} }
func (m *QueryVestingTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVestingTypeResponse) ProtoMessage()    {}
func (*QueryVestingTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{3}
}
func (m *QueryVestingTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingTypeResponse.Merge(m, src)
}
func (m *QueryVestingTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingTypeResponse proto.InternalMessageInfo

func (m *QueryVestingTypeResponse) GetVestingTypes() []GenesisVestingType {
	if m != nil {
		return m.VestingTypes
	}
	return nil
}

type QueryVestingPoolsRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryVestingPoolsRequest) Reset()         { *m = QueryVestingPoolsRequest{} }
func (m *QueryVestingPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVestingPoolsRequest) ProtoMessage()    {}
func (*QueryVestingPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{4}
}
func (m *QueryVestingPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingPoolsRequest.Merge(m, src)
}
func (m *QueryVestingPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingPoolsRequest proto.InternalMessageInfo

func (m *QueryVestingPoolsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryVestingPoolsResponse struct {
	VestingPools []*VestingPoolInfo `protobuf:"bytes,2,rep,name=vesting_pools,json=vestingPools,proto3" json:"vesting_pools,omitempty"`
}

func (m *QueryVestingPoolsResponse) Reset()         { *m = QueryVestingPoolsResponse{} }
func (m *QueryVestingPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVestingPoolsResponse) ProtoMessage()    {}
func (*QueryVestingPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{5}
}
func (m *QueryVestingPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingPoolsResponse.Merge(m, src)
}
func (m *QueryVestingPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingPoolsResponse proto.InternalMessageInfo

func (m *QueryVestingPoolsResponse) GetVestingPools() []*VestingPoolInfo {
	if m != nil {
		return m.VestingPools
	}
	return nil
}

type VestingPoolInfo struct {
	Name            string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VestingType     string      `protobuf:"bytes,2,opt,name=vesting_type,json=vestingType,proto3" json:"vesting_type,omitempty"`
	LockStart       time.Time   `protobuf:"bytes,3,opt,name=lock_start,json=lockStart,proto3,stdtime" json:"lock_start"`
	LockEnd         time.Time   `protobuf:"bytes,4,opt,name=lock_end,json=lockEnd,proto3,stdtime" json:"lock_end"`
	Withdrawable    string      `protobuf:"bytes,5,opt,name=withdrawable,proto3" json:"withdrawable,omitempty"`
	InitiallyLocked *types.Coin `protobuf:"bytes,6,opt,name=initially_locked,json=initiallyLocked,proto3" json:"initially_locked,omitempty"`
	CurrentlyLocked string      `protobuf:"bytes,7,opt,name=currently_locked,json=currentlyLocked,proto3" json:"currently_locked,omitempty"`
	SentAmount      string      `protobuf:"bytes,8,opt,name=sent_amount,json=sentAmount,proto3" json:"sent_amount,omitempty"`
}

func (m *VestingPoolInfo) Reset()         { *m = VestingPoolInfo{} }
func (m *VestingPoolInfo) String() string { return proto.CompactTextString(m) }
func (*VestingPoolInfo) ProtoMessage()    {}
func (*VestingPoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{6}
}
func (m *VestingPoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingPoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingPoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingPoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingPoolInfo.Merge(m, src)
}
func (m *VestingPoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *VestingPoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingPoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VestingPoolInfo proto.InternalMessageInfo

func (m *VestingPoolInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VestingPoolInfo) GetVestingType() string {
	if m != nil {
		return m.VestingType
	}
	return ""
}

func (m *VestingPoolInfo) GetLockStart() time.Time {
	if m != nil {
		return m.LockStart
	}
	return time.Time{}
}

func (m *VestingPoolInfo) GetLockEnd() time.Time {
	if m != nil {
		return m.LockEnd
	}
	return time.Time{}
}

func (m *VestingPoolInfo) GetWithdrawable() string {
	if m != nil {
		return m.Withdrawable
	}
	return ""
}

func (m *VestingPoolInfo) GetInitiallyLocked() *types.Coin {
	if m != nil {
		return m.InitiallyLocked
	}
	return nil
}

func (m *VestingPoolInfo) GetCurrentlyLocked() string {
	if m != nil {
		return m.CurrentlyLocked
	}
	return ""
}

func (m *VestingPoolInfo) GetSentAmount() string {
	if m != nil {
		return m.SentAmount
	}
	return ""
}

type QueryVestingsSummaryRequest struct {
}

func (m *QueryVestingsSummaryRequest) Reset()         { *m = QueryVestingsSummaryRequest{} }
func (m *QueryVestingsSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVestingsSummaryRequest) ProtoMessage()    {}
func (*QueryVestingsSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{7}
}
func (m *QueryVestingsSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingsSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingsSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingsSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingsSummaryRequest.Merge(m, src)
}
func (m *QueryVestingsSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingsSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingsSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingsSummaryRequest proto.InternalMessageInfo

type QueryVestingsSummaryResponse struct {
	VestingAllAmount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=vesting_all_amount,json=vestingAllAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vesting_all_amount"`
	VestingInPoolsAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=vesting_in_pools_amount,json=vestingInPoolsAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vesting_in_pools_amount"`
	VestingInAccountsAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=vesting_in_accounts_amount,json=vestingInAccountsAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vesting_in_accounts_amount"`
	DelegatedVestingAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=delegated_vesting_amount,json=delegatedVestingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegated_vesting_amount"`
}

func (m *QueryVestingsSummaryResponse) Reset()         { *m = QueryVestingsSummaryResponse{} }
func (m *QueryVestingsSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVestingsSummaryResponse) ProtoMessage()    {}
func (*QueryVestingsSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{8}
}
func (m *QueryVestingsSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVestingsSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVestingsSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVestingsSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVestingsSummaryResponse.Merge(m, src)
}
func (m *QueryVestingsSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVestingsSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVestingsSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVestingsSummaryResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # 3
type QueryGenesisVestingsSummaryRequest struct {
}

func (m *QueryGenesisVestingsSummaryRequest) Reset()         { *m = QueryGenesisVestingsSummaryRequest{} }
func (m *QueryGenesisVestingsSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGenesisVestingsSummaryRequest) ProtoMessage()    {}
func (*QueryGenesisVestingsSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{9}
}
func (m *QueryGenesisVestingsSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGenesisVestingsSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGenesisVestingsSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGenesisVestingsSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGenesisVestingsSummaryRequest.Merge(m, src)
}
func (m *QueryGenesisVestingsSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGenesisVestingsSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGenesisVestingsSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGenesisVestingsSummaryRequest proto.InternalMessageInfo

type QueryGenesisVestingsSummaryResponse struct {
	VestingAllAmount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=vesting_all_amount,json=vestingAllAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vesting_all_amount"`
	VestingInPoolsAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=vesting_in_pools_amount,json=vestingInPoolsAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vesting_in_pools_amount"`
	VestingInAccountsAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=vesting_in_accounts_amount,json=vestingInAccountsAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vesting_in_accounts_amount"`
	DelegatedVestingAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=delegated_vesting_amount,json=delegatedVestingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegated_vesting_amount"`
}

func (m *QueryGenesisVestingsSummaryResponse) Reset()         { *m = QueryGenesisVestingsSummaryResponse{} }
func (m *QueryGenesisVestingsSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGenesisVestingsSummaryResponse) ProtoMessage()    {}
func (*QueryGenesisVestingsSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4618ba90647613b6, []int{10}
}
func (m *QueryGenesisVestingsSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGenesisVestingsSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGenesisVestingsSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGenesisVestingsSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGenesisVestingsSummaryResponse.Merge(m, src)
}
func (m *QueryGenesisVestingsSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGenesisVestingsSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGenesisVestingsSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGenesisVestingsSummaryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "chain4energy.c4echain.cfevesting.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "chain4energy.c4echain.cfevesting.QueryParamsResponse")
	proto.RegisterType((*QueryVestingTypeRequest)(nil), "chain4energy.c4echain.cfevesting.QueryVestingTypeRequest")
	proto.RegisterType((*QueryVestingTypeResponse)(nil), "chain4energy.c4echain.cfevesting.QueryVestingTypeResponse")
	proto.RegisterType((*QueryVestingPoolsRequest)(nil), "chain4energy.c4echain.cfevesting.QueryVestingPoolsRequest")
	proto.RegisterType((*QueryVestingPoolsResponse)(nil), "chain4energy.c4echain.cfevesting.QueryVestingPoolsResponse")
	proto.RegisterType((*VestingPoolInfo)(nil), "chain4energy.c4echain.cfevesting.VestingPoolInfo")
	proto.RegisterType((*QueryVestingsSummaryRequest)(nil), "chain4energy.c4echain.cfevesting.QueryVestingsSummaryRequest")
	proto.RegisterType((*QueryVestingsSummaryResponse)(nil), "chain4energy.c4echain.cfevesting.QueryVestingsSummaryResponse")
	proto.RegisterType((*QueryGenesisVestingsSummaryRequest)(nil), "chain4energy.c4echain.cfevesting.QueryGenesisVestingsSummaryRequest")
	proto.RegisterType((*QueryGenesisVestingsSummaryResponse)(nil), "chain4energy.c4echain.cfevesting.QueryGenesisVestingsSummaryResponse")
}

func init() { proto.RegisterFile("c4echain/cfevesting/query.proto", fileDescriptor_4618ba90647613b6) }

var fileDescriptor_4618ba90647613b6 = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0xf9, 0xd7, 0xe7, 0xa0, 0x44, 0x83, 0xd5, 0x6c, 0xb6, 0xa9, 0x9d, 0x6c, 0xa2,
	0x2a, 0x45, 0xed, 0x2e, 0x09, 0xe6, 0x40, 0x11, 0xa0, 0xb8, 0x2d, 0x28, 0x12, 0x42, 0xc5, 0xad,
	0x7a, 0x40, 0x20, 0x6b, 0xbc, 0x9e, 0x6c, 0x56, 0xd9, 0x9d, 0x71, 0x77, 0xc6, 0x09, 0x16, 0xe2,
	0x82, 0xf8, 0x00, 0x95, 0x7a, 0xe3, 0xca, 0x07, 0xe0, 0xc6, 0x01, 0x4e, 0xdc, 0x7a, 0xac, 0x94,
	0x0b, 0xe2, 0x10, 0x50, 0xc2, 0x27, 0xe0, 0x13, 0xa0, 0x9d, 0x99, 0xdd, 0xac, 0x93, 0x55, 0x12,
	0x9b, 0x0b, 0x87, 0x9e, 0xec, 0x9d, 0x79, 0xef, 0xf7, 0xfb, 0xbd, 0x3f, 0x33, 0x6f, 0xa0, 0xe6,
	0xd5, 0x89, 0xb7, 0x8b, 0x03, 0xea, 0x7a, 0x3b, 0x64, 0x9f, 0x70, 0x11, 0x50, 0xdf, 0x7d, 0xd6,
	0x23, 0x71, 0xdf, 0xe9, 0xc6, 0x4c, 0x30, 0xb4, 0x2c, 0x77, 0xeb, 0x84, 0x92, 0xd8, 0xef, 0x3b,
	0xa9, 0xb5, 0x73, 0x6a, 0x6d, 0x55, 0x7c, 0xe6, 0x33, 0x69, 0xec, 0x26, 0xff, 0x94, 0x9f, 0xb5,
	0xe4, 0x33, 0xe6, 0x87, 0xc4, 0xc5, 0xdd, 0xc0, 0xc5, 0x94, 0x32, 0x81, 0x45, 0xc0, 0x28, 0xd7,
	0xbb, 0x55, 0x8f, 0xf1, 0x88, 0x71, 0xb7, 0x8d, 0x39, 0x71, 0xf7, 0x37, 0xda, 0x44, 0xe0, 0x0d,
	0xd7, 0x63, 0x01, 0xd5, 0xfb, 0x35, 0xed, 0x2d, 0xbf, 0xda, 0xbd, 0x1d, 0x57, 0x04, 0x11, 0xe1,
	0x02, 0x47, 0x5d, 0x6d, 0xb0, 0x52, 0xa4, 0xdb, 0x27, 0x94, 0xf0, 0x20, 0xe5, 0x58, 0x2e, 0x32,
	0xe9, 0xe2, 0x18, 0x47, 0xda, 0xc2, 0xae, 0x00, 0xfa, 0x3c, 0x09, 0xf5, 0x91, 0x5c, 0x6c, 0x92,
	0x67, 0x3d, 0xc2, 0x85, 0xfd, 0x15, 0xbc, 0x39, 0xb0, 0xca, 0xbb, 0x8c, 0x72, 0x82, 0x3e, 0x86,
	0x29, 0xe5, 0x6c, 0x1a, 0xcb, 0xc6, 0x7a, 0x79, 0x73, 0xdd, 0xb9, 0x2c, 0x33, 0x8e, 0x42, 0x68,
	0x4c, 0xbc, 0x3c, 0xaa, 0x8d, 0x35, 0xb5, 0xb7, 0xbd, 0x08, 0x0b, 0x12, 0xfe, 0xa9, 0x32, 0x7a,
	0xd2, 0xef, 0x92, 0x94, 0xf9, 0x85, 0x01, 0xe6, 0xf9, 0x3d, 0xcd, 0x7f, 0x00, 0x6f, 0x68, 0xdc,
	0x96, 0xe8, 0x77, 0x09, 0x37, 0xc7, 0x97, 0x4b, 0xeb, 0xe5, 0xcd, 0xfa, 0xe5, 0x32, 0x3e, 0x51,
	0x69, 0xc9, 0x81, 0x36, 0x96, 0x12, 0x49, 0xff, 0x1c, 0xd5, 0x2a, 0x7d, 0x1c, 0x85, 0xf7, 0xec,
	0x01, 0x60, 0xbb, 0x39, 0xbb, 0x7f, 0x6a, 0xca, 0xed, 0xb7, 0x07, 0x45, 0x3d, 0x62, 0x2c, 0x4c,
	0x73, 0x85, 0x2a, 0x30, 0xc9, 0x0e, 0x28, 0x89, 0x65, 0x4e, 0xae, 0x35, 0xd5, 0x87, 0xcd, 0x61,
	0xb1, 0xc0, 0x43, 0xc7, 0xf1, 0xf4, 0x34, 0x8e, 0x6e, 0xb2, 0xa1, 0xe3, 0xd8, 0xb8, 0x3c, 0x8e,
	0x1c, 0xdc, 0x36, 0xdd, 0x61, 0x99, 0x4c, 0x89, 0x6f, 0x7f, 0x5f, 0x82, 0xb9, 0x33, 0x16, 0x08,
	0xc1, 0x04, 0xc5, 0x11, 0xd1, 0xea, 0xe4, 0x7f, 0xb4, 0x02, 0xb3, 0xf9, 0x70, 0xcd, 0x71, 0xb9,
	0x57, 0xce, 0x85, 0x8c, 0xee, 0x03, 0x84, 0xcc, 0xdb, 0x6b, 0x71, 0x81, 0x63, 0x61, 0x96, 0x64,
	0xb9, 0x2d, 0x47, 0xb5, 0xa4, 0x93, 0xb6, 0xa4, 0xf3, 0x24, 0x6d, 0xc9, 0xc6, 0x4c, 0x92, 0xcd,
	0xe7, 0x7f, 0xd6, 0x8c, 0xe6, 0xb5, 0xc4, 0xef, 0x71, 0xe2, 0x86, 0x3e, 0x82, 0x19, 0x09, 0x42,
	0x68, 0xc7, 0x9c, 0x18, 0x02, 0x62, 0x3a, 0xf1, 0x7a, 0x48, 0x3b, 0xc8, 0x86, 0xd9, 0x83, 0x40,
	0xec, 0x76, 0x62, 0x7c, 0x80, 0xdb, 0x21, 0x31, 0x27, 0xa5, 0xd0, 0x81, 0x35, 0xf4, 0x00, 0xe6,
	0x03, 0x1a, 0x88, 0x00, 0x87, 0x61, 0xbf, 0x95, 0x38, 0x92, 0x8e, 0x39, 0x25, 0xc9, 0x16, 0x1d,
	0x75, 0xc4, 0x9c, 0xe4, 0x88, 0x39, 0xfa, 0x88, 0x39, 0xf7, 0x59, 0x40, 0x9b, 0x73, 0x99, 0xcb,
	0xa7, 0xd2, 0x03, 0xdd, 0x86, 0x79, 0xaf, 0x17, 0xc7, 0x84, 0x8a, 0x53, 0x94, 0x69, 0xc9, 0x36,
	0x97, 0xad, 0x6b, 0xd3, 0x1a, 0x94, 0x39, 0xa1, 0xa2, 0x85, 0x23, 0xd6, 0xa3, 0xc2, 0x9c, 0x91,
	0x56, 0x90, 0x2c, 0x6d, 0xc9, 0x15, 0xfb, 0x26, 0xdc, 0xc8, 0xd7, 0x9e, 0x3f, 0xee, 0x45, 0x11,
	0x8e, 0xfb, 0x69, 0x8b, 0xff, 0x52, 0x82, 0xa5, 0xe2, 0x7d, 0xdd, 0x1e, 0x5f, 0x02, 0x4a, 0xcb,
	0x83, 0xc3, 0x30, 0xe5, 0x91, 0x05, 0x6c, 0x38, 0x49, 0x92, 0xfe, 0x38, 0xaa, 0xdd, 0xf2, 0x03,
	0xb1, 0xdb, 0x6b, 0x3b, 0x1e, 0x8b, 0x5c, 0x7d, 0x91, 0xa8, 0x9f, 0xbb, 0xbc, 0xb3, 0xe7, 0xca,
	0x26, 0x76, 0xb6, 0xa9, 0x68, 0xce, 0x6b, 0xa4, 0xad, 0x30, 0x54, 0xea, 0x10, 0x81, 0x85, 0x14,
	0x3d, 0xa0, 0xaa, 0xff, 0x52, 0x8a, 0xf1, 0x91, 0x28, 0x2a, 0x1a, 0x6e, 0x9b, 0xca, 0x2e, 0xd4,
	0x34, 0x7b, 0x60, 0xe5, 0x68, 0xb0, 0xe7, 0x25, 0xab, 0x19, 0x53, 0x69, 0x24, 0xa6, 0x85, 0x8c,
	0x69, 0x4b, 0xe3, 0x69, 0xb2, 0x5d, 0x30, 0x3b, 0x24, 0x24, 0x3e, 0x16, 0xa4, 0xd3, 0xca, 0x72,
	0xa7, 0xa8, 0x26, 0x46, 0xa2, 0xba, 0x9e, 0xe1, 0xe9, 0x2a, 0xe9, 0xda, 0xae, 0x81, 0x2d, 0x6b,
	0x37, 0x78, 0xa1, 0x9c, 0x2d, 0xf1, 0x6f, 0x25, 0x58, 0xbd, 0xd0, 0xec, 0x75, 0xa5, 0xff, 0xef,
	0x95, 0xde, 0xfc, 0x71, 0x1a, 0x26, 0x65, 0x0d, 0xd1, 0x0f, 0x06, 0x4c, 0xa9, 0x39, 0x86, 0xae,
	0x30, 0x6a, 0xce, 0x8f, 0x53, 0xeb, 0xdd, 0x21, 0xbd, 0x54, 0x77, 0xd8, 0xab, 0xdf, 0x1d, 0xfe,
	0xfd, 0x62, 0xfc, 0x26, 0xba, 0xe1, 0x7a, 0x75, 0xe2, 0xa6, 0xe3, 0x3b, 0x7d, 0x2a, 0xa8, 0x59,
	0x8a, 0x7e, 0x32, 0xa0, 0x9c, 0x1b, 0x6b, 0xe8, 0xbd, 0x2b, 0x72, 0x9d, 0x9f, 0xbd, 0xd6, 0xbd,
	0x51, 0x5c, 0xb5, 0xd6, 0xdb, 0x52, 0xeb, 0x2a, 0x5a, 0x29, 0xd4, 0x9a, 0x9f, 0x36, 0xe8, 0x57,
	0x03, 0x66, 0xf3, 0x63, 0x11, 0x0d, 0xc9, 0x9b, 0x9f, 0xbe, 0xd6, 0xfb, 0x23, 0xf9, 0x6a, 0xd1,
	0x9b, 0x52, 0xf4, 0x1d, 0xf4, 0xd6, 0x85, 0xa2, 0xe5, 0xc1, 0x71, 0xbf, 0x91, 0x73, 0xfd, 0x5b,
	0xf4, 0xb3, 0x91, 0xcd, 0xd8, 0xf4, 0x38, 0xa3, 0x0f, 0x86, 0x13, 0x71, 0xe6, 0xb6, 0xb0, 0x3e,
	0x1c, 0xd5, 0x5d, 0x87, 0xb1, 0x26, 0xc3, 0xa8, 0xa2, 0xa5, 0xc2, 0x30, 0xb8, 0x16, 0x79, 0x68,
	0xc0, 0xf5, 0xe2, 0xeb, 0x08, 0x3d, 0xb8, 0xa2, 0x80, 0x0b, 0x2f, 0x3d, 0xeb, 0xe1, 0x7f, 0x44,
	0xd1, 0xd1, 0xdc, 0x91, 0xd1, 0xdc, 0x42, 0x6b, 0x85, 0xd1, 0xe8, 0xf7, 0x6d, 0x4b, 0x47, 0xd5,
	0xf8, 0xec, 0xe5, 0x71, 0xd5, 0x78, 0x75, 0x5c, 0x35, 0xfe, 0x3a, 0xae, 0x1a, 0xcf, 0x4f, 0xaa,
	0x63, 0xaf, 0x4e, 0xaa, 0x63, 0xbf, 0x9f, 0x54, 0xc7, 0xbe, 0xa8, 0xe7, 0xcf, 0x7f, 0x4e, 0x58,
	0x02, 0x7b, 0x57, 0x3d, 0x8a, 0xbf, 0xce, 0x3f, 0x8b, 0xe5, 0x8d, 0xd0, 0x9e, 0x92, 0x0f, 0x93,
	0x77, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x37, 0x4f, 0xa9, 0x2a, 0x15, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of VestingType items.
	VestingType(ctx context.Context, in *QueryVestingTypeRequest, opts ...grpc.CallOption) (*QueryVestingTypeResponse, error)
	// Queries a list of Vesting items.
	VestingPools(ctx context.Context, in *QueryVestingPoolsRequest, opts ...grpc.CallOption) (*QueryVestingPoolsResponse, error)
	// Queries a summary of the entire vesting.
	VestingsSummary(ctx context.Context, in *QueryVestingsSummaryRequest, opts ...grpc.CallOption) (*QueryVestingsSummaryResponse, error)
	// Queries a list of GenesisVestingsSummary items.
	GenesisVestingsSummary(ctx context.Context, in *QueryGenesisVestingsSummaryRequest, opts ...grpc.CallOption) (*QueryGenesisVestingsSummaryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VestingType(ctx context.Context, in *QueryVestingTypeRequest, opts ...grpc.CallOption) (*QueryVestingTypeResponse, error) {
	out := new(QueryVestingTypeResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Query/VestingType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VestingPools(ctx context.Context, in *QueryVestingPoolsRequest, opts ...grpc.CallOption) (*QueryVestingPoolsResponse, error) {
	out := new(QueryVestingPoolsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Query/VestingPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VestingsSummary(ctx context.Context, in *QueryVestingsSummaryRequest, opts ...grpc.CallOption) (*QueryVestingsSummaryResponse, error) {
	out := new(QueryVestingsSummaryResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Query/VestingsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GenesisVestingsSummary(ctx context.Context, in *QueryGenesisVestingsSummaryRequest, opts ...grpc.CallOption) (*QueryGenesisVestingsSummaryResponse, error) {
	out := new(QueryGenesisVestingsSummaryResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Query/GenesisVestingsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of VestingType items.
	VestingType(context.Context, *QueryVestingTypeRequest) (*QueryVestingTypeResponse, error)
	// Queries a list of Vesting items.
	VestingPools(context.Context, *QueryVestingPoolsRequest) (*QueryVestingPoolsResponse, error)
	// Queries a summary of the entire vesting.
	VestingsSummary(context.Context, *QueryVestingsSummaryRequest) (*QueryVestingsSummaryResponse, error)
	// Queries a list of GenesisVestingsSummary items.
	GenesisVestingsSummary(context.Context, *QueryGenesisVestingsSummaryRequest) (*QueryGenesisVestingsSummaryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VestingType(ctx context.Context, req *QueryVestingTypeRequest) (*QueryVestingTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VestingType not implemented")
}
func (*UnimplementedQueryServer) VestingPools(ctx context.Context, req *QueryVestingPoolsRequest) (*QueryVestingPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VestingPools not implemented")
}
func (*UnimplementedQueryServer) VestingsSummary(ctx context.Context, req *QueryVestingsSummaryRequest) (*QueryVestingsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VestingsSummary not implemented")
}
func (*UnimplementedQueryServer) GenesisVestingsSummary(ctx context.Context, req *QueryGenesisVestingsSummaryRequest) (*QueryGenesisVestingsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisVestingsSummary not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VestingType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVestingTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VestingType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Query/VestingType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VestingType(ctx, req.(*QueryVestingTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VestingPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVestingPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VestingPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Query/VestingPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VestingPools(ctx, req.(*QueryVestingPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VestingsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVestingsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VestingsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Query/VestingsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VestingsSummary(ctx, req.(*QueryVestingsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GenesisVestingsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGenesisVestingsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GenesisVestingsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Query/GenesisVestingsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GenesisVestingsSummary(ctx, req.(*QueryGenesisVestingsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfevesting.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VestingType",
			Handler:    _Query_VestingType_Handler,
		},
		{
			MethodName: "VestingPools",
			Handler:    _Query_VestingPools_Handler,
		},
		{
			MethodName: "VestingsSummary",
			Handler:    _Query_VestingsSummary_Handler,
		},
		{
			MethodName: "GenesisVestingsSummary",
			Handler:    _Query_GenesisVestingsSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfevesting/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVestingTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVestingTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingTypes) > 0 {
		for iNdEx := len(m.VestingTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVestingPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVestingPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingPools) > 0 {
		for iNdEx := len(m.VestingPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *VestingPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingPoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SentAmount) > 0 {
		i -= len(m.SentAmount)
		copy(dAtA[i:], m.SentAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SentAmount)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CurrentlyLocked) > 0 {
		i -= len(m.CurrentlyLocked)
		copy(dAtA[i:], m.CurrentlyLocked)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentlyLocked)))
		i--
		dAtA[i] = 0x3a
	}
	if m.InitiallyLocked != nil {
		{
			size, err := m.InitiallyLocked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Withdrawable) > 0 {
		i -= len(m.Withdrawable)
		copy(dAtA[i:], m.Withdrawable)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Withdrawable)))
		i--
		dAtA[i] = 0x2a
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LockEnd, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LockEnd):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintQuery(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LockStart, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LockStart):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintQuery(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if len(m.VestingType) > 0 {
		i -= len(m.VestingType)
		copy(dAtA[i:], m.VestingType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VestingType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVestingsSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingsSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingsSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVestingsSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVestingsSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVestingsSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DelegatedVestingAmount.Size()
		i -= size
		if _, err := m.DelegatedVestingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VestingInAccountsAmount.Size()
		i -= size
		if _, err := m.VestingInAccountsAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.VestingInPoolsAmount.Size()
		i -= size
		if _, err := m.VestingInPoolsAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.VestingAllAmount.Size()
		i -= size
		if _, err := m.VestingAllAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGenesisVestingsSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGenesisVestingsSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGenesisVestingsSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGenesisVestingsSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGenesisVestingsSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGenesisVestingsSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DelegatedVestingAmount.Size()
		i -= size
		if _, err := m.DelegatedVestingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VestingInAccountsAmount.Size()
		i -= size
		if _, err := m.VestingInAccountsAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.VestingInPoolsAmount.Size()
		i -= size
		if _, err := m.VestingInPoolsAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.VestingAllAmount.Size()
		i -= size
		if _, err := m.VestingAllAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVestingTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVestingTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VestingTypes) > 0 {
		for _, e := range m.VestingTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVestingPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVestingPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VestingPools) > 0 {
		for _, e := range m.VestingPools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *VestingPoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VestingType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LockStart)
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LockEnd)
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Withdrawable)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.InitiallyLocked != nil {
		l = m.InitiallyLocked.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CurrentlyLocked)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SentAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVestingsSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVestingsSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VestingAllAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.VestingInPoolsAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.VestingInAccountsAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.DelegatedVestingAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGenesisVestingsSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGenesisVestingsSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VestingAllAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.VestingInPoolsAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.VestingInAccountsAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.DelegatedVestingAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingTypes = append(m.VestingTypes, GenesisVestingType{})
			if err := m.VestingTypes[len(m.VestingTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPools = append(m.VestingPools, &VestingPoolInfo{})
			if err := m.VestingPools[len(m.VestingPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LockStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LockEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiallyLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitiallyLocked == nil {
				m.InitiallyLocked = &types.Coin{}
			}
			if err := m.InitiallyLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentlyLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentlyLocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingsSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingsSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingsSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVestingsSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVestingsSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVestingsSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingAllAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingAllAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingInPoolsAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingInPoolsAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingInAccountsAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingInAccountsAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedVestingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatedVestingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGenesisVestingsSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGenesisVestingsSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGenesisVestingsSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGenesisVestingsSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGenesisVestingsSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGenesisVestingsSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingAllAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingAllAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingInPoolsAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingInPoolsAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingInAccountsAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingInAccountsAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedVestingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatedVestingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
