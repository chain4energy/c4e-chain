// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfevesting/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateVestingPool struct {
	Owner       string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name        string                                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Duration    time.Duration                          `protobuf:"bytes,5,opt,name=duration,proto3,stdduration" json:"duration"`
	VestingType string                                 `protobuf:"bytes,6,opt,name=vesting_type,json=vestingType,proto3" json:"vesting_type,omitempty"`
}

func (m *MsgCreateVestingPool) Reset()         { *m = MsgCreateVestingPool{} }
func (m *MsgCreateVestingPool) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVestingPool) ProtoMessage()    {}
func (*MsgCreateVestingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{0}
}
func (m *MsgCreateVestingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVestingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVestingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVestingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVestingPool.Merge(m, src)
}
func (m *MsgCreateVestingPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVestingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVestingPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVestingPool proto.InternalMessageInfo

func (m *MsgCreateVestingPool) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateVestingPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateVestingPool) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgCreateVestingPool) GetVestingType() string {
	if m != nil {
		return m.VestingType
	}
	return ""
}

type MsgCreateVestingPoolResponse struct {
}

func (m *MsgCreateVestingPoolResponse) Reset()         { *m = MsgCreateVestingPoolResponse{} }
func (m *MsgCreateVestingPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVestingPoolResponse) ProtoMessage()    {}
func (*MsgCreateVestingPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{1}
}
func (m *MsgCreateVestingPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVestingPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVestingPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVestingPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVestingPoolResponse.Merge(m, src)
}
func (m *MsgCreateVestingPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVestingPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVestingPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVestingPoolResponse proto.InternalMessageInfo

type MsgWithdrawAllAvailable struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgWithdrawAllAvailable) Reset()         { *m = MsgWithdrawAllAvailable{} }
func (m *MsgWithdrawAllAvailable) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawAllAvailable) ProtoMessage()    {}
func (*MsgWithdrawAllAvailable) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{2}
}
func (m *MsgWithdrawAllAvailable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawAllAvailable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawAllAvailable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawAllAvailable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawAllAvailable.Merge(m, src)
}
func (m *MsgWithdrawAllAvailable) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawAllAvailable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawAllAvailable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawAllAvailable proto.InternalMessageInfo

func (m *MsgWithdrawAllAvailable) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type MsgWithdrawAllAvailableResponse struct {
	Withdrawn github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=withdrawn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"withdrawn"`
}

func (m *MsgWithdrawAllAvailableResponse) Reset()         { *m = MsgWithdrawAllAvailableResponse{} }
func (m *MsgWithdrawAllAvailableResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawAllAvailableResponse) ProtoMessage()    {}
func (*MsgWithdrawAllAvailableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{3}
}
func (m *MsgWithdrawAllAvailableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawAllAvailableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawAllAvailableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawAllAvailableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawAllAvailableResponse.Merge(m, src)
}
func (m *MsgWithdrawAllAvailableResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawAllAvailableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawAllAvailableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawAllAvailableResponse proto.InternalMessageInfo

type MsgCreateVestingAccount struct {
	FromAddress string                                   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ToAddress   string                                   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" yaml:"to_address"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	StartTime   int64                                    `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" yaml:"start_time"`
	EndTime     int64                                    `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" yaml:"end_time"`
}

func (m *MsgCreateVestingAccount) Reset()         { *m = MsgCreateVestingAccount{} }
func (m *MsgCreateVestingAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVestingAccount) ProtoMessage()    {}
func (*MsgCreateVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{4}
}
func (m *MsgCreateVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVestingAccount.Merge(m, src)
}
func (m *MsgCreateVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVestingAccount proto.InternalMessageInfo

func (m *MsgCreateVestingAccount) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgCreateVestingAccount) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgCreateVestingAccount) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgCreateVestingAccount) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MsgCreateVestingAccount) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type MsgCreateVestingAccountResponse struct {
}

func (m *MsgCreateVestingAccountResponse) Reset()         { *m = MsgCreateVestingAccountResponse{} }
func (m *MsgCreateVestingAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVestingAccountResponse) ProtoMessage()    {}
func (*MsgCreateVestingAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{5}
}
func (m *MsgCreateVestingAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVestingAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVestingAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVestingAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVestingAccountResponse.Merge(m, src)
}
func (m *MsgCreateVestingAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVestingAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVestingAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVestingAccountResponse proto.InternalMessageInfo

type MsgSendToVestingAccount struct {
	Owner           string                                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ToAddress       string                                 `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	VestingPoolName string                                 `protobuf:"bytes,3,opt,name=vesting_pool_name,json=vestingPoolName,proto3" json:"vesting_pool_name,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	RestartVesting  bool                                   `protobuf:"varint,5,opt,name=restart_vesting,json=restartVesting,proto3" json:"restart_vesting,omitempty"`
}

func (m *MsgSendToVestingAccount) Reset()         { *m = MsgSendToVestingAccount{} }
func (m *MsgSendToVestingAccount) String() string { return proto.CompactTextString(m) }
func (*MsgSendToVestingAccount) ProtoMessage()    {}
func (*MsgSendToVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{6}
}
func (m *MsgSendToVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToVestingAccount.Merge(m, src)
}
func (m *MsgSendToVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToVestingAccount proto.InternalMessageInfo

func (m *MsgSendToVestingAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSendToVestingAccount) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgSendToVestingAccount) GetVestingPoolName() string {
	if m != nil {
		return m.VestingPoolName
	}
	return ""
}

func (m *MsgSendToVestingAccount) GetRestartVesting() bool {
	if m != nil {
		return m.RestartVesting
	}
	return false
}

type MsgSendToVestingAccountResponse struct {
}

func (m *MsgSendToVestingAccountResponse) Reset()         { *m = MsgSendToVestingAccountResponse{} }
func (m *MsgSendToVestingAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToVestingAccountResponse) ProtoMessage()    {}
func (*MsgSendToVestingAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{7}
}
func (m *MsgSendToVestingAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToVestingAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToVestingAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToVestingAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToVestingAccountResponse.Merge(m, src)
}
func (m *MsgSendToVestingAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToVestingAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToVestingAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToVestingAccountResponse proto.InternalMessageInfo

type MsgSplitVesting struct {
	FromAddress string                                   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string                                   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgSplitVesting) Reset()         { *m = MsgSplitVesting{} }
func (m *MsgSplitVesting) String() string { return proto.CompactTextString(m) }
func (*MsgSplitVesting) ProtoMessage()    {}
func (*MsgSplitVesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{8}
}
func (m *MsgSplitVesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSplitVesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSplitVesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSplitVesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSplitVesting.Merge(m, src)
}
func (m *MsgSplitVesting) XXX_Size() int {
	return m.Size()
}
func (m *MsgSplitVesting) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSplitVesting.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSplitVesting proto.InternalMessageInfo

func (m *MsgSplitVesting) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSplitVesting) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgSplitVesting) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type MsgSplitVestingResponse struct {
}

func (m *MsgSplitVestingResponse) Reset()         { *m = MsgSplitVestingResponse{} }
func (m *MsgSplitVestingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSplitVestingResponse) ProtoMessage()    {}
func (*MsgSplitVestingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{9}
}
func (m *MsgSplitVestingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSplitVestingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSplitVestingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSplitVestingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSplitVestingResponse.Merge(m, src)
}
func (m *MsgSplitVestingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSplitVestingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSplitVestingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSplitVestingResponse proto.InternalMessageInfo

type MsgMoveAvailableVesting struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
}

func (m *MsgMoveAvailableVesting) Reset()         { *m = MsgMoveAvailableVesting{} }
func (m *MsgMoveAvailableVesting) String() string { return proto.CompactTextString(m) }
func (*MsgMoveAvailableVesting) ProtoMessage()    {}
func (*MsgMoveAvailableVesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{10}
}
func (m *MsgMoveAvailableVesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMoveAvailableVesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMoveAvailableVesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMoveAvailableVesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMoveAvailableVesting.Merge(m, src)
}
func (m *MsgMoveAvailableVesting) XXX_Size() int {
	return m.Size()
}
func (m *MsgMoveAvailableVesting) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMoveAvailableVesting.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMoveAvailableVesting proto.InternalMessageInfo

func (m *MsgMoveAvailableVesting) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgMoveAvailableVesting) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

type MsgMoveAvailableVestingResponse struct {
}

func (m *MsgMoveAvailableVestingResponse) Reset()         { *m = MsgMoveAvailableVestingResponse{} }
func (m *MsgMoveAvailableVestingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMoveAvailableVestingResponse) ProtoMessage()    {}
func (*MsgMoveAvailableVestingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{11}
}
func (m *MsgMoveAvailableVestingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMoveAvailableVestingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMoveAvailableVestingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMoveAvailableVestingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMoveAvailableVestingResponse.Merge(m, src)
}
func (m *MsgMoveAvailableVestingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMoveAvailableVestingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMoveAvailableVestingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMoveAvailableVestingResponse proto.InternalMessageInfo

type MsgMoveAvailableVestingByDenoms struct {
	FromAddress string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string   `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Denoms      []string `protobuf:"bytes,3,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *MsgMoveAvailableVestingByDenoms) Reset()         { *m = MsgMoveAvailableVestingByDenoms{} }
func (m *MsgMoveAvailableVestingByDenoms) String() string { return proto.CompactTextString(m) }
func (*MsgMoveAvailableVestingByDenoms) ProtoMessage()    {}
func (*MsgMoveAvailableVestingByDenoms) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{12}
}
func (m *MsgMoveAvailableVestingByDenoms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMoveAvailableVestingByDenoms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMoveAvailableVestingByDenoms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMoveAvailableVestingByDenoms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMoveAvailableVestingByDenoms.Merge(m, src)
}
func (m *MsgMoveAvailableVestingByDenoms) XXX_Size() int {
	return m.Size()
}
func (m *MsgMoveAvailableVestingByDenoms) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMoveAvailableVestingByDenoms.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMoveAvailableVestingByDenoms proto.InternalMessageInfo

func (m *MsgMoveAvailableVestingByDenoms) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgMoveAvailableVestingByDenoms) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgMoveAvailableVestingByDenoms) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type MsgMoveAvailableVestingByDenomsResponse struct {
}

func (m *MsgMoveAvailableVestingByDenomsResponse) Reset() {
	*m = MsgMoveAvailableVestingByDenomsResponse{}
}
func (m *MsgMoveAvailableVestingByDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMoveAvailableVestingByDenomsResponse) ProtoMessage()    {}
func (*MsgMoveAvailableVestingByDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{13}
}
func (m *MsgMoveAvailableVestingByDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMoveAvailableVestingByDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMoveAvailableVestingByDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMoveAvailableVestingByDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMoveAvailableVestingByDenomsResponse.Merge(m, src)
}
func (m *MsgMoveAvailableVestingByDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMoveAvailableVestingByDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMoveAvailableVestingByDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMoveAvailableVestingByDenomsResponse proto.InternalMessageInfo

type MsgUpdateDenomParam struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Denom     string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgUpdateDenomParam) Reset()         { *m = MsgUpdateDenomParam{} }
func (m *MsgUpdateDenomParam) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDenomParam) ProtoMessage()    {}
func (*MsgUpdateDenomParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{14}
}
func (m *MsgUpdateDenomParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDenomParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDenomParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDenomParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDenomParam.Merge(m, src)
}
func (m *MsgUpdateDenomParam) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDenomParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDenomParam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDenomParam proto.InternalMessageInfo

func (m *MsgUpdateDenomParam) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateDenomParam) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgUpdateDenomParamResponse struct {
}

func (m *MsgUpdateDenomParamResponse) Reset()         { *m = MsgUpdateDenomParamResponse{} }
func (m *MsgUpdateDenomParamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDenomParamResponse) ProtoMessage()    {}
func (*MsgUpdateDenomParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caec3272a9b1262f, []int{15}
}
func (m *MsgUpdateDenomParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDenomParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDenomParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDenomParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDenomParamResponse.Merge(m, src)
}
func (m *MsgUpdateDenomParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDenomParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDenomParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDenomParamResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateVestingPool)(nil), "chain4energy.c4echain.cfevesting.MsgCreateVestingPool")
	proto.RegisterType((*MsgCreateVestingPoolResponse)(nil), "chain4energy.c4echain.cfevesting.MsgCreateVestingPoolResponse")
	proto.RegisterType((*MsgWithdrawAllAvailable)(nil), "chain4energy.c4echain.cfevesting.MsgWithdrawAllAvailable")
	proto.RegisterType((*MsgWithdrawAllAvailableResponse)(nil), "chain4energy.c4echain.cfevesting.MsgWithdrawAllAvailableResponse")
	proto.RegisterType((*MsgCreateVestingAccount)(nil), "chain4energy.c4echain.cfevesting.MsgCreateVestingAccount")
	proto.RegisterType((*MsgCreateVestingAccountResponse)(nil), "chain4energy.c4echain.cfevesting.MsgCreateVestingAccountResponse")
	proto.RegisterType((*MsgSendToVestingAccount)(nil), "chain4energy.c4echain.cfevesting.MsgSendToVestingAccount")
	proto.RegisterType((*MsgSendToVestingAccountResponse)(nil), "chain4energy.c4echain.cfevesting.MsgSendToVestingAccountResponse")
	proto.RegisterType((*MsgSplitVesting)(nil), "chain4energy.c4echain.cfevesting.MsgSplitVesting")
	proto.RegisterType((*MsgSplitVestingResponse)(nil), "chain4energy.c4echain.cfevesting.MsgSplitVestingResponse")
	proto.RegisterType((*MsgMoveAvailableVesting)(nil), "chain4energy.c4echain.cfevesting.MsgMoveAvailableVesting")
	proto.RegisterType((*MsgMoveAvailableVestingResponse)(nil), "chain4energy.c4echain.cfevesting.MsgMoveAvailableVestingResponse")
	proto.RegisterType((*MsgMoveAvailableVestingByDenoms)(nil), "chain4energy.c4echain.cfevesting.MsgMoveAvailableVestingByDenoms")
	proto.RegisterType((*MsgMoveAvailableVestingByDenomsResponse)(nil), "chain4energy.c4echain.cfevesting.MsgMoveAvailableVestingByDenomsResponse")
	proto.RegisterType((*MsgUpdateDenomParam)(nil), "chain4energy.c4echain.cfevesting.MsgUpdateDenomParam")
	proto.RegisterType((*MsgUpdateDenomParamResponse)(nil), "chain4energy.c4echain.cfevesting.MsgUpdateDenomParamResponse")
}

func init() { proto.RegisterFile("c4echain/cfevesting/tx.proto", fileDescriptor_caec3272a9b1262f) }

var fileDescriptor_caec3272a9b1262f = []byte{
	// 927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x37, 0xdb, 0x90, 0x4c, 0x2b, 0x42, 0xdd, 0xc0, 0x66, 0x43, 0xd6, 0xce, 0xfa, 0x40,
	0x0b, 0xd2, 0xda, 0x74, 0x09, 0x48, 0x5d, 0x09, 0x50, 0xb2, 0x2b, 0xa4, 0x1e, 0xb2, 0x5a, 0x99,
	0x05, 0x24, 0x38, 0x44, 0x13, 0x7b, 0xea, 0x58, 0xd8, 0x1e, 0xcb, 0x33, 0x49, 0x37, 0x82, 0x1f,
	0x80, 0xc4, 0x85, 0x03, 0x07, 0xfe, 0x01, 0x12, 0xe2, 0x07, 0xf0, 0x13, 0xf6, 0xb8, 0x27, 0x84,
	0x38, 0x64, 0x51, 0x7b, 0x84, 0x53, 0x7f, 0x01, 0xf2, 0xcc, 0xd8, 0x71, 0x36, 0xde, 0xd4, 0x0d,
	0x15, 0xa7, 0xfa, 0xcd, 0x9b, 0xef, 0xbd, 0xef, 0x7d, 0xf3, 0xe6, 0x4d, 0x03, 0x5a, 0x56, 0x07,
	0x59, 0x23, 0xe8, 0x06, 0x86, 0x75, 0x8c, 0x26, 0x88, 0x50, 0x37, 0x70, 0x0c, 0xfa, 0x44, 0x0f,
	0x23, 0x4c, 0xb1, 0xdc, 0x66, 0xae, 0x0e, 0x0a, 0x50, 0xe4, 0x4c, 0xf5, 0x64, 0xab, 0x3e, 0xdf,
	0xda, 0x54, 0x2c, 0x4c, 0x7c, 0x4c, 0x8c, 0x21, 0x24, 0xc8, 0x98, 0x1c, 0x0c, 0x11, 0x85, 0x07,
	0x86, 0x85, 0xdd, 0x80, 0x47, 0x68, 0x2a, 0x0e, 0xc6, 0x8e, 0x87, 0x0c, 0x66, 0x0d, 0xc7, 0xc7,
	0x86, 0x3d, 0x8e, 0x20, 0x75, 0x71, 0xe2, 0xaf, 0x3b, 0xd8, 0xc1, 0xec, 0xd3, 0x88, 0xbf, 0xf8,
	0xaa, 0xf6, 0x8f, 0x04, 0xea, 0x7d, 0xe2, 0xdc, 0x8f, 0x10, 0xa4, 0xe8, 0x73, 0x9e, 0xea, 0x11,
	0xc6, 0x9e, 0x5c, 0x07, 0x9b, 0xf8, 0x24, 0x40, 0x51, 0x43, 0x6a, 0x4b, 0xfb, 0x55, 0x93, 0x1b,
	0xb2, 0x0c, 0xae, 0x07, 0xd0, 0x47, 0x8d, 0x12, 0x5b, 0x64, 0xdf, 0xf2, 0x27, 0xa0, 0x0c, 0x7d,
	0x3c, 0x0e, 0x68, 0xe3, 0x7a, 0xbc, 0xda, 0xd3, 0x9f, 0xce, 0xd4, 0x8d, 0x3f, 0x67, 0xea, 0x5b,
	0x8e, 0x4b, 0x47, 0xe3, 0xa1, 0x6e, 0x61, 0xdf, 0x10, 0xdc, 0xf9, 0x9f, 0x3b, 0xc4, 0xfe, 0xda,
	0xa0, 0xd3, 0x10, 0x11, 0xfd, 0x28, 0xa0, 0xa6, 0x40, 0xcb, 0x1f, 0x83, 0x4a, 0x42, 0xb9, 0xb1,
	0xd9, 0x96, 0xf6, 0xb7, 0xee, 0xde, 0xd4, 0x79, 0x4d, 0x7a, 0x52, 0x93, 0xfe, 0x40, 0x6c, 0xe8,
	0x55, 0xe2, 0x24, 0x3f, 0x3d, 0x57, 0x25, 0x33, 0x05, 0xc9, 0xb7, 0xc1, 0xb6, 0x10, 0x6b, 0x10,
	0x47, 0x6f, 0x94, 0x19, 0xc9, 0x2d, 0xb1, 0xf6, 0x78, 0x1a, 0x22, 0x4d, 0x01, 0xad, 0xbc, 0x6a,
	0x4d, 0x44, 0x42, 0x1c, 0x10, 0xa4, 0x19, 0xe0, 0x46, 0x9f, 0x38, 0x5f, 0xb8, 0x74, 0x64, 0x47,
	0xf0, 0xa4, 0xeb, 0x79, 0xdd, 0x09, 0x74, 0x3d, 0x38, 0xf4, 0x50, 0xbe, 0x20, 0x5a, 0x08, 0xd4,
	0x97, 0x00, 0x92, 0x98, 0x72, 0x1f, 0x54, 0x4f, 0x84, 0x3f, 0xe0, 0xe0, 0x9e, 0x21, 0x24, 0xda,
	0x2b, 0x20, 0xd1, 0x7d, 0xec, 0x06, 0xe6, 0x3c, 0x82, 0xf6, 0xfb, 0x35, 0xc6, 0x71, 0xa1, 0x86,
	0xae, 0x65, 0x31, 0x09, 0xef, 0x81, 0xed, 0xe3, 0x08, 0xfb, 0x03, 0x68, 0xdb, 0x11, 0x22, 0x44,
	0x64, 0xbb, 0x71, 0x3e, 0x53, 0x77, 0xa7, 0xd0, 0xf7, 0xee, 0x69, 0x59, 0xaf, 0x66, 0x6e, 0xc5,
	0x66, 0x97, 0x5b, 0x72, 0x07, 0x00, 0x8a, 0x53, 0xe4, 0x35, 0x86, 0x7c, 0xfd, 0x7c, 0xa6, 0xee,
	0x70, 0xe4, 0xdc, 0xa7, 0x99, 0x55, 0x8a, 0x13, 0x94, 0x95, 0x1e, 0x7e, 0xa9, 0x5d, 0x62, 0x47,
	0xc6, 0x0b, 0xd0, 0xe3, 0x36, 0xd5, 0x45, 0x9b, 0xb2, 0x1a, 0x7a, 0xef, 0xc6, 0x45, 0xff, 0xf2,
	0x5c, 0xdd, 0x2f, 0x58, 0x34, 0x49, 0x3b, 0xa3, 0x03, 0x00, 0xa1, 0x30, 0xa2, 0x03, 0xea, 0xfa,
	0x88, 0x75, 0x59, 0x29, 0x4b, 0x6d, 0xee, 0xd3, 0xcc, 0x2a, 0x33, 0x1e, 0xbb, 0x3e, 0x92, 0x75,
	0x50, 0x41, 0x81, 0xcd, 0x31, 0x9b, 0x0c, 0xb3, 0x7b, 0x3e, 0x53, 0x6b, 0x1c, 0x93, 0x78, 0x34,
	0xf3, 0x15, 0x14, 0xd8, 0xf1, 0x7e, 0xed, 0x36, 0x3b, 0xca, 0x3c, 0x5d, 0xd3, 0xf6, 0xf8, 0x5b,
	0x62, 0xda, 0x7f, 0x1a, 0x43, 0xf0, 0x0b, 0xda, 0xe7, 0x5f, 0x98, 0x5b, 0xcb, 0xaa, 0x66, 0xe5,
	0x7b, 0x07, 0xec, 0x24, 0x2d, 0x1b, 0x62, 0xec, 0x0d, 0x32, 0x97, 0xab, 0x36, 0x99, 0xf7, 0xe7,
	0xc3, 0xab, 0xbc, 0x67, 0x7b, 0xa0, 0x16, 0x21, 0xae, 0x99, 0x48, 0xc1, 0xe4, 0xa9, 0x98, 0xaf,
	0x8a, 0x65, 0x51, 0x98, 0x10, 0x24, 0xaf, 0xd8, 0x54, 0x90, 0xdf, 0x24, 0x50, 0x8b, 0xf7, 0x84,
	0x9e, 0x9b, 0xc0, 0xe2, 0x6b, 0xb8, 0xdc, 0x84, 0x8b, 0xbd, 0x76, 0x81, 0x2a, 0xff, 0x47, 0x53,
	0x69, 0x37, 0xf9, 0x51, 0x66, 0x98, 0xa7, 0x55, 0x7d, 0xc5, 0x5c, 0x7d, 0x3c, 0x41, 0xe9, 0x6d,
	0xbe, 0xb2, 0xe2, 0x84, 0xaa, 0x79, 0xc1, 0xd3, 0xfc, 0xdf, 0xbc, 0x74, 0x4b, 0x6f, 0xfa, 0x00,
	0x05, 0xd8, 0x27, 0x57, 0x20, 0xf2, 0x1b, 0xa0, 0x6c, 0xb3, 0x58, 0x4c, 0xe4, 0xaa, 0x29, 0x2c,
	0xed, 0x6d, 0xb0, 0x77, 0x41, 0xf2, 0x94, 0xe7, 0x11, 0xd8, 0xed, 0x13, 0xe7, 0xb3, 0xd0, 0x86,
	0x14, 0x31, 0xd7, 0x23, 0x18, 0x41, 0x5f, 0x6e, 0x81, 0x2a, 0x1c, 0xd3, 0x11, 0x8e, 0x5c, 0x3a,
	0x15, 0xc4, 0xe6, 0x0b, 0xf1, 0x3d, 0x61, 0x99, 0x04, 0x23, 0x6e, 0x68, 0xb7, 0xc0, 0x9b, 0x39,
	0xa1, 0x92, 0x4c, 0x77, 0x7f, 0xae, 0x82, 0x52, 0x9f, 0x38, 0xf2, 0xf7, 0x12, 0xd8, 0x59, 0x7e,
	0xab, 0x3e, 0xd0, 0x2f, 0x7a, 0x3d, 0xf5, 0xbc, 0xa9, 0xdf, 0xfc, 0x68, 0x3d, 0x5c, 0x3a, 0xd9,
	0x7f, 0x94, 0x40, 0x3d, 0xf7, 0xad, 0x38, 0x2c, 0x14, 0x38, 0x0f, 0xda, 0xec, 0xae, 0x0d, 0x5d,
	0xa0, 0x95, 0xfb, 0x3c, 0x1c, 0x5e, 0xbe, 0x5e, 0x01, 0x2d, 0x48, 0x6b, 0xd5, 0xf0, 0x64, 0xb4,
	0x72, 0x27, 0x67, 0x31, 0x5a, 0x79, 0xd0, 0x82, 0xb4, 0x56, 0x8d, 0x30, 0xf9, 0x5b, 0xb0, 0xbd,
	0x30, 0xbe, 0x0e, 0x8a, 0x85, 0xcc, 0x40, 0x9a, 0x87, 0x97, 0x86, 0x2c, 0x88, 0x92, 0x3b, 0x68,
	0x8a, 0xc5, 0xcc, 0x83, 0x16, 0x14, 0x65, 0xd5, 0x04, 0x92, 0x7f, 0x95, 0x40, 0x6b, 0xe5, 0xfc,
	0x59, 0x3f, 0x47, 0x12, 0xa2, 0x79, 0xf4, 0x9f, 0x43, 0xa4, 0x74, 0xbf, 0x93, 0xc0, 0x6b, 0x4b,
	0x63, 0xe8, 0xfd, 0x42, 0xf1, 0x5f, 0x84, 0x35, 0x3f, 0x5c, 0x0b, 0x96, 0x50, 0xe9, 0x3d, 0x7c,
	0x7a, 0xaa, 0x48, 0xcf, 0x4e, 0x15, 0xe9, 0xaf, 0x53, 0x45, 0xfa, 0xe1, 0x4c, 0xd9, 0x78, 0x76,
	0xa6, 0x6c, 0xfc, 0x71, 0xa6, 0x6c, 0x7c, 0xd9, 0xc9, 0x3e, 0x51, 0x99, 0x14, 0x86, 0xd5, 0x41,
	0x77, 0xf8, 0x2f, 0x83, 0x27, 0x0b, 0xbf, 0x0d, 0xe2, 0x47, 0x6b, 0x58, 0x66, 0xff, 0xfb, 0xbe,
	0xf7, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0x7c, 0x81, 0x88, 0x3f, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateVestingPool(ctx context.Context, in *MsgCreateVestingPool, opts ...grpc.CallOption) (*MsgCreateVestingPoolResponse, error)
	WithdrawAllAvailable(ctx context.Context, in *MsgWithdrawAllAvailable, opts ...grpc.CallOption) (*MsgWithdrawAllAvailableResponse, error)
	CreateVestingAccount(ctx context.Context, in *MsgCreateVestingAccount, opts ...grpc.CallOption) (*MsgCreateVestingAccountResponse, error)
	SendToVestingAccount(ctx context.Context, in *MsgSendToVestingAccount, opts ...grpc.CallOption) (*MsgSendToVestingAccountResponse, error)
	SplitVesting(ctx context.Context, in *MsgSplitVesting, opts ...grpc.CallOption) (*MsgSplitVestingResponse, error)
	MoveAvailableVesting(ctx context.Context, in *MsgMoveAvailableVesting, opts ...grpc.CallOption) (*MsgMoveAvailableVestingResponse, error)
	MoveAvailableVestingByDenoms(ctx context.Context, in *MsgMoveAvailableVestingByDenoms, opts ...grpc.CallOption) (*MsgMoveAvailableVestingByDenomsResponse, error)
	UpdateDenomParam(ctx context.Context, in *MsgUpdateDenomParam, opts ...grpc.CallOption) (*MsgUpdateDenomParamResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVestingPool(ctx context.Context, in *MsgCreateVestingPool, opts ...grpc.CallOption) (*MsgCreateVestingPoolResponse, error) {
	out := new(MsgCreateVestingPoolResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/CreateVestingPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawAllAvailable(ctx context.Context, in *MsgWithdrawAllAvailable, opts ...grpc.CallOption) (*MsgWithdrawAllAvailableResponse, error) {
	out := new(MsgWithdrawAllAvailableResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/WithdrawAllAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVestingAccount(ctx context.Context, in *MsgCreateVestingAccount, opts ...grpc.CallOption) (*MsgCreateVestingAccountResponse, error) {
	out := new(MsgCreateVestingAccountResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/CreateVestingAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToVestingAccount(ctx context.Context, in *MsgSendToVestingAccount, opts ...grpc.CallOption) (*MsgSendToVestingAccountResponse, error) {
	out := new(MsgSendToVestingAccountResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/SendToVestingAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SplitVesting(ctx context.Context, in *MsgSplitVesting, opts ...grpc.CallOption) (*MsgSplitVestingResponse, error) {
	out := new(MsgSplitVestingResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/SplitVesting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MoveAvailableVesting(ctx context.Context, in *MsgMoveAvailableVesting, opts ...grpc.CallOption) (*MsgMoveAvailableVestingResponse, error) {
	out := new(MsgMoveAvailableVestingResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVesting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MoveAvailableVestingByDenoms(ctx context.Context, in *MsgMoveAvailableVestingByDenoms, opts ...grpc.CallOption) (*MsgMoveAvailableVestingByDenomsResponse, error) {
	out := new(MsgMoveAvailableVestingByDenomsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVestingByDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDenomParam(ctx context.Context, in *MsgUpdateDenomParam, opts ...grpc.CallOption) (*MsgUpdateDenomParamResponse, error) {
	out := new(MsgUpdateDenomParamResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfevesting.Msg/UpdateDenomParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateVestingPool(context.Context, *MsgCreateVestingPool) (*MsgCreateVestingPoolResponse, error)
	WithdrawAllAvailable(context.Context, *MsgWithdrawAllAvailable) (*MsgWithdrawAllAvailableResponse, error)
	CreateVestingAccount(context.Context, *MsgCreateVestingAccount) (*MsgCreateVestingAccountResponse, error)
	SendToVestingAccount(context.Context, *MsgSendToVestingAccount) (*MsgSendToVestingAccountResponse, error)
	SplitVesting(context.Context, *MsgSplitVesting) (*MsgSplitVestingResponse, error)
	MoveAvailableVesting(context.Context, *MsgMoveAvailableVesting) (*MsgMoveAvailableVestingResponse, error)
	MoveAvailableVestingByDenoms(context.Context, *MsgMoveAvailableVestingByDenoms) (*MsgMoveAvailableVestingByDenomsResponse, error)
	UpdateDenomParam(context.Context, *MsgUpdateDenomParam) (*MsgUpdateDenomParamResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateVestingPool(ctx context.Context, req *MsgCreateVestingPool) (*MsgCreateVestingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVestingPool not implemented")
}
func (*UnimplementedMsgServer) WithdrawAllAvailable(ctx context.Context, req *MsgWithdrawAllAvailable) (*MsgWithdrawAllAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAllAvailable not implemented")
}
func (*UnimplementedMsgServer) CreateVestingAccount(ctx context.Context, req *MsgCreateVestingAccount) (*MsgCreateVestingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVestingAccount not implemented")
}
func (*UnimplementedMsgServer) SendToVestingAccount(ctx context.Context, req *MsgSendToVestingAccount) (*MsgSendToVestingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToVestingAccount not implemented")
}
func (*UnimplementedMsgServer) SplitVesting(ctx context.Context, req *MsgSplitVesting) (*MsgSplitVestingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitVesting not implemented")
}
func (*UnimplementedMsgServer) MoveAvailableVesting(ctx context.Context, req *MsgMoveAvailableVesting) (*MsgMoveAvailableVestingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveAvailableVesting not implemented")
}
func (*UnimplementedMsgServer) MoveAvailableVestingByDenoms(ctx context.Context, req *MsgMoveAvailableVestingByDenoms) (*MsgMoveAvailableVestingByDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveAvailableVestingByDenoms not implemented")
}
func (*UnimplementedMsgServer) UpdateDenomParam(ctx context.Context, req *MsgUpdateDenomParam) (*MsgUpdateDenomParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDenomParam not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateVestingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVestingPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVestingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/CreateVestingPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVestingPool(ctx, req.(*MsgCreateVestingPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawAllAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawAllAvailable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawAllAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/WithdrawAllAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawAllAvailable(ctx, req.(*MsgWithdrawAllAvailable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVestingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVestingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVestingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/CreateVestingAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVestingAccount(ctx, req.(*MsgCreateVestingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToVestingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToVestingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToVestingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/SendToVestingAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToVestingAccount(ctx, req.(*MsgSendToVestingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SplitVesting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSplitVesting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SplitVesting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/SplitVesting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SplitVesting(ctx, req.(*MsgSplitVesting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MoveAvailableVesting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMoveAvailableVesting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MoveAvailableVesting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVesting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MoveAvailableVesting(ctx, req.(*MsgMoveAvailableVesting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MoveAvailableVestingByDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMoveAvailableVestingByDenoms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MoveAvailableVestingByDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVestingByDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MoveAvailableVestingByDenoms(ctx, req.(*MsgMoveAvailableVestingByDenoms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDenomParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDenomParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDenomParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfevesting.Msg/UpdateDenomParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDenomParam(ctx, req.(*MsgUpdateDenomParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfevesting.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVestingPool",
			Handler:    _Msg_CreateVestingPool_Handler,
		},
		{
			MethodName: "WithdrawAllAvailable",
			Handler:    _Msg_WithdrawAllAvailable_Handler,
		},
		{
			MethodName: "CreateVestingAccount",
			Handler:    _Msg_CreateVestingAccount_Handler,
		},
		{
			MethodName: "SendToVestingAccount",
			Handler:    _Msg_SendToVestingAccount_Handler,
		},
		{
			MethodName: "SplitVesting",
			Handler:    _Msg_SplitVesting_Handler,
		},
		{
			MethodName: "MoveAvailableVesting",
			Handler:    _Msg_MoveAvailableVesting_Handler,
		},
		{
			MethodName: "MoveAvailableVestingByDenoms",
			Handler:    _Msg_MoveAvailableVestingByDenoms_Handler,
		},
		{
			MethodName: "UpdateDenomParam",
			Handler:    _Msg_UpdateDenomParam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfevesting/tx.proto",
}

func (m *MsgCreateVestingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVestingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVestingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingType) > 0 {
		i -= len(m.VestingType)
		copy(dAtA[i:], m.VestingType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VestingType)))
		i--
		dAtA[i] = 0x32
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVestingPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVestingPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVestingPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawAllAvailable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawAllAvailable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawAllAvailable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawAllAvailableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawAllAvailableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawAllAvailableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Withdrawn.Size()
		i -= size
		if _, err := m.Withdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVestingAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVestingAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVestingAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestartVesting {
		i--
		if m.RestartVesting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.VestingPoolName) > 0 {
		i -= len(m.VestingPoolName)
		copy(dAtA[i:], m.VestingPoolName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VestingPoolName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToVestingAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToVestingAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToVestingAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSplitVesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSplitVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSplitVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSplitVestingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSplitVestingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSplitVestingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMoveAvailableVesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMoveAvailableVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMoveAvailableVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMoveAvailableVestingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMoveAvailableVestingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMoveAvailableVestingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMoveAvailableVestingByDenoms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMoveAvailableVestingByDenoms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMoveAvailableVestingByDenoms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMoveAvailableVestingByDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMoveAvailableVestingByDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMoveAvailableVestingByDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDenomParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDenomParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDenomParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDenomParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDenomParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDenomParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateVestingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.VestingType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVestingPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawAllAvailable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawAllAvailableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Withdrawn.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.StartTime != 0 {
		n += 1 + sovTx(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovTx(uint64(m.EndTime))
	}
	return n
}

func (m *MsgCreateVestingAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VestingPoolName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.RestartVesting {
		n += 2
	}
	return n
}

func (m *MsgSendToVestingAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSplitVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSplitVestingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMoveAvailableVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMoveAvailableVestingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMoveAvailableVestingByDenoms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMoveAvailableVestingByDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDenomParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDenomParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateVestingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVestingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVestingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVestingPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVestingPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVestingPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawAllAvailable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawAllAvailable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawAllAvailable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawAllAvailableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawAllAvailableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawAllAvailableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVestingAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVestingAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVestingAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartVesting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestartVesting = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToVestingAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToVestingAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToVestingAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSplitVesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSplitVesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSplitVesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSplitVestingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSplitVestingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSplitVestingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMoveAvailableVesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMoveAvailableVesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMoveAvailableVesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMoveAvailableVestingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMoveAvailableVestingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMoveAvailableVestingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMoveAvailableVestingByDenoms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMoveAvailableVestingByDenoms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMoveAvailableVestingByDenoms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMoveAvailableVestingByDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMoveAvailableVestingByDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMoveAvailableVestingByDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDenomParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDenomParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDenomParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDenomParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDenomParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDenomParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
