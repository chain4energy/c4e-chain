// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chain4energy/c4echain/cfevesting/vesting_account.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/auth/vesting/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestingAccountTrace struct {
	Id                 uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address            string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PeriodsToTrace     []uint64 `protobuf:"varint,3,rep,packed,name=periods_to_trace,json=periodsToTrace,proto3" json:"periods_to_trace,omitempty"`
	Genesis            bool     `protobuf:"varint,4,opt,name=genesis,proto3" json:"genesis,omitempty"`
	FromGenesisPool    bool     `protobuf:"varint,5,opt,name=from_genesis_pool,json=fromGenesisPool,proto3" json:"from_genesis_pool,omitempty"`
	FromGenesisAccount bool     `protobuf:"varint,6,opt,name=from_genesis_account,json=fromGenesisAccount,proto3" json:"from_genesis_account,omitempty"`
}

func (m *VestingAccountTrace) Reset()         { *m = VestingAccountTrace{} }
func (m *VestingAccountTrace) String() string { return proto.CompactTextString(m) }
func (*VestingAccountTrace) ProtoMessage()    {}
func (*VestingAccountTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_177f28ac68c4b8f4, []int{0}
}
func (m *VestingAccountTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingAccountTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingAccountTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingAccountTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingAccountTrace.Merge(m, src)
}
func (m *VestingAccountTrace) XXX_Size() int {
	return m.Size()
}
func (m *VestingAccountTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingAccountTrace.DiscardUnknown(m)
}

var xxx_messageInfo_VestingAccountTrace proto.InternalMessageInfo

func (m *VestingAccountTrace) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VestingAccountTrace) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VestingAccountTrace) GetPeriodsToTrace() []uint64 {
	if m != nil {
		return m.PeriodsToTrace
	}
	return nil
}

func (m *VestingAccountTrace) GetGenesis() bool {
	if m != nil {
		return m.Genesis
	}
	return false
}

func (m *VestingAccountTrace) GetFromGenesisPool() bool {
	if m != nil {
		return m.FromGenesisPool
	}
	return false
}

func (m *VestingAccountTrace) GetFromGenesisAccount() bool {
	if m != nil {
		return m.FromGenesisAccount
	}
	return false
}

// ContinuousVestingPeriod defines a length of time and amount of coins that will vest.
type ContinuousVestingPeriod struct {
	StartTime int64                                    `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64                                    `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *ContinuousVestingPeriod) Reset()      { *m = ContinuousVestingPeriod{} }
func (*ContinuousVestingPeriod) ProtoMessage() {}
func (*ContinuousVestingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_177f28ac68c4b8f4, []int{1}
}
func (m *ContinuousVestingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinuousVestingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinuousVestingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinuousVestingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousVestingPeriod.Merge(m, src)
}
func (m *ContinuousVestingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *ContinuousVestingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousVestingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousVestingPeriod proto.InternalMessageInfo

func (m *ContinuousVestingPeriod) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ContinuousVestingPeriod) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ContinuousVestingPeriod) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// PeriodicContinuousVestingAccount implements the VestingAccount interface. It
// periodically vests by unlocking coins during each specified period.
type PeriodicContinuousVestingAccount struct {
	*types1.BaseVestingAccount `protobuf:"bytes,1,opt,name=base_vesting_account,json=baseVestingAccount,proto3,embedded=base_vesting_account" json:"base_vesting_account,omitempty"`
	StartTime                  int64                     `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	VestingPeriods             []ContinuousVestingPeriod `protobuf:"bytes,3,rep,name=vesting_periods,json=vestingPeriods,proto3" json:"vesting_periods"`
}

func (m *PeriodicContinuousVestingAccount) Reset()      { *m = PeriodicContinuousVestingAccount{} }
func (*PeriodicContinuousVestingAccount) ProtoMessage() {}
func (*PeriodicContinuousVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_177f28ac68c4b8f4, []int{2}
}
func (m *PeriodicContinuousVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeriodicContinuousVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeriodicContinuousVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeriodicContinuousVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicContinuousVestingAccount.Merge(m, src)
}
func (m *PeriodicContinuousVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *PeriodicContinuousVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicContinuousVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicContinuousVestingAccount proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VestingAccountTrace)(nil), "chain4energy.c4echain.cfevesting.VestingAccountTrace")
	proto.RegisterType((*ContinuousVestingPeriod)(nil), "chain4energy.c4echain.cfevesting.ContinuousVestingPeriod")
	proto.RegisterType((*PeriodicContinuousVestingAccount)(nil), "chain4energy.c4echain.cfevesting.PeriodicContinuousVestingAccount")
}

func init() {
	proto.RegisterFile("chain4energy/c4echain/cfevesting/vesting_account.proto", fileDescriptor_177f28ac68c4b8f4)
}

var fileDescriptor_177f28ac68c4b8f4 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x31, 0x6f, 0xdb, 0x3c,
	0x10, 0x95, 0x64, 0x7d, 0xb6, 0xc3, 0x00, 0xce, 0x57, 0xd6, 0x40, 0x95, 0x00, 0x95, 0x05, 0xa3,
	0x83, 0x10, 0x20, 0x54, 0x92, 0x1a, 0x05, 0x9a, 0xad, 0xce, 0xd0, 0xad, 0x08, 0x04, 0xa3, 0x43,
	0x17, 0x41, 0xa2, 0x18, 0x99, 0x68, 0x44, 0x1a, 0x22, 0x1d, 0x34, 0xff, 0xa0, 0x63, 0xc7, 0x76,
	0xcb, 0xdc, 0x1f, 0xd1, 0x39, 0xa3, 0xc7, 0x4e, 0x69, 0x6b, 0xff, 0x91, 0x42, 0x24, 0x95, 0x3a,
	0x0e, 0x8a, 0x4e, 0xd2, 0xdd, 0xbd, 0x77, 0xbc, 0xf7, 0xc8, 0x03, 0x2f, 0xf0, 0x34, 0xa5, 0x6c,
	0x44, 0x18, 0xa9, 0x8a, 0xab, 0x08, 0x8f, 0x88, 0x8a, 0x23, 0x7c, 0x4e, 0x2e, 0x89, 0x90, 0x94,
	0x15, 0x91, 0xf9, 0x26, 0x29, 0xc6, 0x7c, 0xce, 0x24, 0x9a, 0x55, 0x5c, 0x72, 0x18, 0xac, 0xf3,
	0x50, 0xc3, 0x43, 0x7f, 0x78, 0x7b, 0xfd, 0x82, 0x17, 0x5c, 0x81, 0xa3, 0xfa, 0x4f, 0xf3, 0xf6,
	0x9e, 0x61, 0x2e, 0x4a, 0x2e, 0xa2, 0xbb, 0xee, 0x47, 0x19, 0x91, 0xe9, 0x51, 0x13, 0x1b, 0x94,
	0x6f, 0x50, 0x59, 0x2a, 0xc8, 0x1d, 0x04, 0x73, 0xca, 0x74, 0x7d, 0xf8, 0xcb, 0x06, 0x8f, 0xdf,
	0x6a, 0xc6, 0x2b, 0x3d, 0xd6, 0xa4, 0x4a, 0x31, 0x81, 0x3d, 0xe0, 0xd0, 0xdc, 0xb3, 0x03, 0x3b,
	0x74, 0x63, 0x87, 0xe6, 0xd0, 0x03, 0x9d, 0x34, 0xcf, 0x2b, 0x22, 0x84, 0xe7, 0x04, 0x76, 0xb8,
	0x15, 0x37, 0x21, 0x0c, 0xc1, 0xff, 0x33, 0x52, 0x51, 0x9e, 0x8b, 0x44, 0xf2, 0x44, 0xd6, 0x6c,
	0xaf, 0x15, 0xb4, 0x42, 0x37, 0xee, 0x99, 0xfc, 0x84, 0xeb, 0x9e, 0x1e, 0xe8, 0x14, 0x84, 0x11,
	0x41, 0x85, 0xe7, 0x06, 0x76, 0xd8, 0x8d, 0x9b, 0x10, 0xee, 0x83, 0x47, 0xe7, 0x15, 0x2f, 0x13,
	0x13, 0x27, 0x33, 0xce, 0x2f, 0xbc, 0xff, 0x14, 0x66, 0xa7, 0x2e, 0xbc, 0xd6, 0xf9, 0x33, 0xce,
	0x2f, 0xe0, 0x21, 0xe8, 0xdf, 0xc3, 0x1a, 0x37, 0xbd, 0xb6, 0x82, 0xc3, 0x35, 0xb8, 0x11, 0x34,
	0xfc, 0x66, 0x83, 0x27, 0xa7, 0x9c, 0x49, 0xca, 0xe6, 0x7c, 0x2e, 0x8c, 0xda, 0x33, 0x35, 0x1b,
	0x7c, 0x0a, 0x80, 0x90, 0x69, 0x25, 0x13, 0x49, 0x4b, 0xa2, 0xf4, 0xb6, 0xe2, 0x2d, 0x95, 0x99,
	0xd0, 0x92, 0xc0, 0x5d, 0xd0, 0x25, 0x2c, 0xd7, 0x45, 0x47, 0x15, 0x3b, 0x84, 0xe5, 0xaa, 0x84,
	0x41, 0x3b, 0x2d, 0xd5, 0xc9, 0xb5, 0xda, 0xed, 0xe3, 0x5d, 0xa4, 0xad, 0x46, 0xb5, 0xd5, 0xc8,
	0x58, 0x8d, 0x4e, 0x39, 0x65, 0xe3, 0xc3, 0x9b, 0xdb, 0x81, 0xf5, 0xf5, 0xc7, 0x20, 0x2c, 0xa8,
	0x9c, 0xce, 0x33, 0x84, 0x79, 0x19, 0x99, 0x7b, 0xd1, 0x9f, 0x03, 0x91, 0xbf, 0x8f, 0xe4, 0xd5,
	0x8c, 0x08, 0x45, 0x10, 0xb1, 0x69, 0x7d, 0xe2, 0x7e, 0xbe, 0x1e, 0x58, 0xc3, 0x2f, 0x0e, 0x08,
	0xf4, 0xbc, 0x14, 0x3f, 0x10, 0x62, 0x54, 0xc2, 0x0c, 0xf4, 0xeb, 0x93, 0x93, 0x8d, 0x57, 0xa6,
	0x34, 0x6d, 0x1f, 0xef, 0x37, 0xd3, 0x35, 0xcf, 0xa3, 0x19, 0x70, 0x9c, 0x0a, 0x72, 0xbf, 0xd3,
	0xd8, 0x5d, 0xdc, 0x0e, 0xec, 0x18, 0x66, 0x0f, 0x2a, 0x1b, 0x6e, 0x39, 0x9b, 0x6e, 0x4d, 0xc1,
	0x4e, 0x73, 0xba, 0xb9, 0x7a, 0xe3, 0xcd, 0x4b, 0xf4, 0xaf, 0x47, 0x8e, 0xfe, 0x72, 0x41, 0x63,
	0xb7, 0xf6, 0x2e, 0xee, 0x5d, 0xae, 0x27, 0xc5, 0x49, 0xf7, 0xe3, 0xf5, 0xc0, 0xaa, 0xbd, 0x19,
	0xbf, 0xb9, 0x59, 0xfa, 0xf6, 0x62, 0xe9, 0xdb, 0x3f, 0x97, 0xbe, 0xfd, 0x69, 0xe5, 0x5b, 0x8b,
	0x95, 0x6f, 0x7d, 0x5f, 0xf9, 0xd6, 0xbb, 0xd1, 0xba, 0xdb, 0x1b, 0xbb, 0x79, 0xa0, 0x97, 0xf3,
	0xc3, 0xfa, 0x7a, 0x2a, 0xff, 0xb3, 0xb6, 0xda, 0x8b, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x42, 0xac, 0x05, 0x13, 0xcf, 0x03, 0x00, 0x00,
}

func (m *VestingAccountTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingAccountTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingAccountTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromGenesisAccount {
		i--
		if m.FromGenesisAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.FromGenesisPool {
		i--
		if m.FromGenesisPool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Genesis {
		i--
		if m.Genesis {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PeriodsToTrace) > 0 {
		dAtA2 := make([]byte, len(m.PeriodsToTrace)*10)
		var j1 int
		for _, num := range m.PeriodsToTrace {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintVestingAccount(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVestingAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVestingAccount(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContinuousVestingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinuousVestingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinuousVestingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EndTime != 0 {
		i = encodeVarintVestingAccount(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintVestingAccount(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeriodicContinuousVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeriodicContinuousVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeriodicContinuousVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingPeriods) > 0 {
		for iNdEx := len(m.VestingPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartTime != 0 {
		i = encodeVarintVestingAccount(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseVestingAccount != nil {
		{
			size, err := m.BaseVestingAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVestingAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingAccountTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVestingAccount(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVestingAccount(uint64(l))
	}
	if len(m.PeriodsToTrace) > 0 {
		l = 0
		for _, e := range m.PeriodsToTrace {
			l += sovVestingAccount(uint64(e))
		}
		n += 1 + sovVestingAccount(uint64(l)) + l
	}
	if m.Genesis {
		n += 2
	}
	if m.FromGenesisPool {
		n += 2
	}
	if m.FromGenesisAccount {
		n += 2
	}
	return n
}

func (m *ContinuousVestingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovVestingAccount(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovVestingAccount(uint64(m.EndTime))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovVestingAccount(uint64(l))
		}
	}
	return n
}

func (m *PeriodicContinuousVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseVestingAccount != nil {
		l = m.BaseVestingAccount.Size()
		n += 1 + l + sovVestingAccount(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovVestingAccount(uint64(m.StartTime))
	}
	if len(m.VestingPeriods) > 0 {
		for _, e := range m.VestingPeriods {
			l = e.Size()
			n += 1 + l + sovVestingAccount(uint64(l))
		}
	}
	return n
}

func sovVestingAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingAccount(x uint64) (n int) {
	return sovVestingAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingAccountTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingAccountTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingAccountTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVestingAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PeriodsToTrace = append(m.PeriodsToTrace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVestingAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVestingAccount
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVestingAccount
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PeriodsToTrace) == 0 {
					m.PeriodsToTrace = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVestingAccount
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PeriodsToTrace = append(m.PeriodsToTrace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodsToTrace", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Genesis = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromGenesisPool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromGenesisPool = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromGenesisAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromGenesisAccount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinuousVestingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinuousVestingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinuousVestingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeriodicContinuousVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeriodicContinuousVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeriodicContinuousVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseVestingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseVestingAccount == nil {
				m.BaseVestingAccount = &types1.BaseVestingAccount{}
			}
			if err := m.BaseVestingAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPeriods = append(m.VestingPeriods, ContinuousVestingPeriod{})
			if err := m.VestingPeriods[len(m.VestingPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingAccount = fmt.Errorf("proto: unexpected end of group")
)
