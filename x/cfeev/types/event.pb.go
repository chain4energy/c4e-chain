// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfeev/event.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventEnergyTransferCreated struct {
	EnergyTransferId       uint64 `protobuf:"varint,1,opt,name=energy_transfer_id,json=energyTransferId,proto3" json:"energy_transfer_id,omitempty"`
	ChargerId              string `protobuf:"bytes,2,opt,name=charger_id,json=chargerId,proto3" json:"charger_id,omitempty"`
	EnergyAmountToTransfer uint64 `protobuf:"varint,3,opt,name=energy_amount_to_transfer,json=energyAmountToTransfer,proto3" json:"energy_amount_to_transfer,omitempty"`
}

func (m *EventEnergyTransferCreated) Reset()         { *m = EventEnergyTransferCreated{} }
func (m *EventEnergyTransferCreated) String() string { return proto.CompactTextString(m) }
func (*EventEnergyTransferCreated) ProtoMessage()    {}
func (*EventEnergyTransferCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae1e842fd47ccec, []int{0}
}
func (m *EventEnergyTransferCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEnergyTransferCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEnergyTransferCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEnergyTransferCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEnergyTransferCreated.Merge(m, src)
}
func (m *EventEnergyTransferCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventEnergyTransferCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEnergyTransferCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventEnergyTransferCreated proto.InternalMessageInfo

func (m *EventEnergyTransferCreated) GetEnergyTransferId() uint64 {
	if m != nil {
		return m.EnergyTransferId
	}
	return 0
}

func (m *EventEnergyTransferCreated) GetChargerId() string {
	if m != nil {
		return m.ChargerId
	}
	return ""
}

func (m *EventEnergyTransferCreated) GetEnergyAmountToTransfer() uint64 {
	if m != nil {
		return m.EnergyAmountToTransfer
	}
	return 0
}

type EventChangeOfferStatus struct {
	EnergyTransferOfferId uint64        `protobuf:"varint,1,opt,name=energy_transfer_offer_id,json=energyTransferOfferId,proto3" json:"energy_transfer_offer_id,omitempty"`
	OldStatus             ChargerStatus `protobuf:"varint,2,opt,name=old_status,json=oldStatus,proto3,enum=chain4energy.c4echain.cfeev.ChargerStatus" json:"old_status,omitempty"`
	NewStatus             ChargerStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=chain4energy.c4echain.cfeev.ChargerStatus" json:"new_status,omitempty"`
}

func (m *EventChangeOfferStatus) Reset()         { *m = EventChangeOfferStatus{} }
func (m *EventChangeOfferStatus) String() string { return proto.CompactTextString(m) }
func (*EventChangeOfferStatus) ProtoMessage()    {}
func (*EventChangeOfferStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae1e842fd47ccec, []int{1}
}
func (m *EventChangeOfferStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChangeOfferStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChangeOfferStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChangeOfferStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChangeOfferStatus.Merge(m, src)
}
func (m *EventChangeOfferStatus) XXX_Size() int {
	return m.Size()
}
func (m *EventChangeOfferStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChangeOfferStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EventChangeOfferStatus proto.InternalMessageInfo

func (m *EventChangeOfferStatus) GetEnergyTransferOfferId() uint64 {
	if m != nil {
		return m.EnergyTransferOfferId
	}
	return 0
}

func (m *EventChangeOfferStatus) GetOldStatus() ChargerStatus {
	if m != nil {
		return m.OldStatus
	}
	return ChargerStatus_ACTIVE
}

func (m *EventChangeOfferStatus) GetNewStatus() ChargerStatus {
	if m != nil {
		return m.NewStatus
	}
	return ChargerStatus_ACTIVE
}

type EventPublishOffer struct {
	EnergyTransferOfferId uint64   `protobuf:"varint,1,opt,name=energy_transfer_offer_id,json=energyTransferOfferId,proto3" json:"energy_transfer_offer_id,omitempty"`
	Owner                 string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ChargerId             string   `protobuf:"bytes,3,opt,name=charger_id,json=chargerId,proto3" json:"charger_id,omitempty"`
	Tariff                uint64   `protobuf:"varint,4,opt,name=tariff,proto3" json:"tariff,omitempty"`
	Name                  string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PlugType              PlugType `protobuf:"varint,6,opt,name=plug_type,json=plugType,proto3,enum=chain4energy.c4echain.cfeev.PlugType" json:"plug_type,omitempty"`
}

func (m *EventPublishOffer) Reset()         { *m = EventPublishOffer{} }
func (m *EventPublishOffer) String() string { return proto.CompactTextString(m) }
func (*EventPublishOffer) ProtoMessage()    {}
func (*EventPublishOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae1e842fd47ccec, []int{2}
}
func (m *EventPublishOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPublishOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPublishOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPublishOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPublishOffer.Merge(m, src)
}
func (m *EventPublishOffer) XXX_Size() int {
	return m.Size()
}
func (m *EventPublishOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPublishOffer.DiscardUnknown(m)
}

var xxx_messageInfo_EventPublishOffer proto.InternalMessageInfo

func (m *EventPublishOffer) GetEnergyTransferOfferId() uint64 {
	if m != nil {
		return m.EnergyTransferOfferId
	}
	return 0
}

func (m *EventPublishOffer) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventPublishOffer) GetChargerId() string {
	if m != nil {
		return m.ChargerId
	}
	return ""
}

func (m *EventPublishOffer) GetTariff() uint64 {
	if m != nil {
		return m.Tariff
	}
	return 0
}

func (m *EventPublishOffer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventPublishOffer) GetPlugType() PlugType {
	if m != nil {
		return m.PlugType
	}
	return PlugType_Type1
}

type EventCancelEnergyTransfer struct {
	EnergyTransferId uint64 `protobuf:"varint,1,opt,name=energy_transfer_id,json=energyTransferId,proto3" json:"energy_transfer_id,omitempty"`
	ChargerId        string `protobuf:"bytes,2,opt,name=charger_id,json=chargerId,proto3" json:"charger_id,omitempty"`
	CancelReason     string `protobuf:"bytes,3,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
}

func (m *EventCancelEnergyTransfer) Reset()         { *m = EventCancelEnergyTransfer{} }
func (m *EventCancelEnergyTransfer) String() string { return proto.CompactTextString(m) }
func (*EventCancelEnergyTransfer) ProtoMessage()    {}
func (*EventCancelEnergyTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae1e842fd47ccec, []int{3}
}
func (m *EventCancelEnergyTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelEnergyTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelEnergyTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelEnergyTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelEnergyTransfer.Merge(m, src)
}
func (m *EventCancelEnergyTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelEnergyTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelEnergyTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelEnergyTransfer proto.InternalMessageInfo

func (m *EventCancelEnergyTransfer) GetEnergyTransferId() uint64 {
	if m != nil {
		return m.EnergyTransferId
	}
	return 0
}

func (m *EventCancelEnergyTransfer) GetChargerId() string {
	if m != nil {
		return m.ChargerId
	}
	return ""
}

func (m *EventCancelEnergyTransfer) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

type EventBeginEnergyTransfer struct {
	EnergyTransferId      uint64 `protobuf:"varint,1,opt,name=energy_transfer_id,json=energyTransferId,proto3" json:"energy_transfer_id,omitempty"`
	EnergyTransferOfferId uint64 `protobuf:"varint,2,opt,name=energy_transfer_offer_id,json=energyTransferOfferId,proto3" json:"energy_transfer_offer_id,omitempty"`
}

func (m *EventBeginEnergyTransfer) Reset()         { *m = EventBeginEnergyTransfer{} }
func (m *EventBeginEnergyTransfer) String() string { return proto.CompactTextString(m) }
func (*EventBeginEnergyTransfer) ProtoMessage()    {}
func (*EventBeginEnergyTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae1e842fd47ccec, []int{4}
}
func (m *EventBeginEnergyTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBeginEnergyTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBeginEnergyTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBeginEnergyTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBeginEnergyTransfer.Merge(m, src)
}
func (m *EventBeginEnergyTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventBeginEnergyTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBeginEnergyTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventBeginEnergyTransfer proto.InternalMessageInfo

func (m *EventBeginEnergyTransfer) GetEnergyTransferId() uint64 {
	if m != nil {
		return m.EnergyTransferId
	}
	return 0
}

func (m *EventBeginEnergyTransfer) GetEnergyTransferOfferId() uint64 {
	if m != nil {
		return m.EnergyTransferOfferId
	}
	return 0
}

type EventCompleteEnergyTransfer struct {
	EnergyTransferId      uint64 `protobuf:"varint,1,opt,name=energy_transfer_id,json=energyTransferId,proto3" json:"energy_transfer_id,omitempty"`
	EnergyTransferOfferId uint64 `protobuf:"varint,2,opt,name=energy_transfer_offer_id,json=energyTransferOfferId,proto3" json:"energy_transfer_offer_id,omitempty"`
	EnergyTransferred     uint64 `protobuf:"varint,3,opt,name=energy_transferred,json=energyTransferred,proto3" json:"energy_transferred,omitempty"`
}

func (m *EventCompleteEnergyTransfer) Reset()         { *m = EventCompleteEnergyTransfer{} }
func (m *EventCompleteEnergyTransfer) String() string { return proto.CompactTextString(m) }
func (*EventCompleteEnergyTransfer) ProtoMessage()    {}
func (*EventCompleteEnergyTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae1e842fd47ccec, []int{5}
}
func (m *EventCompleteEnergyTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteEnergyTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteEnergyTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteEnergyTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteEnergyTransfer.Merge(m, src)
}
func (m *EventCompleteEnergyTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteEnergyTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteEnergyTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteEnergyTransfer proto.InternalMessageInfo

func (m *EventCompleteEnergyTransfer) GetEnergyTransferId() uint64 {
	if m != nil {
		return m.EnergyTransferId
	}
	return 0
}

func (m *EventCompleteEnergyTransfer) GetEnergyTransferOfferId() uint64 {
	if m != nil {
		return m.EnergyTransferOfferId
	}
	return 0
}

func (m *EventCompleteEnergyTransfer) GetEnergyTransferred() uint64 {
	if m != nil {
		return m.EnergyTransferred
	}
	return 0
}

func init() {
	proto.RegisterType((*EventEnergyTransferCreated)(nil), "chain4energy.c4echain.cfeev.EventEnergyTransferCreated")
	proto.RegisterType((*EventChangeOfferStatus)(nil), "chain4energy.c4echain.cfeev.EventChangeOfferStatus")
	proto.RegisterType((*EventPublishOffer)(nil), "chain4energy.c4echain.cfeev.EventPublishOffer")
	proto.RegisterType((*EventCancelEnergyTransfer)(nil), "chain4energy.c4echain.cfeev.EventCancelEnergyTransfer")
	proto.RegisterType((*EventBeginEnergyTransfer)(nil), "chain4energy.c4echain.cfeev.EventBeginEnergyTransfer")
	proto.RegisterType((*EventCompleteEnergyTransfer)(nil), "chain4energy.c4echain.cfeev.EventCompleteEnergyTransfer")
}

func init() { proto.RegisterFile("c4echain/cfeev/event.proto", fileDescriptor_cae1e842fd47ccec) }

var fileDescriptor_cae1e842fd47ccec = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xee, 0x6c, 0xbb, 0xc5, 0xbe, 0xa8, 0xb8, 0x83, 0x96, 0x6c, 0x17, 0xc3, 0x12, 0x11, 0x96,
	0xc5, 0x4d, 0x41, 0x0b, 0xe2, 0xd1, 0x96, 0x3d, 0xe4, 0xe4, 0x52, 0x7b, 0xf2, 0x12, 0xa6, 0xc9,
	0x9b, 0x34, 0x90, 0xce, 0x84, 0xc9, 0x64, 0x6b, 0x8f, 0xfe, 0x00, 0xc1, 0x1f, 0xe1, 0x3f, 0xf0,
	0x4f, 0x78, 0xdc, 0xa3, 0x47, 0x69, 0x0f, 0x9e, 0xfd, 0x07, 0xd2, 0x99, 0xa9, 0xda, 0x2a, 0x05,
	0x3f, 0x60, 0x6f, 0x93, 0x99, 0xe7, 0x7d, 0xe6, 0x79, 0xe6, 0x79, 0xf3, 0x42, 0x27, 0xea, 0x61,
	0x34, 0x61, 0x19, 0xef, 0x46, 0x09, 0xe2, 0x65, 0x17, 0x2f, 0x91, 0x2b, 0xbf, 0x90, 0x42, 0x09,
	0x7a, 0xa4, 0x0f, 0x7a, 0xc8, 0x51, 0xa6, 0x73, 0x7f, 0x0d, 0xf4, 0x35, 0xb0, 0x73, 0xba, 0x5d,
	0xa8, 0x51, 0xa1, 0x92, 0x8c, 0x97, 0x09, 0xca, 0x50, 0x24, 0x09, 0x4a, 0x43, 0xe4, 0xbd, 0x27,
	0xd0, 0x39, 0x5f, 0x11, 0x9f, 0x6b, 0xd0, 0xc8, 0x62, 0x06, 0x12, 0x99, 0xc2, 0x98, 0x3e, 0x02,
	0xba, 0x5d, 0x9d, 0xc5, 0x0e, 0x39, 0x26, 0x27, 0x8d, 0xe1, 0x1d, 0xdc, 0x28, 0x09, 0x62, 0x7a,
	0x1f, 0x20, 0x9a, 0x30, 0x99, 0x1a, 0xd4, 0xde, 0x31, 0x39, 0x69, 0x0d, 0x5b, 0x76, 0x27, 0x88,
	0xe9, 0x33, 0x38, 0xb4, 0x64, 0x6c, 0x2a, 0x2a, 0xae, 0x42, 0x25, 0xbe, 0xd3, 0x3a, 0x75, 0xcd,
	0xd9, 0x36, 0x80, 0xe7, 0xfa, 0x7c, 0x24, 0xd6, 0xdc, 0xde, 0x17, 0x02, 0x6d, 0x2d, 0x73, 0x30,
	0x61, 0x3c, 0xc5, 0x17, 0x2b, 0x07, 0x2f, 0x15, 0x53, 0x55, 0x49, 0x9f, 0x82, 0xf3, 0x5b, 0x83,
	0x3f, 0x84, 0xde, 0xdb, 0x14, 0xaa, 0x8b, 0x83, 0x98, 0x06, 0x00, 0x22, 0x8f, 0xc3, 0x52, 0xd3,
	0x68, 0xb5, 0xb7, 0x1f, 0x9f, 0xfa, 0x3b, 0x1e, 0xd6, 0x1f, 0x18, 0x2b, 0xe6, 0xe2, 0x61, 0x4b,
	0xe4, 0xb1, 0xd5, 0x10, 0x00, 0x70, 0x9c, 0xad, 0xa9, 0xea, 0x7f, 0x4e, 0xc5, 0x71, 0x66, 0x96,
	0xde, 0x57, 0x02, 0x07, 0xda, 0xe9, 0x45, 0x35, 0xce, 0xb3, 0x72, 0xa2, 0xd5, 0xfe, 0xbd, 0xc9,
	0xbb, 0xb0, 0x2f, 0x66, 0x1c, 0xa5, 0x4d, 0xc3, 0x7c, 0x6c, 0x05, 0x55, 0xdf, 0x0e, 0xaa, 0x0d,
	0x4d, 0xc5, 0x64, 0x96, 0x24, 0x4e, 0x43, 0x73, 0xdb, 0x2f, 0x4a, 0xa1, 0xc1, 0xd9, 0x14, 0x9d,
	0x7d, 0x5d, 0xa0, 0xd7, 0xb4, 0x0f, 0xad, 0x22, 0xaf, 0xd2, 0x50, 0xcd, 0x0b, 0x74, 0x9a, 0xda,
	0xf9, 0xc3, 0x9d, 0xce, 0x2f, 0xf2, 0x2a, 0x1d, 0xcd, 0x0b, 0x1c, 0xde, 0x28, 0xec, 0xca, 0x7b,
	0x4b, 0xe0, 0xd0, 0xa4, 0xcb, 0x78, 0x84, 0xf9, 0x66, 0x2b, 0xfe, 0xdf, 0x1e, 0x7c, 0x00, 0xb7,
	0x22, 0x7d, 0x49, 0x28, 0x91, 0x95, 0x82, 0x5b, 0xf3, 0x37, 0xcd, 0xe6, 0x50, 0xef, 0x79, 0x6f,
	0x08, 0x38, 0x5a, 0x4f, 0x1f, 0xd3, 0x8c, 0xff, 0x93, 0x9c, 0x5d, 0xc1, 0xed, 0xed, 0x08, 0xce,
	0xfb, 0x40, 0xe0, 0xc8, 0xbc, 0x89, 0x98, 0x16, 0x39, 0x2a, 0xbc, 0x16, 0x19, 0xf4, 0xec, 0x97,
	0x6b, 0x24, 0xc6, 0xf6, 0x67, 0x3d, 0xd8, 0x2c, 0x91, 0x18, 0xf7, 0x83, 0x8f, 0x0b, 0x97, 0x5c,
	0x2d, 0x5c, 0xf2, 0x79, 0xe1, 0x92, 0x77, 0x4b, 0xb7, 0x76, 0xb5, 0x74, 0x6b, 0x9f, 0x96, 0x6e,
	0xed, 0x55, 0x37, 0xcd, 0xd4, 0xa4, 0x1a, 0xfb, 0x91, 0x98, 0x76, 0x7f, 0x6e, 0x8f, 0x6e, 0xd4,
	0xc3, 0x33, 0x33, 0xad, 0x5e, 0xdb, 0x79, 0xb5, 0x6a, 0xa5, 0x72, 0xdc, 0xd4, 0x03, 0xea, 0xc9,
	0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xbe, 0xa0, 0x1c, 0x07, 0x05, 0x00, 0x00,
}

func (m *EventEnergyTransferCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEnergyTransferCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEnergyTransferCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnergyAmountToTransfer != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyAmountToTransfer))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChargerId) > 0 {
		i -= len(m.ChargerId)
		copy(dAtA[i:], m.ChargerId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChargerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EnergyTransferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventChangeOfferStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChangeOfferStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChangeOfferStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewStatus != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NewStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.OldStatus != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.OldStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.EnergyTransferOfferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferOfferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventPublishOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPublishOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPublishOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlugType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PlugType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Tariff != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tariff))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChargerId) > 0 {
		i -= len(m.ChargerId)
		copy(dAtA[i:], m.ChargerId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChargerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.EnergyTransferOfferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferOfferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelEnergyTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelEnergyTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelEnergyTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChargerId) > 0 {
		i -= len(m.ChargerId)
		copy(dAtA[i:], m.ChargerId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChargerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EnergyTransferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventBeginEnergyTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBeginEnergyTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBeginEnergyTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnergyTransferOfferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferOfferId))
		i--
		dAtA[i] = 0x10
	}
	if m.EnergyTransferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteEnergyTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteEnergyTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteEnergyTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnergyTransferred != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferred))
		i--
		dAtA[i] = 0x18
	}
	if m.EnergyTransferOfferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferOfferId))
		i--
		dAtA[i] = 0x10
	}
	if m.EnergyTransferId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EnergyTransferId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventEnergyTransferCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnergyTransferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferId))
	}
	l = len(m.ChargerId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.EnergyAmountToTransfer != 0 {
		n += 1 + sovEvent(uint64(m.EnergyAmountToTransfer))
	}
	return n
}

func (m *EventChangeOfferStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnergyTransferOfferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferOfferId))
	}
	if m.OldStatus != 0 {
		n += 1 + sovEvent(uint64(m.OldStatus))
	}
	if m.NewStatus != 0 {
		n += 1 + sovEvent(uint64(m.NewStatus))
	}
	return n
}

func (m *EventPublishOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnergyTransferOfferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferOfferId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChargerId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Tariff != 0 {
		n += 1 + sovEvent(uint64(m.Tariff))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.PlugType != 0 {
		n += 1 + sovEvent(uint64(m.PlugType))
	}
	return n
}

func (m *EventCancelEnergyTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnergyTransferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferId))
	}
	l = len(m.ChargerId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventBeginEnergyTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnergyTransferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferId))
	}
	if m.EnergyTransferOfferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferOfferId))
	}
	return n
}

func (m *EventCompleteEnergyTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnergyTransferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferId))
	}
	if m.EnergyTransferOfferId != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferOfferId))
	}
	if m.EnergyTransferred != 0 {
		n += 1 + sovEvent(uint64(m.EnergyTransferred))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventEnergyTransferCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEnergyTransferCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEnergyTransferCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferId", wireType)
			}
			m.EnergyTransferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyAmountToTransfer", wireType)
			}
			m.EnergyAmountToTransfer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyAmountToTransfer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChangeOfferStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChangeOfferStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChangeOfferStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferOfferId", wireType)
			}
			m.EnergyTransferOfferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferOfferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldStatus", wireType)
			}
			m.OldStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldStatus |= ChargerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			m.NewStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewStatus |= ChargerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPublishOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPublishOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPublishOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferOfferId", wireType)
			}
			m.EnergyTransferOfferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferOfferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tariff", wireType)
			}
			m.Tariff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tariff |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlugType", wireType)
			}
			m.PlugType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlugType |= PlugType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelEnergyTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelEnergyTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelEnergyTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferId", wireType)
			}
			m.EnergyTransferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBeginEnergyTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBeginEnergyTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBeginEnergyTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferId", wireType)
			}
			m.EnergyTransferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferOfferId", wireType)
			}
			m.EnergyTransferOfferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferOfferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteEnergyTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteEnergyTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteEnergyTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferId", wireType)
			}
			m.EnergyTransferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferOfferId", wireType)
			}
			m.EnergyTransferOfferId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferOfferId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyTransferred", wireType)
			}
			m.EnergyTransferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnergyTransferred |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
