// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfetokenization/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCertificateTypeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCertificateTypeRequest) Reset()         { *m = QueryGetCertificateTypeRequest{} }
func (m *QueryGetCertificateTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateTypeRequest) ProtoMessage()    {}
func (*QueryGetCertificateTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{2}
}
func (m *QueryGetCertificateTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateTypeRequest.Merge(m, src)
}
func (m *QueryGetCertificateTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateTypeRequest proto.InternalMessageInfo

func (m *QueryGetCertificateTypeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryDeviceRequest struct {
	DeviceAddress string `protobuf:"bytes,1,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
}

func (m *QueryDeviceRequest) Reset()         { *m = QueryDeviceRequest{} }
func (m *QueryDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeviceRequest) ProtoMessage()    {}
func (*QueryDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{3}
}
func (m *QueryDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeviceRequest.Merge(m, src)
}
func (m *QueryDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeviceRequest proto.InternalMessageInfo

func (m *QueryDeviceRequest) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

type QueryDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *QueryDeviceResponse) Reset()         { *m = QueryDeviceResponse{} }
func (m *QueryDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeviceResponse) ProtoMessage()    {}
func (*QueryDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{4}
}
func (m *QueryDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeviceResponse.Merge(m, src)
}
func (m *QueryDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeviceResponse proto.InternalMessageInfo

func (m *QueryDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type QueryDeviceAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeviceAllRequest) Reset()         { *m = QueryDeviceAllRequest{} }
func (m *QueryDeviceAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeviceAllRequest) ProtoMessage()    {}
func (*QueryDeviceAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{5}
}
func (m *QueryDeviceAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeviceAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeviceAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeviceAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeviceAllRequest.Merge(m, src)
}
func (m *QueryDeviceAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeviceAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeviceAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeviceAllRequest proto.InternalMessageInfo

func (m *QueryDeviceAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDeviceAllResponse struct {
	Devices    []Device            `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeviceAllResponse) Reset()         { *m = QueryDeviceAllResponse{} }
func (m *QueryDeviceAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeviceAllResponse) ProtoMessage()    {}
func (*QueryDeviceAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{6}
}
func (m *QueryDeviceAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeviceAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeviceAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeviceAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeviceAllResponse.Merge(m, src)
}
func (m *QueryDeviceAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeviceAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeviceAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeviceAllResponse proto.InternalMessageInfo

func (m *QueryDeviceAllResponse) GetDevices() []Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *QueryDeviceAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMarketplaceCertificatesAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMarketplaceCertificatesAllRequest) Reset() {
	*m = QueryMarketplaceCertificatesAllRequest{}
}
func (m *QueryMarketplaceCertificatesAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketplaceCertificatesAllRequest) ProtoMessage()    {}
func (*QueryMarketplaceCertificatesAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{7}
}
func (m *QueryMarketplaceCertificatesAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketplaceCertificatesAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketplaceCertificatesAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketplaceCertificatesAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketplaceCertificatesAllRequest.Merge(m, src)
}
func (m *QueryMarketplaceCertificatesAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketplaceCertificatesAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketplaceCertificatesAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketplaceCertificatesAllRequest proto.InternalMessageInfo

func (m *QueryMarketplaceCertificatesAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMarketplaceCertificatesAllResponse struct {
	MarketplaceCertificates []CertificateOffer  `protobuf:"bytes,1,rep,name=marketplace_certificates,json=marketplaceCertificates,proto3" json:"marketplace_certificates"`
	Pagination              *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryMarketplaceCertificatesAllResponse) Reset() {
	*m = QueryMarketplaceCertificatesAllResponse{}
}
func (m *QueryMarketplaceCertificatesAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketplaceCertificatesAllResponse) ProtoMessage()    {}
func (*QueryMarketplaceCertificatesAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{8}
}
func (m *QueryMarketplaceCertificatesAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketplaceCertificatesAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketplaceCertificatesAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketplaceCertificatesAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketplaceCertificatesAllResponse.Merge(m, src)
}
func (m *QueryMarketplaceCertificatesAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketplaceCertificatesAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketplaceCertificatesAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketplaceCertificatesAllResponse proto.InternalMessageInfo

func (m *QueryMarketplaceCertificatesAllResponse) GetMarketplaceCertificates() []CertificateOffer {
	if m != nil {
		return m.MarketplaceCertificates
	}
	return nil
}

func (m *QueryMarketplaceCertificatesAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMarketplaceCertificateRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMarketplaceCertificateRequest) Reset()         { *m = QueryMarketplaceCertificateRequest{} }
func (m *QueryMarketplaceCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketplaceCertificateRequest) ProtoMessage()    {}
func (*QueryMarketplaceCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{9}
}
func (m *QueryMarketplaceCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketplaceCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketplaceCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketplaceCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketplaceCertificateRequest.Merge(m, src)
}
func (m *QueryMarketplaceCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketplaceCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketplaceCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketplaceCertificateRequest proto.InternalMessageInfo

func (m *QueryMarketplaceCertificateRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryMarketplaceCertificateResponse struct {
	MarketplaceCertificate *CertificateOffer `protobuf:"bytes,1,opt,name=marketplace_certificate,json=marketplaceCertificate,proto3" json:"marketplace_certificate,omitempty"`
}

func (m *QueryMarketplaceCertificateResponse) Reset()         { *m = QueryMarketplaceCertificateResponse{} }
func (m *QueryMarketplaceCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketplaceCertificateResponse) ProtoMessage()    {}
func (*QueryMarketplaceCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{10}
}
func (m *QueryMarketplaceCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketplaceCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketplaceCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketplaceCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketplaceCertificateResponse.Merge(m, src)
}
func (m *QueryMarketplaceCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketplaceCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketplaceCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketplaceCertificateResponse proto.InternalMessageInfo

func (m *QueryMarketplaceCertificateResponse) GetMarketplaceCertificate() *CertificateOffer {
	if m != nil {
		return m.MarketplaceCertificate
	}
	return nil
}

type QueryGetCertificateTypeResponse struct {
	CertificateType CertificateType `protobuf:"bytes,1,opt,name=CertificateType,proto3" json:"CertificateType"`
}

func (m *QueryGetCertificateTypeResponse) Reset()         { *m = QueryGetCertificateTypeResponse{} }
func (m *QueryGetCertificateTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateTypeResponse) ProtoMessage()    {}
func (*QueryGetCertificateTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{11}
}
func (m *QueryGetCertificateTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateTypeResponse.Merge(m, src)
}
func (m *QueryGetCertificateTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateTypeResponse proto.InternalMessageInfo

func (m *QueryGetCertificateTypeResponse) GetCertificateType() CertificateType {
	if m != nil {
		return m.CertificateType
	}
	return CertificateType{}
}

type QueryAllCertificateTypeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateTypeRequest) Reset()         { *m = QueryAllCertificateTypeRequest{} }
func (m *QueryAllCertificateTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateTypeRequest) ProtoMessage()    {}
func (*QueryAllCertificateTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{12}
}
func (m *QueryAllCertificateTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateTypeRequest.Merge(m, src)
}
func (m *QueryAllCertificateTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateTypeRequest proto.InternalMessageInfo

func (m *QueryAllCertificateTypeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCertificateTypeResponse struct {
	CertificateType []CertificateType   `protobuf:"bytes,1,rep,name=CertificateType,proto3" json:"CertificateType"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateTypeResponse) Reset()         { *m = QueryAllCertificateTypeResponse{} }
func (m *QueryAllCertificateTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateTypeResponse) ProtoMessage()    {}
func (*QueryAllCertificateTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{13}
}
func (m *QueryAllCertificateTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateTypeResponse.Merge(m, src)
}
func (m *QueryAllCertificateTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateTypeResponse proto.InternalMessageInfo

func (m *QueryAllCertificateTypeResponse) GetCertificateType() []CertificateType {
	if m != nil {
		return m.CertificateType
	}
	return nil
}

func (m *QueryAllCertificateTypeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUserDevicesRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetUserDevicesRequest) Reset()         { *m = QueryGetUserDevicesRequest{} }
func (m *QueryGetUserDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserDevicesRequest) ProtoMessage()    {}
func (*QueryGetUserDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{14}
}
func (m *QueryGetUserDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserDevicesRequest.Merge(m, src)
}
func (m *QueryGetUserDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserDevicesRequest proto.InternalMessageInfo

func (m *QueryGetUserDevicesRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetUserDevicesResponse struct {
	UserDevices UserDevices `protobuf:"bytes,1,opt,name=UserDevices,proto3" json:"UserDevices"`
}

func (m *QueryGetUserDevicesResponse) Reset()         { *m = QueryGetUserDevicesResponse{} }
func (m *QueryGetUserDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserDevicesResponse) ProtoMessage()    {}
func (*QueryGetUserDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{15}
}
func (m *QueryGetUserDevicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserDevicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserDevicesResponse.Merge(m, src)
}
func (m *QueryGetUserDevicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserDevicesResponse proto.InternalMessageInfo

func (m *QueryGetUserDevicesResponse) GetUserDevices() UserDevices {
	if m != nil {
		return m.UserDevices
	}
	return UserDevices{}
}

type QueryAllUserDevicesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserDevicesRequest) Reset()         { *m = QueryAllUserDevicesRequest{} }
func (m *QueryAllUserDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserDevicesRequest) ProtoMessage()    {}
func (*QueryAllUserDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{16}
}
func (m *QueryAllUserDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserDevicesRequest.Merge(m, src)
}
func (m *QueryAllUserDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserDevicesRequest proto.InternalMessageInfo

func (m *QueryAllUserDevicesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserDevicesResponse struct {
	UserDevices []UserDevices       `protobuf:"bytes,1,rep,name=UserDevices,proto3" json:"UserDevices"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserDevicesResponse) Reset()         { *m = QueryAllUserDevicesResponse{} }
func (m *QueryAllUserDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserDevicesResponse) ProtoMessage()    {}
func (*QueryAllUserDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{17}
}
func (m *QueryAllUserDevicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserDevicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserDevicesResponse.Merge(m, src)
}
func (m *QueryAllUserDevicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserDevicesResponse proto.InternalMessageInfo

func (m *QueryAllUserDevicesResponse) GetUserDevices() []UserDevices {
	if m != nil {
		return m.UserDevices
	}
	return nil
}

func (m *QueryAllUserDevicesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUserCertificatesRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetUserCertificatesRequest) Reset()         { *m = QueryGetUserCertificatesRequest{} }
func (m *QueryGetUserCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserCertificatesRequest) ProtoMessage()    {}
func (*QueryGetUserCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{18}
}
func (m *QueryGetUserCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserCertificatesRequest.Merge(m, src)
}
func (m *QueryGetUserCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetUserCertificatesRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetUserCertificatesResponse struct {
	UserCertificates UserCertificates `protobuf:"bytes,1,opt,name=UserCertificates,proto3" json:"UserCertificates"`
}

func (m *QueryGetUserCertificatesResponse) Reset()         { *m = QueryGetUserCertificatesResponse{} }
func (m *QueryGetUserCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserCertificatesResponse) ProtoMessage()    {}
func (*QueryGetUserCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{19}
}
func (m *QueryGetUserCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserCertificatesResponse.Merge(m, src)
}
func (m *QueryGetUserCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetUserCertificatesResponse) GetUserCertificates() UserCertificates {
	if m != nil {
		return m.UserCertificates
	}
	return UserCertificates{}
}

type QueryAllUserCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserCertificatesRequest) Reset()         { *m = QueryAllUserCertificatesRequest{} }
func (m *QueryAllUserCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserCertificatesRequest) ProtoMessage()    {}
func (*QueryAllUserCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{20}
}
func (m *QueryAllUserCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserCertificatesRequest.Merge(m, src)
}
func (m *QueryAllUserCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllUserCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserCertificatesResponse struct {
	UserCertificates []UserCertificates  `protobuf:"bytes,1,rep,name=UserCertificates,proto3" json:"UserCertificates"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserCertificatesResponse) Reset()         { *m = QueryAllUserCertificatesResponse{} }
func (m *QueryAllUserCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserCertificatesResponse) ProtoMessage()    {}
func (*QueryAllUserCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8ac351f8667968, []int{21}
}
func (m *QueryAllUserCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserCertificatesResponse.Merge(m, src)
}
func (m *QueryAllUserCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllUserCertificatesResponse) GetUserCertificates() []UserCertificates {
	if m != nil {
		return m.UserCertificates
	}
	return nil
}

func (m *QueryAllUserCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryParamsResponse")
	proto.RegisterType((*QueryGetCertificateTypeRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryGetCertificateTypeRequest")
	proto.RegisterType((*QueryDeviceRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryDeviceRequest")
	proto.RegisterType((*QueryDeviceResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryDeviceResponse")
	proto.RegisterType((*QueryDeviceAllRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryDeviceAllRequest")
	proto.RegisterType((*QueryDeviceAllResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryDeviceAllResponse")
	proto.RegisterType((*QueryMarketplaceCertificatesAllRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryMarketplaceCertificatesAllRequest")
	proto.RegisterType((*QueryMarketplaceCertificatesAllResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryMarketplaceCertificatesAllResponse")
	proto.RegisterType((*QueryMarketplaceCertificateRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryMarketplaceCertificateRequest")
	proto.RegisterType((*QueryMarketplaceCertificateResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryMarketplaceCertificateResponse")
	proto.RegisterType((*QueryGetCertificateTypeResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryGetCertificateTypeResponse")
	proto.RegisterType((*QueryAllCertificateTypeRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryAllCertificateTypeRequest")
	proto.RegisterType((*QueryAllCertificateTypeResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryAllCertificateTypeResponse")
	proto.RegisterType((*QueryGetUserDevicesRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryGetUserDevicesRequest")
	proto.RegisterType((*QueryGetUserDevicesResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryGetUserDevicesResponse")
	proto.RegisterType((*QueryAllUserDevicesRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryAllUserDevicesRequest")
	proto.RegisterType((*QueryAllUserDevicesResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryAllUserDevicesResponse")
	proto.RegisterType((*QueryGetUserCertificatesRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryGetUserCertificatesRequest")
	proto.RegisterType((*QueryGetUserCertificatesResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryGetUserCertificatesResponse")
	proto.RegisterType((*QueryAllUserCertificatesRequest)(nil), "chain4energy.c4echain.cfetokenization.QueryAllUserCertificatesRequest")
	proto.RegisterType((*QueryAllUserCertificatesResponse)(nil), "chain4energy.c4echain.cfetokenization.QueryAllUserCertificatesResponse")
}

func init() {
	proto.RegisterFile("c4echain/cfetokenization/query.proto", fileDescriptor_5f8ac351f8667968)
}

var fileDescriptor_5f8ac351f8667968 = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0x4d, 0x6c, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x49, 0x1b, 0xd4, 0x57, 0x11, 0xd0, 0x34, 0xa4, 0xd1, 0x82, 0xdc, 0x30, 0x25,
	0x69, 0x68, 0xc9, 0x6e, 0xe2, 0x84, 0x84, 0xb4, 0x80, 0xe4, 0x40, 0x13, 0x01, 0x0a, 0x14, 0x03,
	0x97, 0x0a, 0x29, 0x5a, 0xdb, 0x63, 0x67, 0xd5, 0xb5, 0x77, 0xbb, 0xbb, 0x29, 0x35, 0x51, 0x2e,
	0xdc, 0x38, 0x20, 0x21, 0x71, 0xe0, 0xce, 0x8d, 0x1b, 0x12, 0x37, 0x8e, 0x5c, 0xe8, 0x81, 0x43,
	0x05, 0x12, 0x1f, 0x42, 0x42, 0x55, 0xc2, 0x11, 0x89, 0x23, 0xd7, 0x6a, 0x67, 0xde, 0xd6, 0xeb,
	0xb5, 0xc7, 0xf6, 0xda, 0xdb, 0x5b, 0xb2, 0x9e, 0xf7, 0xde, 0xff, 0xf7, 0xde, 0xec, 0x9b, 0x79,
	0x0b, 0x2f, 0x94, 0xd7, 0x78, 0x79, 0xdf, 0xb4, 0x1a, 0x46, 0xb9, 0xca, 0x03, 0xe7, 0x16, 0x6f,
	0x58, 0x9f, 0x9a, 0x81, 0xe5, 0x34, 0x8c, 0xdb, 0x07, 0xdc, 0x6b, 0xea, 0xae, 0xe7, 0x04, 0x0e,
	0x9d, 0x17, 0x4b, 0xd6, 0x78, 0x83, 0x7b, 0xb5, 0xa6, 0x1e, 0x99, 0xe8, 0x09, 0x13, 0x6d, 0xba,
	0xe6, 0xd4, 0x1c, 0x61, 0x61, 0x84, 0x7f, 0x49, 0x63, 0xed, 0xb9, 0x9a, 0xe3, 0xd4, 0x6c, 0x6e,
	0x98, 0xae, 0x65, 0x98, 0x8d, 0x86, 0x13, 0x88, 0xc5, 0x3e, 0xfe, 0x7a, 0xb9, 0xec, 0xf8, 0x75,
	0xc7, 0x37, 0x4a, 0xa6, 0xcf, 0x65, 0x4c, 0xe3, 0xce, 0x4a, 0x89, 0x07, 0xe6, 0x8a, 0xe1, 0x9a,
	0x35, 0xab, 0x21, 0x16, 0xe3, 0xda, 0x79, 0xa5, 0x58, 0xd7, 0xf4, 0xcc, 0x7a, 0xe4, 0xd2, 0x50,
	0x2e, 0x2b, 0x73, 0x2f, 0xb0, 0xaa, 0x56, 0xd9, 0x0c, 0xf8, 0x5e, 0xd0, 0x74, 0x39, 0x1a, 0x5c,
	0x51, 0x1a, 0x1c, 0xf8, 0xdc, 0xdb, 0xab, 0xf0, 0x3b, 0x56, 0x99, 0x47, 0xde, 0x97, 0x7b, 0x2f,
	0x8e, 0x85, 0x40, 0x0b, 0x36, 0x0d, 0xf4, 0xfd, 0x10, 0xec, 0x86, 0x10, 0x59, 0xe4, 0xb7, 0x0f,
	0xb8, 0x1f, 0xb0, 0x12, 0x9c, 0x6b, 0x7b, 0xea, 0xbb, 0x4e, 0xc3, 0xe7, 0xf4, 0x1d, 0x98, 0x94,
	0x30, 0xb3, 0x64, 0x8e, 0x2c, 0x9e, 0xcd, 0x2f, 0xe9, 0x03, 0xe5, 0x5e, 0x97, 0x6e, 0xb6, 0x4e,
	0xdd, 0xfb, 0xfb, 0xc2, 0x58, 0x11, 0x5d, 0xb0, 0x65, 0xc8, 0x89, 0x18, 0x3b, 0x3c, 0x78, 0xa3,
	0xa5, 0xeb, 0xc3, 0xa6, 0xcb, 0x51, 0x05, 0x9d, 0x82, 0x71, 0xab, 0x22, 0x42, 0x9d, 0x2a, 0x8e,
	0x5b, 0x15, 0x76, 0x0d, 0xb5, 0xbe, 0x29, 0x98, 0xa3, 0x55, 0xf3, 0x30, 0x25, 0x93, 0xb0, 0x67,
	0x56, 0x2a, 0x1e, 0xf7, 0xa5, 0xb8, 0x33, 0xc5, 0x27, 0xe5, 0xd3, 0x82, 0x7c, 0xc8, 0x3e, 0x46,
	0xa4, 0xc8, 0x18, 0x91, 0xae, 0xc3, 0xa4, 0x5c, 0x97, 0x12, 0x09, 0xdd, 0xa0, 0x31, 0xdb, 0x83,
	0x67, 0x62, 0xde, 0x0b, 0xb6, 0x1d, 0xa9, 0xdb, 0x06, 0x68, 0x6d, 0x15, 0x8c, 0xb1, 0xa0, 0xcb,
	0x7d, 0xa5, 0x87, 0xfb, 0x4a, 0x97, 0x7b, 0x19, 0xf7, 0x95, 0x7e, 0xc3, 0xac, 0x45, 0x64, 0xc5,
	0x98, 0x25, 0xfb, 0x8e, 0xc0, 0x4c, 0x32, 0x02, 0x22, 0xec, 0xc2, 0x13, 0xb8, 0x0b, 0x66, 0xc9,
	0xdc, 0x44, 0x6a, 0x06, 0x2c, 0x4b, 0xe4, 0x83, 0xee, 0xb4, 0x29, 0x1e, 0x17, 0x8a, 0x2f, 0xf5,
	0x55, 0x2c, 0xb5, 0xb4, 0x49, 0x76, 0x61, 0x41, 0x28, 0xde, 0x35, 0xbd, 0x5b, 0x3c, 0x70, 0x6d,
	0xb3, 0xcc, 0x63, 0x85, 0xf6, 0x1f, 0x43, 0x92, 0xfe, 0x25, 0x70, 0xa9, 0x6f, 0x48, 0xcc, 0xda,
	0x5d, 0x98, 0xad, 0xb7, 0x56, 0xb5, 0xbd, 0x1a, 0x98, 0xc6, 0x8d, 0x01, 0xd3, 0x18, 0x8b, 0xf0,
	0x5e, 0xb5, 0xca, 0x3d, 0x4c, 0xe8, 0xf9, 0x7a, 0x77, 0x11, 0xd9, 0x25, 0x78, 0x0d, 0x58, 0x0f,
	0x5a, 0xd5, 0x5b, 0xf4, 0x35, 0x81, 0x8b, 0x3d, 0xcd, 0x30, 0x41, 0x2e, 0x9c, 0x57, 0x24, 0x08,
	0x2b, 0x34, 0x6c, 0x7e, 0x8a, 0x33, 0xdd, 0x33, 0xc3, 0x3e, 0x27, 0x70, 0x41, 0xd9, 0x12, 0x50,
	0x55, 0x15, 0x9e, 0x4a, 0xfc, 0x84, 0x6a, 0xd6, 0xd3, 0xab, 0x09, 0xad, 0xb1, 0x58, 0x49, 0xa7,
	0x6c, 0x1f, 0xbb, 0x53, 0xc1, 0xb6, 0x15, 0xdd, 0x29, 0xab, 0x4d, 0xfb, 0x4b, 0x44, 0xdd, 0x2d,
	0x54, 0x2f, 0xea, 0x89, 0xcc, 0xa9, 0xb3, 0xdb, 0x9a, 0x79, 0xd0, 0xa2, 0x4a, 0x7e, 0xe4, 0x73,
	0x4f, 0x76, 0x9a, 0xe8, 0x78, 0xa1, 0xd3, 0x70, 0xda, 0xf9, 0xa4, 0xc1, 0x3d, 0xec, 0xd4, 0xf2,
	0x1f, 0xd6, 0x84, 0x67, 0xbb, 0xda, 0x60, 0x0e, 0x6e, 0xc2, 0xd9, 0xd8, 0x63, 0x4c, 0x78, 0x7e,
	0x40, 0xfe, 0x98, 0x25, 0xb2, 0xc7, 0x9d, 0xb1, 0x0a, 0xca, 0x2d, 0xd8, 0x76, 0x17, 0xb9, 0x59,
	0x55, 0xfa, 0x47, 0x82, 0x84, 0xc9, 0x30, 0x2a, 0xc2, 0x89, 0xcc, 0x08, 0xb3, 0xab, 0xec, 0x46,
	0xeb, 0x1d, 0x0d, 0xfd, 0xc7, 0x3b, 0x5b, 0xef, 0xf2, 0x7e, 0x41, 0x60, 0x4e, 0x6d, 0x89, 0x29,
	0xb0, 0xe0, 0xe9, 0xe4, 0x6f, 0x29, 0xbb, 0x4d, 0xd2, 0x1c, 0x93, 0xd1, 0xe1, 0x96, 0x59, 0xad,
	0xd7, 0x4e, 0x05, 0x92, 0x55, 0xe1, 0x7f, 0x8b, 0xd0, 0xbb, 0xc6, 0xea, 0x89, 0x3e, 0xf1, 0x18,
	0xd0, 0x33, 0xdb, 0x0c, 0xf9, 0x6f, 0x28, 0x9c, 0x16, 0x60, 0xf4, 0x5b, 0x02, 0x93, 0xf2, 0x9a,
	0x47, 0x37, 0x07, 0x94, 0xdb, 0x79, 0xef, 0xd4, 0xae, 0x0e, 0x63, 0x2a, 0x75, 0xb1, 0xc5, 0xcf,
	0x7e, 0xfd, 0xe7, 0xab, 0x71, 0x46, 0xe7, 0xc2, 0x2b, 0xb6, 0xd1, 0x76, 0xf9, 0x6d, 0x5d, 0xda,
	0x85, 0xc0, 0x3f, 0x49, 0x47, 0x3b, 0xa5, 0xd7, 0xd3, 0x44, 0x56, 0x5e, 0x59, 0xb5, 0xed, 0x51,
	0xdd, 0x20, 0xcc, 0x86, 0x80, 0x59, 0xa1, 0x86, 0x1a, 0x26, 0x39, 0x2f, 0x18, 0x87, 0x56, 0xe5,
	0x88, 0xfe, 0x4e, 0x80, 0x26, 0x9c, 0x16, 0x6c, 0x3b, 0x1d, 0x9e, 0xf2, 0xcc, 0x4b, 0x87, 0xa7,
	0x3e, 0xcf, 0x58, 0x5e, 0xe0, 0xbd, 0x44, 0x2f, 0x0f, 0x8e, 0x47, 0x7f, 0x26, 0x6d, 0xed, 0x91,
	0x16, 0x52, 0xa6, 0xba, 0xb3, 0xb1, 0x6b, 0x5b, 0xa3, 0xb8, 0x40, 0x94, 0x75, 0x81, 0xb2, 0x4c,
	0x75, 0x35, 0x4a, 0x7c, 0x50, 0x33, 0x0e, 0x45, 0x37, 0x3c, 0xa2, 0x3f, 0x11, 0x98, 0x8a, 0xf9,
	0x0b, 0x8b, 0x54, 0x48, 0x99, 0xdd, 0x51, 0x89, 0xba, 0x1f, 0x43, 0x4c, 0x17, 0x44, 0x8b, 0x74,
	0x61, 0x30, 0x22, 0xfa, 0x80, 0x74, 0x76, 0x2e, 0xba, 0x3d, 0x44, 0x6a, 0xbb, 0xb4, 0x60, 0x6d,
	0x67, 0x64, 0x3f, 0x48, 0x75, 0x4d, 0x50, 0xbd, 0x4c, 0x57, 0xfb, 0x50, 0xc5, 0x07, 0x81, 0x47,
	0xc5, 0xfa, 0x8b, 0xc0, 0xb9, 0xa4, 0xe7, 0xb0, 0x62, 0xdb, 0x43, 0xa4, 0x7b, 0x64, 0xca, 0x1e,
	0x87, 0x08, 0x5b, 0x15, 0x94, 0x4b, 0xf4, 0x4a, 0x0a, 0x4a, 0xfa, 0x03, 0x81, 0x49, 0xb9, 0x09,
	0xd2, 0xf5, 0xee, 0xb6, 0x39, 0x3c, 0x5d, 0xef, 0x6e, 0x9f, 0xc2, 0xd9, 0xa6, 0x90, 0xbd, 0x4a,
	0x57, 0xd4, 0xb2, 0xe5, 0x6e, 0x33, 0x0e, 0xdb, 0x67, 0xfd, 0x23, 0xfa, 0x3d, 0x81, 0x33, 0x8f,
	0x66, 0x62, 0xfa, 0x6a, 0x7a, 0x11, 0xad, 0x39, 0x54, 0x7b, 0x6d, 0x48, 0x6b, 0xa4, 0x78, 0x51,
	0x50, 0x5c, 0xa4, 0xcf, 0xf7, 0xa3, 0xf0, 0xe9, 0xff, 0x04, 0x34, 0xf5, 0x90, 0x4a, 0x77, 0xd3,
	0x08, 0xe9, 0x3b, 0x5f, 0x6b, 0xef, 0x66, 0xe5, 0x0e, 0x41, 0xaf, 0x0a, 0xd0, 0x35, 0x9a, 0x57,
	0x83, 0xaa, 0x66, 0x6b, 0xfa, 0x1f, 0x81, 0x99, 0xee, 0x21, 0xe8, 0x5b, 0xa3, 0xcb, 0x8c, 0x88,
	0xdf, 0xce, 0xc2, 0x15, 0xd2, 0xbe, 0x2e, 0x68, 0x5f, 0xa1, 0xeb, 0xa9, 0x69, 0xc5, 0x91, 0xbc,
	0xf5, 0xc1, 0xbd, 0xe3, 0x1c, 0xb9, 0x7f, 0x9c, 0x23, 0x0f, 0x8e, 0x73, 0xe4, 0xcb, 0x93, 0xdc,
	0xd8, 0xfd, 0x93, 0xdc, 0xd8, 0x1f, 0x27, 0xb9, 0xb1, 0x9b, 0x9b, 0x35, 0x2b, 0xd8, 0x3f, 0x28,
	0xe9, 0x65, 0xa7, 0x6e, 0xc4, 0xf5, 0x86, 0x81, 0x96, 0xe4, 0x77, 0xbc, 0xbb, 0x1d, 0x5f, 0xf2,
	0xc2, 0xc3, 0xd0, 0x2f, 0x4d, 0x8a, 0xcf, 0x77, 0xab, 0x0f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xee,
	0xfe, 0x56, 0xcf, 0x24, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of CertificateType items.
	CertificateType(ctx context.Context, in *QueryGetCertificateTypeRequest, opts ...grpc.CallOption) (*QueryGetCertificateTypeResponse, error)
	CertificateTypeAll(ctx context.Context, in *QueryAllCertificateTypeRequest, opts ...grpc.CallOption) (*QueryAllCertificateTypeResponse, error)
	// Queries a list of UserDevices items.
	UserDevices(ctx context.Context, in *QueryGetUserDevicesRequest, opts ...grpc.CallOption) (*QueryGetUserDevicesResponse, error)
	UserDevicesAll(ctx context.Context, in *QueryAllUserDevicesRequest, opts ...grpc.CallOption) (*QueryAllUserDevicesResponse, error)
	// Queries a list of UserCertificates items.
	UserCertificates(ctx context.Context, in *QueryGetUserCertificatesRequest, opts ...grpc.CallOption) (*QueryGetUserCertificatesResponse, error)
	UserCertificatesAll(ctx context.Context, in *QueryAllUserCertificatesRequest, opts ...grpc.CallOption) (*QueryAllUserCertificatesResponse, error)
	Device(ctx context.Context, in *QueryDeviceRequest, opts ...grpc.CallOption) (*QueryDeviceResponse, error)
	DeviceAll(ctx context.Context, in *QueryDeviceAllRequest, opts ...grpc.CallOption) (*QueryDeviceAllResponse, error)
	MarketplaceCertificatesAll(ctx context.Context, in *QueryMarketplaceCertificatesAllRequest, opts ...grpc.CallOption) (*QueryMarketplaceCertificatesAllResponse, error)
	MarketplaceCertificate(ctx context.Context, in *QueryMarketplaceCertificateRequest, opts ...grpc.CallOption) (*QueryMarketplaceCertificateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CertificateType(ctx context.Context, in *QueryGetCertificateTypeRequest, opts ...grpc.CallOption) (*QueryGetCertificateTypeResponse, error) {
	out := new(QueryGetCertificateTypeResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/CertificateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CertificateTypeAll(ctx context.Context, in *QueryAllCertificateTypeRequest, opts ...grpc.CallOption) (*QueryAllCertificateTypeResponse, error) {
	out := new(QueryAllCertificateTypeResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/CertificateTypeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDevices(ctx context.Context, in *QueryGetUserDevicesRequest, opts ...grpc.CallOption) (*QueryGetUserDevicesResponse, error) {
	out := new(QueryGetUserDevicesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/UserDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDevicesAll(ctx context.Context, in *QueryAllUserDevicesRequest, opts ...grpc.CallOption) (*QueryAllUserDevicesResponse, error) {
	out := new(QueryAllUserDevicesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/UserDevicesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserCertificates(ctx context.Context, in *QueryGetUserCertificatesRequest, opts ...grpc.CallOption) (*QueryGetUserCertificatesResponse, error) {
	out := new(QueryGetUserCertificatesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/UserCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserCertificatesAll(ctx context.Context, in *QueryAllUserCertificatesRequest, opts ...grpc.CallOption) (*QueryAllUserCertificatesResponse, error) {
	out := new(QueryAllUserCertificatesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/UserCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Device(ctx context.Context, in *QueryDeviceRequest, opts ...grpc.CallOption) (*QueryDeviceResponse, error) {
	out := new(QueryDeviceResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/Device", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DeviceAll(ctx context.Context, in *QueryDeviceAllRequest, opts ...grpc.CallOption) (*QueryDeviceAllResponse, error) {
	out := new(QueryDeviceAllResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/DeviceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketplaceCertificatesAll(ctx context.Context, in *QueryMarketplaceCertificatesAllRequest, opts ...grpc.CallOption) (*QueryMarketplaceCertificatesAllResponse, error) {
	out := new(QueryMarketplaceCertificatesAllResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/MarketplaceCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketplaceCertificate(ctx context.Context, in *QueryMarketplaceCertificateRequest, opts ...grpc.CallOption) (*QueryMarketplaceCertificateResponse, error) {
	out := new(QueryMarketplaceCertificateResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Query/MarketplaceCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of CertificateType items.
	CertificateType(context.Context, *QueryGetCertificateTypeRequest) (*QueryGetCertificateTypeResponse, error)
	CertificateTypeAll(context.Context, *QueryAllCertificateTypeRequest) (*QueryAllCertificateTypeResponse, error)
	// Queries a list of UserDevices items.
	UserDevices(context.Context, *QueryGetUserDevicesRequest) (*QueryGetUserDevicesResponse, error)
	UserDevicesAll(context.Context, *QueryAllUserDevicesRequest) (*QueryAllUserDevicesResponse, error)
	// Queries a list of UserCertificates items.
	UserCertificates(context.Context, *QueryGetUserCertificatesRequest) (*QueryGetUserCertificatesResponse, error)
	UserCertificatesAll(context.Context, *QueryAllUserCertificatesRequest) (*QueryAllUserCertificatesResponse, error)
	Device(context.Context, *QueryDeviceRequest) (*QueryDeviceResponse, error)
	DeviceAll(context.Context, *QueryDeviceAllRequest) (*QueryDeviceAllResponse, error)
	MarketplaceCertificatesAll(context.Context, *QueryMarketplaceCertificatesAllRequest) (*QueryMarketplaceCertificatesAllResponse, error)
	MarketplaceCertificate(context.Context, *QueryMarketplaceCertificateRequest) (*QueryMarketplaceCertificateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CertificateType(ctx context.Context, req *QueryGetCertificateTypeRequest) (*QueryGetCertificateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateType not implemented")
}
func (*UnimplementedQueryServer) CertificateTypeAll(ctx context.Context, req *QueryAllCertificateTypeRequest) (*QueryAllCertificateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateTypeAll not implemented")
}
func (*UnimplementedQueryServer) UserDevices(ctx context.Context, req *QueryGetUserDevicesRequest) (*QueryGetUserDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDevices not implemented")
}
func (*UnimplementedQueryServer) UserDevicesAll(ctx context.Context, req *QueryAllUserDevicesRequest) (*QueryAllUserDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDevicesAll not implemented")
}
func (*UnimplementedQueryServer) UserCertificates(ctx context.Context, req *QueryGetUserCertificatesRequest) (*QueryGetUserCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCertificates not implemented")
}
func (*UnimplementedQueryServer) UserCertificatesAll(ctx context.Context, req *QueryAllUserCertificatesRequest) (*QueryAllUserCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) Device(ctx context.Context, req *QueryDeviceRequest) (*QueryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Device not implemented")
}
func (*UnimplementedQueryServer) DeviceAll(ctx context.Context, req *QueryDeviceAllRequest) (*QueryDeviceAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceAll not implemented")
}
func (*UnimplementedQueryServer) MarketplaceCertificatesAll(ctx context.Context, req *QueryMarketplaceCertificatesAllRequest) (*QueryMarketplaceCertificatesAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketplaceCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) MarketplaceCertificate(ctx context.Context, req *QueryMarketplaceCertificateRequest) (*QueryMarketplaceCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketplaceCertificate not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CertificateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCertificateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/CertificateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificateType(ctx, req.(*QueryGetCertificateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CertificateTypeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCertificateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificateTypeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/CertificateTypeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificateTypeAll(ctx, req.(*QueryAllCertificateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/UserDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDevices(ctx, req.(*QueryGetUserDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDevicesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDevicesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/UserDevicesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDevicesAll(ctx, req.(*QueryAllUserDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/UserCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserCertificates(ctx, req.(*QueryGetUserCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/UserCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserCertificatesAll(ctx, req.(*QueryAllUserCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Device_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Device(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/Device",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Device(ctx, req.(*QueryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DeviceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DeviceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/DeviceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DeviceAll(ctx, req.(*QueryDeviceAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketplaceCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketplaceCertificatesAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketplaceCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/MarketplaceCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketplaceCertificatesAll(ctx, req.(*QueryMarketplaceCertificatesAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketplaceCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketplaceCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketplaceCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Query/MarketplaceCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketplaceCertificate(ctx, req.(*QueryMarketplaceCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfetokenization.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CertificateType",
			Handler:    _Query_CertificateType_Handler,
		},
		{
			MethodName: "CertificateTypeAll",
			Handler:    _Query_CertificateTypeAll_Handler,
		},
		{
			MethodName: "UserDevices",
			Handler:    _Query_UserDevices_Handler,
		},
		{
			MethodName: "UserDevicesAll",
			Handler:    _Query_UserDevicesAll_Handler,
		},
		{
			MethodName: "UserCertificates",
			Handler:    _Query_UserCertificates_Handler,
		},
		{
			MethodName: "UserCertificatesAll",
			Handler:    _Query_UserCertificatesAll_Handler,
		},
		{
			MethodName: "Device",
			Handler:    _Query_Device_Handler,
		},
		{
			MethodName: "DeviceAll",
			Handler:    _Query_DeviceAll_Handler,
		},
		{
			MethodName: "MarketplaceCertificatesAll",
			Handler:    _Query_MarketplaceCertificatesAll_Handler,
		},
		{
			MethodName: "MarketplaceCertificate",
			Handler:    _Query_MarketplaceCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfetokenization/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeviceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeviceAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeviceAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeviceAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeviceAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeviceAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeviceAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketplaceCertificatesAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketplaceCertificatesAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketplaceCertificatesAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketplaceCertificatesAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketplaceCertificatesAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketplaceCertificatesAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCertificates) > 0 {
		for iNdEx := len(m.MarketplaceCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketplaceCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketplaceCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketplaceCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketplaceCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketplaceCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketplaceCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketplaceCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketplaceCertificate != nil {
		{
			size, err := m.MarketplaceCertificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CertificateType.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CertificateType) > 0 {
		for iNdEx := len(m.CertificateType) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CertificateType[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserDevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserDevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserDevicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserDevices.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserDevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserDevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserDevicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserDevices) > 0 {
		for iNdEx := len(m.UserDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserCertificates) > 0 {
		for iNdEx := len(m.UserCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCertificateTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeviceAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeviceAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketplaceCertificatesAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketplaceCertificatesAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketplaceCertificates) > 0 {
		for _, e := range m.MarketplaceCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketplaceCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryMarketplaceCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketplaceCertificate != nil {
		l = m.MarketplaceCertificate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificateTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CertificateType.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCertificateTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificateTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CertificateType) > 0 {
		for _, e := range m.CertificateType {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserDevicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserDevices.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserDevicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserDevices) > 0 {
		for _, e := range m.UserDevices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserCertificates) > 0 {
		for _, e := range m.UserCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &Device{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeviceAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeviceAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeviceAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeviceAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeviceAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeviceAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketplaceCertificatesAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketplaceCertificatesAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketplaceCertificatesAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketplaceCertificatesAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketplaceCertificatesAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketplaceCertificatesAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCertificates = append(m.MarketplaceCertificates, CertificateOffer{})
			if err := m.MarketplaceCertificates[len(m.MarketplaceCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketplaceCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketplaceCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketplaceCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketplaceCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketplaceCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketplaceCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketplaceCertificate == nil {
				m.MarketplaceCertificate = &CertificateOffer{}
			}
			if err := m.MarketplaceCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CertificateType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateType = append(m.CertificateType, CertificateType{})
			if err := m.CertificateType[len(m.CertificateType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserDevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserDevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserDevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserDevices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserDevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserDevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserDevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDevices = append(m.UserDevices, UserDevices{})
			if err := m.UserDevices[len(m.UserDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCertificates = append(m.UserCertificates, UserCertificates{})
			if err := m.UserCertificates[len(m.UserCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
