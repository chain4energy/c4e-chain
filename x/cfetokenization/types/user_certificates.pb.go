// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfetokenization/user_certificates.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CertificateStatus int32

const (
	CertificateStatus_UNKNOWN_CERTIFICATE_STATUS CertificateStatus = 0
	CertificateStatus_VALID                      CertificateStatus = 1
	CertificateStatus_INVALID                    CertificateStatus = 2
	CertificateStatus_BURNED                     CertificateStatus = 3
)

var CertificateStatus_name = map[int32]string{
	0: "UNKNOWN_CERTIFICATE_STATUS",
	1: "VALID",
	2: "INVALID",
	3: "BURNED",
}

var CertificateStatus_value = map[string]int32{
	"UNKNOWN_CERTIFICATE_STATUS": 0,
	"VALID":                      1,
	"INVALID":                    2,
	"BURNED":                     3,
}

func (x CertificateStatus) String() string {
	return proto.EnumName(CertificateStatus_name, int32(x))
}

func (CertificateStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a17fd18775f25ee5, []int{0}
}

type UserCertificates struct {
	Owner        string         `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Certificates []*Certificate `protobuf:"bytes,2,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (m *UserCertificates) Reset()         { *m = UserCertificates{} }
func (m *UserCertificates) String() string { return proto.CompactTextString(m) }
func (*UserCertificates) ProtoMessage()    {}
func (*UserCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_a17fd18775f25ee5, []int{0}
}
func (m *UserCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCertificates.Merge(m, src)
}
func (m *UserCertificates) XXX_Size() int {
	return m.Size()
}
func (m *UserCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_UserCertificates proto.InternalMessageInfo

func (m *UserCertificates) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UserCertificates) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type Certificate struct {
	Id                 uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CertyficateTypeId  uint64            `protobuf:"varint,2,opt,name=certyficate_type_id,json=certyficateTypeId,proto3" json:"certyficate_type_id,omitempty"`
	Power              uint64            `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	DeviceAddress      string            `protobuf:"bytes,4,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
	AllowedAuthorities []string          `protobuf:"bytes,5,rep,name=allowed_authorities,json=allowedAuthorities,proto3" json:"allowed_authorities,omitempty"`
	Authority          string            `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	CertificateStatus  CertificateStatus `protobuf:"varint,7,opt,name=certificate_status,json=certificateStatus,proto3,enum=chain4energy.c4echain.cfetokenization.CertificateStatus" json:"certificate_status,omitempty"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a17fd18775f25ee5, []int{1}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Certificate) GetCertyficateTypeId() uint64 {
	if m != nil {
		return m.CertyficateTypeId
	}
	return 0
}

func (m *Certificate) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Certificate) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *Certificate) GetAllowedAuthorities() []string {
	if m != nil {
		return m.AllowedAuthorities
	}
	return nil
}

func (m *Certificate) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *Certificate) GetCertificateStatus() CertificateStatus {
	if m != nil {
		return m.CertificateStatus
	}
	return CertificateStatus_UNKNOWN_CERTIFICATE_STATUS
}

func init() {
	proto.RegisterEnum("chain4energy.c4echain.cfetokenization.CertificateStatus", CertificateStatus_name, CertificateStatus_value)
	proto.RegisterType((*UserCertificates)(nil), "chain4energy.c4echain.cfetokenization.UserCertificates")
	proto.RegisterType((*Certificate)(nil), "chain4energy.c4echain.cfetokenization.Certificate")
}

func init() {
	proto.RegisterFile("c4echain/cfetokenization/user_certificates.proto", fileDescriptor_a17fd18775f25ee5)
}

var fileDescriptor_a17fd18775f25ee5 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x14, 0x8c, 0x9d, 0x26, 0x55, 0x5e, 0x20, 0x4a, 0xb7, 0x1c, 0x2c, 0x84, 0xac, 0xa8, 0x52, 0xa5,
	0x08, 0x09, 0x1b, 0x85, 0x1c, 0xe0, 0xe8, 0xa6, 0x41, 0xb2, 0x40, 0x46, 0x72, 0x9c, 0x56, 0xe2,
	0x62, 0xb9, 0xde, 0xd7, 0x64, 0x45, 0xf1, 0x46, 0xbb, 0x6b, 0x82, 0x39, 0xf1, 0x09, 0x7c, 0x13,
	0x27, 0x8e, 0x3d, 0x72, 0x44, 0xc9, 0x8f, 0xa0, 0xec, 0x52, 0xd5, 0xa5, 0x17, 0x38, 0xbe, 0x99,
	0x79, 0x6f, 0x3c, 0xde, 0x81, 0xe7, 0xf9, 0x18, 0xf3, 0x65, 0xc6, 0x0a, 0x3f, 0xbf, 0x44, 0xc5,
	0x3f, 0x60, 0xc1, 0xbe, 0x64, 0x8a, 0xf1, 0xc2, 0x2f, 0x25, 0x8a, 0x34, 0x47, 0xa1, 0xd8, 0x25,
	0xcb, 0x33, 0x85, 0xd2, 0x5b, 0x09, 0xae, 0x38, 0x39, 0xd6, 0xf2, 0x31, 0x16, 0x28, 0x16, 0x95,
	0x77, 0xb3, 0xee, 0xfd, 0xb5, 0x7e, 0xf4, 0xd5, 0x82, 0xfe, 0x5c, 0xa2, 0x98, 0xd4, 0x2e, 0x90,
	0x47, 0xd0, 0xe2, 0xeb, 0x02, 0x85, 0x63, 0x0d, 0xac, 0x61, 0x27, 0x36, 0x03, 0x39, 0x83, 0x07,
	0x75, 0x1f, 0xc7, 0x1e, 0x34, 0x87, 0xdd, 0xd1, 0xc8, 0xfb, 0x27, 0x23, 0xaf, 0x66, 0x10, 0xdf,
	0xb9, 0x73, 0xf4, 0xdd, 0x86, 0x6e, 0x8d, 0x25, 0x3d, 0xb0, 0x19, 0xd5, 0xd6, 0x7b, 0xb1, 0xcd,
	0x28, 0xf1, 0xe0, 0x70, 0xa7, 0xaf, 0x0c, 0x9d, 0xaa, 0x6a, 0x85, 0x29, 0xa3, 0x8e, 0xad, 0x05,
	0x07, 0x35, 0x2a, 0xa9, 0x56, 0x18, 0xd2, 0xdd, 0xd7, 0xaf, 0xf8, 0x1a, 0x85, 0xd3, 0xd4, 0x0a,
	0x33, 0x90, 0x63, 0xe8, 0x51, 0xfc, 0xc4, 0x72, 0x4c, 0x33, 0x4a, 0x05, 0x4a, 0xe9, 0xec, 0xe9,
	0x70, 0x0f, 0x0d, 0x1a, 0x18, 0x90, 0xf8, 0x70, 0x98, 0x5d, 0x5d, 0xf1, 0x35, 0xd2, 0x34, 0x2b,
	0xd5, 0x92, 0x0b, 0xa6, 0x18, 0x4a, 0xa7, 0x35, 0x68, 0x0e, 0x3b, 0x31, 0xf9, 0x43, 0x05, 0xb7,
	0x0c, 0x79, 0x02, 0x9d, 0x1b, 0x61, 0xe5, 0xb4, 0xf5, 0xc9, 0x5b, 0x80, 0x2c, 0x80, 0xd4, 0xb2,
	0xa6, 0x52, 0x65, 0xaa, 0x94, 0xce, 0xfe, 0xc0, 0x1a, 0xf6, 0x46, 0x2f, 0xff, 0xff, 0xcf, 0xcd,
	0xf4, 0xbe, 0x09, 0x7d, 0x07, 0x7a, 0x7a, 0x0e, 0x07, 0xf7, 0x74, 0xc4, 0x85, 0xc7, 0xf3, 0xe8,
	0x4d, 0xf4, 0xee, 0x3c, 0x4a, 0x27, 0xd3, 0x38, 0x09, 0x5f, 0x87, 0x93, 0x20, 0x99, 0xa6, 0xb3,
	0x24, 0x48, 0xe6, 0xb3, 0x7e, 0x83, 0x74, 0xa0, 0x75, 0x16, 0xbc, 0x0d, 0x4f, 0xfb, 0x16, 0xe9,
	0xc2, 0x7e, 0x18, 0x99, 0xc1, 0x26, 0x00, 0xed, 0x93, 0x79, 0x1c, 0x4d, 0x4f, 0xfb, 0xcd, 0x93,
	0xd9, 0x8f, 0x8d, 0x6b, 0x5d, 0x6f, 0x5c, 0xeb, 0xd7, 0xc6, 0xb5, 0xbe, 0x6d, 0xdd, 0xc6, 0xf5,
	0xd6, 0x6d, 0xfc, 0xdc, 0xba, 0x8d, 0xf7, 0xaf, 0x16, 0x4c, 0x2d, 0xcb, 0x0b, 0x2f, 0xe7, 0x1f,
	0xfd, 0x7a, 0x12, 0x3f, 0x1f, 0xe3, 0x33, 0x53, 0xd6, 0xcf, 0xf7, 0xea, 0xba, 0x7b, 0x3d, 0x79,
	0xd1, 0xd6, 0x1d, 0x7d, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x2b, 0x94, 0x9f, 0xd7, 0x02,
	0x00, 0x00,
}

func (m *UserCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserCertificates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintUserCertificates(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertificateStatus != 0 {
		i = encodeVarintUserCertificates(dAtA, i, uint64(m.CertificateStatus))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintUserCertificates(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AllowedAuthorities) > 0 {
		for iNdEx := len(m.AllowedAuthorities) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAuthorities[iNdEx])
			copy(dAtA[i:], m.AllowedAuthorities[iNdEx])
			i = encodeVarintUserCertificates(dAtA, i, uint64(len(m.AllowedAuthorities[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintUserCertificates(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Power != 0 {
		i = encodeVarintUserCertificates(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if m.CertyficateTypeId != 0 {
		i = encodeVarintUserCertificates(dAtA, i, uint64(m.CertyficateTypeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUserCertificates(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserCertificates(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserCertificates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovUserCertificates(uint64(l))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovUserCertificates(uint64(l))
		}
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserCertificates(uint64(m.Id))
	}
	if m.CertyficateTypeId != 0 {
		n += 1 + sovUserCertificates(uint64(m.CertyficateTypeId))
	}
	if m.Power != 0 {
		n += 1 + sovUserCertificates(uint64(m.Power))
	}
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovUserCertificates(uint64(l))
	}
	if len(m.AllowedAuthorities) > 0 {
		for _, s := range m.AllowedAuthorities {
			l = len(s)
			n += 1 + l + sovUserCertificates(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovUserCertificates(uint64(l))
	}
	if m.CertificateStatus != 0 {
		n += 1 + sovUserCertificates(uint64(m.CertificateStatus))
	}
	return n
}

func sovUserCertificates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserCertificates(x uint64) (n int) {
	return sovUserCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserCertificates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificate{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertyficateTypeId", wireType)
			}
			m.CertyficateTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertyficateTypeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAuthorities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAuthorities = append(m.AllowedAuthorities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateStatus", wireType)
			}
			m.CertificateStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateStatus |= CertificateStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserCertificates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserCertificates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserCertificates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserCertificates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserCertificates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserCertificates = fmt.Errorf("proto: unexpected end of group")
)
