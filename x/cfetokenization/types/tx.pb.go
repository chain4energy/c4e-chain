// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfetokenization/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAssignDeviceToUser struct {
	DeviceAddress string `protobuf:"bytes,1,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
	UserAddress   string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *MsgAssignDeviceToUser) Reset()         { *m = MsgAssignDeviceToUser{} }
func (m *MsgAssignDeviceToUser) String() string { return proto.CompactTextString(m) }
func (*MsgAssignDeviceToUser) ProtoMessage()    {}
func (*MsgAssignDeviceToUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{0}
}
func (m *MsgAssignDeviceToUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignDeviceToUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignDeviceToUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignDeviceToUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignDeviceToUser.Merge(m, src)
}
func (m *MsgAssignDeviceToUser) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignDeviceToUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignDeviceToUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignDeviceToUser proto.InternalMessageInfo

func (m *MsgAssignDeviceToUser) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *MsgAssignDeviceToUser) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgAssignDeviceToUserResponse struct {
}

func (m *MsgAssignDeviceToUserResponse) Reset()         { *m = MsgAssignDeviceToUserResponse{} }
func (m *MsgAssignDeviceToUserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignDeviceToUserResponse) ProtoMessage()    {}
func (*MsgAssignDeviceToUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{1}
}
func (m *MsgAssignDeviceToUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignDeviceToUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignDeviceToUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignDeviceToUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignDeviceToUserResponse.Merge(m, src)
}
func (m *MsgAssignDeviceToUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignDeviceToUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignDeviceToUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignDeviceToUserResponse proto.InternalMessageInfo

type MsgAcceptDevice struct {
	UserAddress    string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	DeviceAddress  string `protobuf:"bytes,2,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
	DeviceName     string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceLocation string `protobuf:"bytes,4,opt,name=device_location,json=deviceLocation,proto3" json:"device_location,omitempty"`
}

func (m *MsgAcceptDevice) Reset()         { *m = MsgAcceptDevice{} }
func (m *MsgAcceptDevice) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptDevice) ProtoMessage()    {}
func (*MsgAcceptDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{2}
}
func (m *MsgAcceptDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptDevice.Merge(m, src)
}
func (m *MsgAcceptDevice) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptDevice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptDevice proto.InternalMessageInfo

func (m *MsgAcceptDevice) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgAcceptDevice) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *MsgAcceptDevice) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *MsgAcceptDevice) GetDeviceLocation() string {
	if m != nil {
		return m.DeviceLocation
	}
	return ""
}

type MsgAcceptDeviceResponse struct {
}

func (m *MsgAcceptDeviceResponse) Reset()         { *m = MsgAcceptDeviceResponse{} }
func (m *MsgAcceptDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptDeviceResponse) ProtoMessage()    {}
func (*MsgAcceptDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{3}
}
func (m *MsgAcceptDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptDeviceResponse.Merge(m, src)
}
func (m *MsgAcceptDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptDeviceResponse proto.InternalMessageInfo

type MsgCreateUserCertificates struct {
	Owner              string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	DeviceAddress      string   `protobuf:"bytes,2,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
	Power              uint64   `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	AllowedAuthorities []string `protobuf:"bytes,4,rep,name=allowed_authorities,json=allowedAuthorities,proto3" json:"allowed_authorities,omitempty"`
	CertyficateTypeId  uint64   `protobuf:"varint,5,opt,name=certyficate_type_id,json=certyficateTypeId,proto3" json:"certyficate_type_id,omitempty"`
}

func (m *MsgCreateUserCertificates) Reset()         { *m = MsgCreateUserCertificates{} }
func (m *MsgCreateUserCertificates) String() string { return proto.CompactTextString(m) }
func (*MsgCreateUserCertificates) ProtoMessage()    {}
func (*MsgCreateUserCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{4}
}
func (m *MsgCreateUserCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateUserCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateUserCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateUserCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateUserCertificates.Merge(m, src)
}
func (m *MsgCreateUserCertificates) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateUserCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateUserCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateUserCertificates proto.InternalMessageInfo

func (m *MsgCreateUserCertificates) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateUserCertificates) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *MsgCreateUserCertificates) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *MsgCreateUserCertificates) GetAllowedAuthorities() []string {
	if m != nil {
		return m.AllowedAuthorities
	}
	return nil
}

func (m *MsgCreateUserCertificates) GetCertyficateTypeId() uint64 {
	if m != nil {
		return m.CertyficateTypeId
	}
	return 0
}

type MsgCreateUserCertificatesResponse struct {
}

func (m *MsgCreateUserCertificatesResponse) Reset()         { *m = MsgCreateUserCertificatesResponse{} }
func (m *MsgCreateUserCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateUserCertificatesResponse) ProtoMessage()    {}
func (*MsgCreateUserCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{5}
}
func (m *MsgCreateUserCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateUserCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateUserCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateUserCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateUserCertificatesResponse.Merge(m, src)
}
func (m *MsgCreateUserCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateUserCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateUserCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateUserCertificatesResponse proto.InternalMessageInfo

type MsgAddMeasurement struct {
	DeviceAddress string     `protobuf:"bytes,1,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
	Timestamp     *time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	ActivePower   uint64     `protobuf:"varint,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`
	ReversePower  uint64     `protobuf:"varint,4,opt,name=reverse_power,json=reversePower,proto3" json:"reverse_power,omitempty"`
	Metadata      string     `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgAddMeasurement) Reset()         { *m = MsgAddMeasurement{} }
func (m *MsgAddMeasurement) String() string { return proto.CompactTextString(m) }
func (*MsgAddMeasurement) ProtoMessage()    {}
func (*MsgAddMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{6}
}
func (m *MsgAddMeasurement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMeasurement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMeasurement.Merge(m, src)
}
func (m *MsgAddMeasurement) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMeasurement proto.InternalMessageInfo

func (m *MsgAddMeasurement) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *MsgAddMeasurement) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MsgAddMeasurement) GetActivePower() uint64 {
	if m != nil {
		return m.ActivePower
	}
	return 0
}

func (m *MsgAddMeasurement) GetReversePower() uint64 {
	if m != nil {
		return m.ReversePower
	}
	return 0
}

func (m *MsgAddMeasurement) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type MsgAddMeasurementResponse struct {
}

func (m *MsgAddMeasurementResponse) Reset()         { *m = MsgAddMeasurementResponse{} }
func (m *MsgAddMeasurementResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMeasurementResponse) ProtoMessage()    {}
func (*MsgAddMeasurementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{7}
}
func (m *MsgAddMeasurementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMeasurementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMeasurementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMeasurementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMeasurementResponse.Merge(m, src)
}
func (m *MsgAddMeasurementResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMeasurementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMeasurementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMeasurementResponse proto.InternalMessageInfo

type MsgAddCertificateToMarketplace struct {
	Owner         string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CertificateId uint64                                   `protobuf:"varint,2,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Price         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
}

func (m *MsgAddCertificateToMarketplace) Reset()         { *m = MsgAddCertificateToMarketplace{} }
func (m *MsgAddCertificateToMarketplace) String() string { return proto.CompactTextString(m) }
func (*MsgAddCertificateToMarketplace) ProtoMessage()    {}
func (*MsgAddCertificateToMarketplace) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{8}
}
func (m *MsgAddCertificateToMarketplace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCertificateToMarketplace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCertificateToMarketplace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCertificateToMarketplace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCertificateToMarketplace.Merge(m, src)
}
func (m *MsgAddCertificateToMarketplace) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCertificateToMarketplace) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCertificateToMarketplace.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCertificateToMarketplace proto.InternalMessageInfo

func (m *MsgAddCertificateToMarketplace) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgAddCertificateToMarketplace) GetCertificateId() uint64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *MsgAddCertificateToMarketplace) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

type MsgAddCertificateToMarketplaceResponse struct {
}

func (m *MsgAddCertificateToMarketplaceResponse) Reset() {
	*m = MsgAddCertificateToMarketplaceResponse{}
}
func (m *MsgAddCertificateToMarketplaceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCertificateToMarketplaceResponse) ProtoMessage()    {}
func (*MsgAddCertificateToMarketplaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{9}
}
func (m *MsgAddCertificateToMarketplaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCertificateToMarketplaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCertificateToMarketplaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCertificateToMarketplaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCertificateToMarketplaceResponse.Merge(m, src)
}
func (m *MsgAddCertificateToMarketplaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCertificateToMarketplaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCertificateToMarketplaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCertificateToMarketplaceResponse proto.InternalMessageInfo

type MsgBuyCertificate struct {
	Buyer                    string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	MarketplaceCertificateId uint64 `protobuf:"varint,2,opt,name=marketplace_certificate_id,json=marketplaceCertificateId,proto3" json:"marketplace_certificate_id,omitempty"`
}

func (m *MsgBuyCertificate) Reset()         { *m = MsgBuyCertificate{} }
func (m *MsgBuyCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCertificate) ProtoMessage()    {}
func (*MsgBuyCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{10}
}
func (m *MsgBuyCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCertificate.Merge(m, src)
}
func (m *MsgBuyCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCertificate proto.InternalMessageInfo

func (m *MsgBuyCertificate) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgBuyCertificate) GetMarketplaceCertificateId() uint64 {
	if m != nil {
		return m.MarketplaceCertificateId
	}
	return 0
}

type MsgBuyCertificateResponse struct {
}

func (m *MsgBuyCertificateResponse) Reset()         { *m = MsgBuyCertificateResponse{} }
func (m *MsgBuyCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCertificateResponse) ProtoMessage()    {}
func (*MsgBuyCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{11}
}
func (m *MsgBuyCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCertificateResponse.Merge(m, src)
}
func (m *MsgBuyCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCertificateResponse proto.InternalMessageInfo

type MsgBurnCertificate struct {
	Owner         string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CertificateId uint64 `protobuf:"varint,2,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	DeviceAddress string `protobuf:"bytes,3,opt,name=device_address,json=deviceAddress,proto3" json:"device_address,omitempty"`
}

func (m *MsgBurnCertificate) Reset()         { *m = MsgBurnCertificate{} }
func (m *MsgBurnCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCertificate) ProtoMessage()    {}
func (*MsgBurnCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{12}
}
func (m *MsgBurnCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCertificate.Merge(m, src)
}
func (m *MsgBurnCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCertificate proto.InternalMessageInfo

func (m *MsgBurnCertificate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgBurnCertificate) GetCertificateId() uint64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *MsgBurnCertificate) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

type MsgBurnCertificateResponse struct {
}

func (m *MsgBurnCertificateResponse) Reset()         { *m = MsgBurnCertificateResponse{} }
func (m *MsgBurnCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCertificateResponse) ProtoMessage()    {}
func (*MsgBurnCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{13}
}
func (m *MsgBurnCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCertificateResponse.Merge(m, src)
}
func (m *MsgBurnCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCertificateResponse proto.InternalMessageInfo

type MsgAuthorizeCertificate struct {
	Authorizer    string     `protobuf:"bytes,1,opt,name=authorizer,proto3" json:"authorizer,omitempty"`
	UserAddress   string     `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	CertificateId uint64     `protobuf:"varint,3,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	ValidUntil    *time.Time `protobuf:"bytes,4,opt,name=valid_until,json=validUntil,proto3,stdtime" json:"valid_until,omitempty"`
}

func (m *MsgAuthorizeCertificate) Reset()         { *m = MsgAuthorizeCertificate{} }
func (m *MsgAuthorizeCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeCertificate) ProtoMessage()    {}
func (*MsgAuthorizeCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{14}
}
func (m *MsgAuthorizeCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeCertificate.Merge(m, src)
}
func (m *MsgAuthorizeCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeCertificate proto.InternalMessageInfo

func (m *MsgAuthorizeCertificate) GetAuthorizer() string {
	if m != nil {
		return m.Authorizer
	}
	return ""
}

func (m *MsgAuthorizeCertificate) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgAuthorizeCertificate) GetCertificateId() uint64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *MsgAuthorizeCertificate) GetValidUntil() *time.Time {
	if m != nil {
		return m.ValidUntil
	}
	return nil
}

type MsgAuthorizeCertificateResponse struct {
}

func (m *MsgAuthorizeCertificateResponse) Reset()         { *m = MsgAuthorizeCertificateResponse{} }
func (m *MsgAuthorizeCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeCertificateResponse) ProtoMessage()    {}
func (*MsgAuthorizeCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba357ac3aeb2dd39, []int{15}
}
func (m *MsgAuthorizeCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeCertificateResponse.Merge(m, src)
}
func (m *MsgAuthorizeCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeCertificateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAssignDeviceToUser)(nil), "chain4energy.c4echain.cfetokenization.MsgAssignDeviceToUser")
	proto.RegisterType((*MsgAssignDeviceToUserResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgAssignDeviceToUserResponse")
	proto.RegisterType((*MsgAcceptDevice)(nil), "chain4energy.c4echain.cfetokenization.MsgAcceptDevice")
	proto.RegisterType((*MsgAcceptDeviceResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgAcceptDeviceResponse")
	proto.RegisterType((*MsgCreateUserCertificates)(nil), "chain4energy.c4echain.cfetokenization.MsgCreateUserCertificates")
	proto.RegisterType((*MsgCreateUserCertificatesResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgCreateUserCertificatesResponse")
	proto.RegisterType((*MsgAddMeasurement)(nil), "chain4energy.c4echain.cfetokenization.MsgAddMeasurement")
	proto.RegisterType((*MsgAddMeasurementResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgAddMeasurementResponse")
	proto.RegisterType((*MsgAddCertificateToMarketplace)(nil), "chain4energy.c4echain.cfetokenization.MsgAddCertificateToMarketplace")
	proto.RegisterType((*MsgAddCertificateToMarketplaceResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgAddCertificateToMarketplaceResponse")
	proto.RegisterType((*MsgBuyCertificate)(nil), "chain4energy.c4echain.cfetokenization.MsgBuyCertificate")
	proto.RegisterType((*MsgBuyCertificateResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgBuyCertificateResponse")
	proto.RegisterType((*MsgBurnCertificate)(nil), "chain4energy.c4echain.cfetokenization.MsgBurnCertificate")
	proto.RegisterType((*MsgBurnCertificateResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgBurnCertificateResponse")
	proto.RegisterType((*MsgAuthorizeCertificate)(nil), "chain4energy.c4echain.cfetokenization.MsgAuthorizeCertificate")
	proto.RegisterType((*MsgAuthorizeCertificateResponse)(nil), "chain4energy.c4echain.cfetokenization.MsgAuthorizeCertificateResponse")
}

func init() { proto.RegisterFile("c4echain/cfetokenization/tx.proto", fileDescriptor_ba357ac3aeb2dd39) }

var fileDescriptor_ba357ac3aeb2dd39 = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc4, 0x09, 0x6a, 0x9e, 0x93, 0x46, 0xdd, 0xa6, 0xc2, 0xd9, 0x82, 0xdd, 0xb8, 0x2a,
	0x58, 0x42, 0xdd, 0x6d, 0x43, 0x84, 0x5a, 0xa9, 0x42, 0x8d, 0xd3, 0x22, 0x2a, 0x61, 0x84, 0x4c,
	0x7a, 0xe1, 0x62, 0x8d, 0x77, 0x5f, 0x36, 0xa3, 0x78, 0x77, 0x56, 0x3b, 0x63, 0x27, 0xee, 0x0f,
	0xe0, 0x84, 0x44, 0x8f, 0x9c, 0xb8, 0x20, 0x2e, 0x5c, 0xf9, 0x03, 0x1c, 0x23, 0x2e, 0xf4, 0x84,
	0x38, 0xb5, 0x28, 0xf9, 0x23, 0x68, 0x67, 0x76, 0x37, 0x1b, 0x7b, 0x1d, 0xd9, 0x09, 0xa7, 0x78,
	0xde, 0x7c, 0xef, 0xcd, 0xf7, 0xbd, 0xf7, 0xe6, 0xcd, 0x06, 0x36, 0x9c, 0x2d, 0x74, 0xf6, 0x29,
	0x0b, 0x6c, 0x67, 0x0f, 0x25, 0x3f, 0xc0, 0x80, 0xbd, 0xa2, 0x92, 0xf1, 0xc0, 0x96, 0x47, 0x56,
	0x18, 0x71, 0xc9, 0x8d, 0x7b, 0x6a, 0x7f, 0x0b, 0x03, 0x8c, 0xbc, 0xa1, 0x95, 0xe2, 0xad, 0x11,
	0xbc, 0xf9, 0xc9, 0xc4, 0x48, 0x7d, 0x81, 0x51, 0xc7, 0xc5, 0x01, 0x73, 0x50, 0xe8, 0x98, 0xe6,
	0x83, 0x8b, 0xc1, 0x0e, 0x46, 0x92, 0xed, 0x31, 0x87, 0xca, 0xcc, 0xa3, 0xe6, 0x71, 0xee, 0xf5,
	0xd0, 0x56, 0xab, 0x6e, 0x7f, 0xcf, 0x96, 0xcc, 0x47, 0x21, 0xa9, 0x1f, 0x26, 0x80, 0x35, 0x8f,
	0x7b, 0x5c, 0xfd, 0xb4, 0xe3, 0x5f, 0x89, 0xb5, 0xea, 0x70, 0xe1, 0x73, 0x61, 0x77, 0xa9, 0x40,
	0x7b, 0xf0, 0xb0, 0x8b, 0x92, 0x3e, 0xb4, 0x1d, 0xce, 0x02, 0xbd, 0x5f, 0xa7, 0x70, 0xab, 0x25,
	0xbc, 0x6d, 0x21, 0x98, 0x17, 0x3c, 0x53, 0x14, 0x77, 0xf9, 0x4b, 0x81, 0x91, 0x71, 0x0f, 0xae,
	0x6b, 0xca, 0x1d, 0xea, 0xba, 0x11, 0x0a, 0x51, 0x21, 0x77, 0x48, 0x63, 0xa9, 0xbd, 0xa2, 0xad,
	0xdb, 0xda, 0x68, 0x6c, 0xc0, 0xb2, 0x62, 0x9c, 0x82, 0xe6, 0x15, 0xa8, 0x1c, 0xdb, 0x12, 0x48,
	0xbd, 0x06, 0x1f, 0x16, 0x1e, 0xd1, 0x46, 0x11, 0xf2, 0x40, 0x60, 0xfd, 0x57, 0x02, 0xab, 0x31,
	0xc2, 0x71, 0x30, 0x94, 0x1a, 0x31, 0x16, 0x97, 0x8c, 0xc5, 0x2d, 0x60, 0x38, 0x5f, 0xc4, 0xb0,
	0x06, 0xe5, 0x04, 0x16, 0x50, 0x1f, 0x2b, 0x25, 0x85, 0x01, 0x6d, 0xfa, 0x9a, 0xfa, 0x68, 0x7c,
	0x0c, 0xab, 0x09, 0xa0, 0xc7, 0x1d, 0x55, 0x84, 0xca, 0x82, 0x02, 0x25, 0xe1, 0xbf, 0x4a, 0xac,
	0xf5, 0x75, 0x78, 0x7f, 0x84, 0x66, 0x26, 0xe1, 0x2f, 0x02, 0xeb, 0x2d, 0xe1, 0xed, 0x44, 0x48,
	0x25, 0xc6, 0xe2, 0x76, 0x72, 0x15, 0x34, 0xd6, 0x60, 0x91, 0x1f, 0x06, 0x18, 0x25, 0x2a, 0xf4,
	0x62, 0x5a, 0xfe, 0x6b, 0xb0, 0x18, 0xf2, 0x43, 0x8c, 0x14, 0xf3, 0x85, 0xb6, 0x5e, 0x18, 0x36,
	0xdc, 0xa4, 0xbd, 0x1e, 0x3f, 0x44, 0xb7, 0x43, 0xfb, 0x72, 0x9f, 0x47, 0x4c, 0x32, 0x14, 0x95,
	0x85, 0x3b, 0xa5, 0xc6, 0x52, 0xdb, 0x48, 0xb6, 0xb6, 0xcf, 0x76, 0x0c, 0x0b, 0x6e, 0xc6, 0x5d,
	0x35, 0xd4, 0x9c, 0x3a, 0x72, 0x18, 0x62, 0x87, 0xb9, 0x95, 0x45, 0x15, 0xf4, 0x46, 0x6e, 0x6b,
	0x77, 0x18, 0xe2, 0x0b, 0xb7, 0x7e, 0x17, 0x36, 0x26, 0x0a, 0xca, 0x64, 0x9f, 0x10, 0xb8, 0x11,
	0xa7, 0xc4, 0x75, 0x5b, 0x48, 0x45, 0x3f, 0x42, 0x1f, 0x03, 0x39, 0x6d, 0xeb, 0x34, 0x61, 0x29,
	0xeb, 0x61, 0x25, 0xbd, 0xbc, 0x69, 0x5a, 0xba, 0xcb, 0xad, 0xb4, 0xcb, 0xad, 0xdd, 0x14, 0xd1,
	0xbc, 0x76, 0xfc, 0xb6, 0x46, 0x5e, 0xbf, 0xab, 0x91, 0xf6, 0x99, 0x5b, 0xdc, 0x26, 0xd4, 0x91,
	0x6c, 0x80, 0x9d, 0x7c, 0x8e, 0xca, 0xda, 0xf6, 0x8d, 0xca, 0xd4, 0x5d, 0x58, 0x89, 0x70, 0x80,
	0x91, 0x48, 0x31, 0x0b, 0x0a, 0xb3, 0x9c, 0x18, 0x35, 0xc8, 0x84, 0x6b, 0x3e, 0x4a, 0xea, 0x52,
	0x49, 0x55, 0x4a, 0x96, 0xda, 0xd9, 0xba, 0x7e, 0x5b, 0x95, 0xf6, 0xbc, 0xc6, 0x2c, 0x03, 0x7f,
	0x10, 0xa8, 0xea, 0xdd, 0x5c, 0x82, 0x76, 0x79, 0x8b, 0x46, 0x07, 0x28, 0xc3, 0x1e, 0x75, 0x70,
	0x72, 0xf5, 0x73, 0xb7, 0x3c, 0x2e, 0xc5, 0xbc, 0xe2, 0xb5, 0x92, 0xb3, 0xbe, 0x70, 0x0d, 0x0a,
	0x8b, 0x61, 0xc4, 0x9c, 0xb8, 0x6f, 0x4b, 0x8d, 0xf2, 0xe6, 0xba, 0xa5, 0xef, 0xb3, 0x15, 0xdf,
	0x67, 0x2b, 0xb9, 0xcf, 0xd6, 0x0e, 0x67, 0x41, 0xf3, 0xc1, 0xf1, 0xdb, 0xda, 0xdc, 0x6f, 0xef,
	0x6a, 0x0d, 0x8f, 0xc9, 0xfd, 0x7e, 0xd7, 0x72, 0xb8, 0x6f, 0x27, 0x97, 0x5f, 0xff, 0xb9, 0x2f,
	0xdc, 0x03, 0x3b, 0xae, 0xbb, 0x50, 0x0e, 0xa2, 0xad, 0x23, 0xd7, 0x1b, 0xf0, 0xd1, 0xc5, 0x0a,
	0x32, 0xb1, 0x9e, 0xaa, 0x76, 0xb3, 0x3f, 0xcc, 0x21, 0x63, 0x79, 0xdd, 0xfe, 0xf0, 0x4c, 0x9e,
	0x5a, 0x18, 0x4f, 0xc0, 0xf4, 0xcf, 0x22, 0x74, 0x0a, 0xa5, 0x56, 0x72, 0x88, 0x9d, 0xbc, 0xea,
	0x24, 0xe5, 0xe7, 0x0f, 0xca, 0x58, 0x1c, 0x81, 0xa1, 0x36, 0xa3, 0x60, 0x84, 0xc6, 0xe5, 0xb3,
	0x3c, 0xde, 0xb1, 0xa5, 0x82, 0x8e, 0xad, 0x7f, 0x00, 0xe6, 0xf8, 0xc9, 0x19, 0xaf, 0x3f, 0x89,
	0x9e, 0x0f, 0xfa, 0xd2, 0xbd, 0xca, 0x4b, 0x32, 0xaa, 0x00, 0x34, 0xb5, 0xa7, 0x14, 0x73, 0x96,
	0x29, 0xc6, 0x68, 0x81, 0x94, 0x52, 0x91, 0x94, 0xe7, 0x50, 0x1e, 0xd0, 0x1e, 0x73, 0x3b, 0xfd,
	0x40, 0xb2, 0x9e, 0x6a, 0xf6, 0x69, 0xef, 0x15, 0x28, 0xc7, 0x97, 0xb1, 0x5f, 0x7d, 0x03, 0x6a,
	0x13, 0xb4, 0xa4, 0x7a, 0x37, 0xff, 0x5e, 0x82, 0x52, 0x4b, 0x78, 0xc6, 0x4f, 0x04, 0x8c, 0x82,
	0x07, 0xe4, 0x89, 0x35, 0xd5, 0xbb, 0x69, 0x15, 0xbe, 0x0d, 0xe6, 0xb3, 0xab, 0x78, 0xa7, 0x14,
	0x8d, 0xef, 0x09, 0x2c, 0x9f, 0x7b, 0x56, 0x3e, 0x9b, 0x21, 0x6c, 0xce, 0xcf, 0xfc, 0xfc, 0x72,
	0x7e, 0x19, 0x91, 0x5f, 0x08, 0xdc, 0x2a, 0x9c, 0xa5, 0xc6, 0xd3, 0xe9, 0x23, 0x17, 0x0f, 0x63,
	0xf3, 0xcb, 0xab, 0x46, 0xc8, 0x58, 0xfe, 0x4c, 0x60, 0xad, 0xb0, 0x7d, 0x67, 0x91, 0x5f, 0xe0,
	0x6f, 0x7e, 0x71, 0x35, 0xff, 0x8c, 0xe0, 0xef, 0x04, 0x6e, 0x5f, 0x34, 0x6a, 0x9f, 0xcf, 0x70,
	0xce, 0xe4, 0x30, 0x66, 0xeb, 0x7f, 0x09, 0x93, 0xb1, 0xfe, 0x91, 0xc0, 0xea, 0xe8, 0xb8, 0x7a,
	0x3c, 0xfd, 0x11, 0x23, 0xae, 0xe6, 0xf6, 0xa5, 0x5d, 0x33, 0x46, 0x3f, 0x10, 0xb8, 0x3e, 0x32,
	0xc6, 0x1f, 0xcd, 0x12, 0x35, 0xef, 0x69, 0x3e, 0xbd, 0xac, 0xe7, 0x39, 0x3a, 0x23, 0xdf, 0x10,
	0x8f, 0x66, 0x2a, 0x41, 0xce, 0x73, 0x16, 0x3a, 0xc5, 0x6f, 0x7a, 0xf3, 0xdb, 0xe3, 0x93, 0x2a,
	0x79, 0x73, 0x52, 0x25, 0xff, 0x9e, 0x54, 0xc9, 0xeb, 0xd3, 0xea, 0xdc, 0x9b, 0xd3, 0xea, 0xdc,
	0x3f, 0xa7, 0xd5, 0xb9, 0xef, 0x1e, 0xe7, 0xdf, 0xd6, 0xdc, 0x29, 0xb6, 0xb3, 0x85, 0xf7, 0xf5,
	0xf7, 0xfc, 0xd1, 0xf8, 0x3f, 0x12, 0xf1, 0x93, 0xdb, 0x7d, 0x4f, 0x8d, 0xde, 0x4f, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x40, 0xb2, 0xe0, 0x71, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AssignDeviceToUser(ctx context.Context, in *MsgAssignDeviceToUser, opts ...grpc.CallOption) (*MsgAssignDeviceToUserResponse, error)
	AcceptDevice(ctx context.Context, in *MsgAcceptDevice, opts ...grpc.CallOption) (*MsgAcceptDeviceResponse, error)
	CreateUserCertificate(ctx context.Context, in *MsgCreateUserCertificates, opts ...grpc.CallOption) (*MsgCreateUserCertificatesResponse, error)
	AuthorizeCertificate(ctx context.Context, in *MsgAuthorizeCertificate, opts ...grpc.CallOption) (*MsgAuthorizeCertificateResponse, error)
	AddCertificateToMarketplace(ctx context.Context, in *MsgAddCertificateToMarketplace, opts ...grpc.CallOption) (*MsgAddCertificateToMarketplaceResponse, error)
	BurnCertificate(ctx context.Context, in *MsgBurnCertificate, opts ...grpc.CallOption) (*MsgBurnCertificateResponse, error)
	BuyCertificate(ctx context.Context, in *MsgBuyCertificate, opts ...grpc.CallOption) (*MsgBuyCertificateResponse, error)
	AddMeasurement(ctx context.Context, in *MsgAddMeasurement, opts ...grpc.CallOption) (*MsgAddMeasurementResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AssignDeviceToUser(ctx context.Context, in *MsgAssignDeviceToUser, opts ...grpc.CallOption) (*MsgAssignDeviceToUserResponse, error) {
	out := new(MsgAssignDeviceToUserResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/AssignDeviceToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptDevice(ctx context.Context, in *MsgAcceptDevice, opts ...grpc.CallOption) (*MsgAcceptDeviceResponse, error) {
	out := new(MsgAcceptDeviceResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/AcceptDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateUserCertificate(ctx context.Context, in *MsgCreateUserCertificates, opts ...grpc.CallOption) (*MsgCreateUserCertificatesResponse, error) {
	out := new(MsgCreateUserCertificatesResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/CreateUserCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AuthorizeCertificate(ctx context.Context, in *MsgAuthorizeCertificate, opts ...grpc.CallOption) (*MsgAuthorizeCertificateResponse, error) {
	out := new(MsgAuthorizeCertificateResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/AuthorizeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCertificateToMarketplace(ctx context.Context, in *MsgAddCertificateToMarketplace, opts ...grpc.CallOption) (*MsgAddCertificateToMarketplaceResponse, error) {
	out := new(MsgAddCertificateToMarketplaceResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/AddCertificateToMarketplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnCertificate(ctx context.Context, in *MsgBurnCertificate, opts ...grpc.CallOption) (*MsgBurnCertificateResponse, error) {
	out := new(MsgBurnCertificateResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/BurnCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyCertificate(ctx context.Context, in *MsgBuyCertificate, opts ...grpc.CallOption) (*MsgBuyCertificateResponse, error) {
	out := new(MsgBuyCertificateResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/BuyCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMeasurement(ctx context.Context, in *MsgAddMeasurement, opts ...grpc.CallOption) (*MsgAddMeasurementResponse, error) {
	out := new(MsgAddMeasurementResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfetokenization.Msg/AddMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AssignDeviceToUser(context.Context, *MsgAssignDeviceToUser) (*MsgAssignDeviceToUserResponse, error)
	AcceptDevice(context.Context, *MsgAcceptDevice) (*MsgAcceptDeviceResponse, error)
	CreateUserCertificate(context.Context, *MsgCreateUserCertificates) (*MsgCreateUserCertificatesResponse, error)
	AuthorizeCertificate(context.Context, *MsgAuthorizeCertificate) (*MsgAuthorizeCertificateResponse, error)
	AddCertificateToMarketplace(context.Context, *MsgAddCertificateToMarketplace) (*MsgAddCertificateToMarketplaceResponse, error)
	BurnCertificate(context.Context, *MsgBurnCertificate) (*MsgBurnCertificateResponse, error)
	BuyCertificate(context.Context, *MsgBuyCertificate) (*MsgBuyCertificateResponse, error)
	AddMeasurement(context.Context, *MsgAddMeasurement) (*MsgAddMeasurementResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AssignDeviceToUser(ctx context.Context, req *MsgAssignDeviceToUser) (*MsgAssignDeviceToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDeviceToUser not implemented")
}
func (*UnimplementedMsgServer) AcceptDevice(ctx context.Context, req *MsgAcceptDevice) (*MsgAcceptDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptDevice not implemented")
}
func (*UnimplementedMsgServer) CreateUserCertificate(ctx context.Context, req *MsgCreateUserCertificates) (*MsgCreateUserCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCertificate not implemented")
}
func (*UnimplementedMsgServer) AuthorizeCertificate(ctx context.Context, req *MsgAuthorizeCertificate) (*MsgAuthorizeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeCertificate not implemented")
}
func (*UnimplementedMsgServer) AddCertificateToMarketplace(ctx context.Context, req *MsgAddCertificateToMarketplace) (*MsgAddCertificateToMarketplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCertificateToMarketplace not implemented")
}
func (*UnimplementedMsgServer) BurnCertificate(ctx context.Context, req *MsgBurnCertificate) (*MsgBurnCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnCertificate not implemented")
}
func (*UnimplementedMsgServer) BuyCertificate(ctx context.Context, req *MsgBuyCertificate) (*MsgBuyCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCertificate not implemented")
}
func (*UnimplementedMsgServer) AddMeasurement(ctx context.Context, req *MsgAddMeasurement) (*MsgAddMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMeasurement not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AssignDeviceToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignDeviceToUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignDeviceToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/AssignDeviceToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignDeviceToUser(ctx, req.(*MsgAssignDeviceToUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/AcceptDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptDevice(ctx, req.(*MsgAcceptDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateUserCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateUserCertificates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateUserCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/CreateUserCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateUserCertificate(ctx, req.(*MsgCreateUserCertificates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AuthorizeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthorizeCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AuthorizeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/AuthorizeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AuthorizeCertificate(ctx, req.(*MsgAuthorizeCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCertificateToMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCertificateToMarketplace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCertificateToMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/AddCertificateToMarketplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCertificateToMarketplace(ctx, req.(*MsgAddCertificateToMarketplace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/BurnCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnCertificate(ctx, req.(*MsgBurnCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/BuyCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyCertificate(ctx, req.(*MsgBuyCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMeasurement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfetokenization.Msg/AddMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMeasurement(ctx, req.(*MsgAddMeasurement))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfetokenization.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignDeviceToUser",
			Handler:    _Msg_AssignDeviceToUser_Handler,
		},
		{
			MethodName: "AcceptDevice",
			Handler:    _Msg_AcceptDevice_Handler,
		},
		{
			MethodName: "CreateUserCertificate",
			Handler:    _Msg_CreateUserCertificate_Handler,
		},
		{
			MethodName: "AuthorizeCertificate",
			Handler:    _Msg_AuthorizeCertificate_Handler,
		},
		{
			MethodName: "AddCertificateToMarketplace",
			Handler:    _Msg_AddCertificateToMarketplace_Handler,
		},
		{
			MethodName: "BurnCertificate",
			Handler:    _Msg_BurnCertificate_Handler,
		},
		{
			MethodName: "BuyCertificate",
			Handler:    _Msg_BuyCertificate_Handler,
		},
		{
			MethodName: "AddMeasurement",
			Handler:    _Msg_AddMeasurement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfetokenization/tx.proto",
}

func (m *MsgAssignDeviceToUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignDeviceToUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignDeviceToUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignDeviceToUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignDeviceToUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignDeviceToUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceLocation) > 0 {
		i -= len(m.DeviceLocation)
		copy(dAtA[i:], m.DeviceLocation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceLocation)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptDeviceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateUserCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateUserCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateUserCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertyficateTypeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CertyficateTypeId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AllowedAuthorities) > 0 {
		for iNdEx := len(m.AllowedAuthorities) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAuthorities[iNdEx])
			copy(dAtA[i:], m.AllowedAuthorities[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AllowedAuthorities[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Power != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateUserCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateUserCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateUserCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMeasurement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMeasurement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMeasurement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReversePower != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReversePower))
		i--
		dAtA[i] = 0x20
	}
	if m.ActivePower != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ActivePower))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTx(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMeasurementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMeasurementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMeasurementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddCertificateToMarketplace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCertificateToMarketplace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCertificateToMarketplace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CertificateId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CertificateId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCertificateToMarketplaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCertificateToMarketplaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCertificateToMarketplaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketplaceCertificateId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketplaceCertificateId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceAddress) > 0 {
		i -= len(m.DeviceAddress)
		copy(dAtA[i:], m.DeviceAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CertificateId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CertificateId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidUntil != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ValidUntil, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ValidUntil):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.CertificateId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CertificateId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authorizer) > 0 {
		i -= len(m.Authorizer)
		copy(dAtA[i:], m.Authorizer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authorizer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAssignDeviceToUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignDeviceToUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeviceLocation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateUserCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovTx(uint64(m.Power))
	}
	if len(m.AllowedAuthorities) > 0 {
		for _, s := range m.AllowedAuthorities {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.CertyficateTypeId != 0 {
		n += 1 + sovTx(uint64(m.CertyficateTypeId))
	}
	return n
}

func (m *MsgCreateUserCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMeasurement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ActivePower != 0 {
		n += 1 + sovTx(uint64(m.ActivePower))
	}
	if m.ReversePower != 0 {
		n += 1 + sovTx(uint64(m.ReversePower))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMeasurementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddCertificateToMarketplace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CertificateId != 0 {
		n += 1 + sovTx(uint64(m.CertificateId))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddCertificateToMarketplaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketplaceCertificateId != 0 {
		n += 1 + sovTx(uint64(m.MarketplaceCertificateId))
	}
	return n
}

func (m *MsgBuyCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CertificateId != 0 {
		n += 1 + sovTx(uint64(m.CertificateId))
	}
	l = len(m.DeviceAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAuthorizeCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authorizer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CertificateId != 0 {
		n += 1 + sovTx(uint64(m.CertificateId))
	}
	if m.ValidUntil != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ValidUntil)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAuthorizeCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAssignDeviceToUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignDeviceToUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignDeviceToUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignDeviceToUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignDeviceToUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignDeviceToUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateUserCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateUserCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateUserCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAuthorities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAuthorities = append(m.AllowedAuthorities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertyficateTypeId", wireType)
			}
			m.CertyficateTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertyficateTypeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateUserCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateUserCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateUserCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMeasurement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMeasurement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMeasurement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePower", wireType)
			}
			m.ActivePower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivePower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReversePower", wireType)
			}
			m.ReversePower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReversePower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMeasurementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMeasurementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMeasurementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCertificateToMarketplace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCertificateToMarketplace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCertificateToMarketplace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateId", wireType)
			}
			m.CertificateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCertificateToMarketplaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCertificateToMarketplaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCertificateToMarketplaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCertificateId", wireType)
			}
			m.MarketplaceCertificateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketplaceCertificateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateId", wireType)
			}
			m.CertificateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorizer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorizer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateId", wireType)
			}
			m.CertificateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidUntil == nil {
				m.ValidUntil = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ValidUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
