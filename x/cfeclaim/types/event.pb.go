// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfeclaim/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_gogo_protobuf_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventNewCampaign struct {
	Id                     uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                  string                                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name                   string                                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description            string                                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CampaignType           CampaignType                           `protobuf:"varint,5,opt,name=campaign_type,json=campaignType,proto3,enum=chain4energy.c4echain.cfeclaim.CampaignType" json:"campaign_type,omitempty"`
	RemovableClaimRecords  bool                                   `protobuf:"varint,6,opt,name=removable_claim_records,json=removableClaimRecords,proto3" json:"removable_claim_records,omitempty"`
	FeegrantAmount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=feegrant_amount,json=feegrantAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"feegrant_amount"`
	InitialClaimFreeAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=initial_claim_free_amount,json=initialClaimFreeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_claim_free_amount"`
	Free                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=free,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"free"`
	Enabled                bool                                   `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StartTime              time.Time                              `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime                time.Time                              `protobuf:"bytes,12,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	LockupPeriod           time.Duration                          `protobuf:"bytes,13,opt,name=lockup_period,json=lockupPeriod,proto3,stdduration" json:"lockup_period"`
	VestingPeriod          time.Duration                          `protobuf:"bytes,14,opt,name=vesting_period,json=vestingPeriod,proto3,stdduration" json:"vesting_period"`
	VestingPoolName        string                                 `protobuf:"bytes,15,opt,name=vesting_poolName,json=vestingPoolName,proto3" json:"vesting_poolName,omitempty"`
}

func (m *EventNewCampaign) Reset()         { *m = EventNewCampaign{} }
func (m *EventNewCampaign) String() string { return proto.CompactTextString(m) }
func (*EventNewCampaign) ProtoMessage()    {}
func (*EventNewCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{0}
}
func (m *EventNewCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewCampaign.Merge(m, src)
}
func (m *EventNewCampaign) XXX_Size() int {
	return m.Size()
}
func (m *EventNewCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewCampaign proto.InternalMessageInfo

func (m *EventNewCampaign) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventNewCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventNewCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventNewCampaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EventNewCampaign) GetCampaignType() CampaignType {
	if m != nil {
		return m.CampaignType
	}
	return CampaignType_CAMPAIGN_TYPE_UNSPECIFIED
}

func (m *EventNewCampaign) GetRemovableClaimRecords() bool {
	if m != nil {
		return m.RemovableClaimRecords
	}
	return false
}

func (m *EventNewCampaign) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *EventNewCampaign) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *EventNewCampaign) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *EventNewCampaign) GetLockupPeriod() time.Duration {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

func (m *EventNewCampaign) GetVestingPeriod() time.Duration {
	if m != nil {
		return m.VestingPeriod
	}
	return 0
}

func (m *EventNewCampaign) GetVestingPoolName() string {
	if m != nil {
		return m.VestingPoolName
	}
	return ""
}

type EventCloseCampaign struct {
	Owner               string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId          uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	CampaignCloseAction string `protobuf:"bytes,3,opt,name=campaign_close_action,json=campaignCloseAction,proto3" json:"campaign_close_action,omitempty"`
}

func (m *EventCloseCampaign) Reset()         { *m = EventCloseCampaign{} }
func (m *EventCloseCampaign) String() string { return proto.CompactTextString(m) }
func (*EventCloseCampaign) ProtoMessage()    {}
func (*EventCloseCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{1}
}
func (m *EventCloseCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCloseCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCloseCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCloseCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCloseCampaign.Merge(m, src)
}
func (m *EventCloseCampaign) XXX_Size() int {
	return m.Size()
}
func (m *EventCloseCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCloseCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_EventCloseCampaign proto.InternalMessageInfo

func (m *EventCloseCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCloseCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventCloseCampaign) GetCampaignCloseAction() string {
	if m != nil {
		return m.CampaignCloseAction
	}
	return ""
}

type EventRemoveCampaign struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
}

func (m *EventRemoveCampaign) Reset()         { *m = EventRemoveCampaign{} }
func (m *EventRemoveCampaign) String() string { return proto.CompactTextString(m) }
func (*EventRemoveCampaign) ProtoMessage()    {}
func (*EventRemoveCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{2}
}
func (m *EventRemoveCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRemoveCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRemoveCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRemoveCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRemoveCampaign.Merge(m, src)
}
func (m *EventRemoveCampaign) XXX_Size() int {
	return m.Size()
}
func (m *EventRemoveCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRemoveCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_EventRemoveCampaign proto.InternalMessageInfo

func (m *EventRemoveCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventRemoveCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type EventEnableCampaign struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
}

func (m *EventEnableCampaign) Reset()         { *m = EventEnableCampaign{} }
func (m *EventEnableCampaign) String() string { return proto.CompactTextString(m) }
func (*EventEnableCampaign) ProtoMessage()    {}
func (*EventEnableCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{3}
}
func (m *EventEnableCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEnableCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEnableCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEnableCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEnableCampaign.Merge(m, src)
}
func (m *EventEnableCampaign) XXX_Size() int {
	return m.Size()
}
func (m *EventEnableCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEnableCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_EventEnableCampaign proto.InternalMessageInfo

func (m *EventEnableCampaign) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventEnableCampaign) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type EventAddMission struct {
	Id             uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner          string                                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId     uint64                                 `protobuf:"varint,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Name           string                                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	MissionType    MissionType                            `protobuf:"varint,6,opt,name=mission_type,json=missionType,proto3,enum=chain4energy.c4echain.cfeclaim.MissionType" json:"mission_type,omitempty"`
	Weight         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
	ClaimStartDate *time.Time                             `protobuf:"bytes,8,opt,name=claim_start_date,json=claimStartDate,proto3,stdtime" json:"claim_start_date,omitempty"`
}

func (m *EventAddMission) Reset()         { *m = EventAddMission{} }
func (m *EventAddMission) String() string { return proto.CompactTextString(m) }
func (*EventAddMission) ProtoMessage()    {}
func (*EventAddMission) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{4}
}
func (m *EventAddMission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddMission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddMission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddMission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddMission.Merge(m, src)
}
func (m *EventAddMission) XXX_Size() int {
	return m.Size()
}
func (m *EventAddMission) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddMission.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddMission proto.InternalMessageInfo

func (m *EventAddMission) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventAddMission) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventAddMission) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventAddMission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventAddMission) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EventAddMission) GetMissionType() MissionType {
	if m != nil {
		return m.MissionType
	}
	return MissionType_MISSION_TYPE_UNSPECIFIED
}

func (m *EventAddMission) GetClaimStartDate() *time.Time {
	if m != nil {
		return m.ClaimStartDate
	}
	return nil
}

type EventClaim struct {
	Claimer    string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	CampaignId uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	MissionId  uint64 `protobuf:"varint,3,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Amount     string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventClaim) Reset()         { *m = EventClaim{} }
func (m *EventClaim) String() string { return proto.CompactTextString(m) }
func (*EventClaim) ProtoMessage()    {}
func (*EventClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{5}
}
func (m *EventClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaim.Merge(m, src)
}
func (m *EventClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaim proto.InternalMessageInfo

func (m *EventClaim) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *EventClaim) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventClaim) GetMissionId() uint64 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *EventClaim) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventInitialClaim struct {
	Claimer        string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	CampaignId     uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	AddressToClaim string `protobuf:"bytes,3,opt,name=address_to_claim,json=addressToClaim,proto3" json:"address_to_claim,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventInitialClaim) Reset()         { *m = EventInitialClaim{} }
func (m *EventInitialClaim) String() string { return proto.CompactTextString(m) }
func (*EventInitialClaim) ProtoMessage()    {}
func (*EventInitialClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{6}
}
func (m *EventInitialClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInitialClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInitialClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInitialClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInitialClaim.Merge(m, src)
}
func (m *EventInitialClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventInitialClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInitialClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventInitialClaim proto.InternalMessageInfo

func (m *EventInitialClaim) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *EventInitialClaim) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventInitialClaim) GetAddressToClaim() string {
	if m != nil {
		return m.AddressToClaim
	}
	return ""
}

func (m *EventInitialClaim) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventAddClaimRecords struct {
	Owner                   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId              uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	ClaimRecordsTotalAmount string `protobuf:"bytes,3,opt,name=claim_records_total_amount,json=claimRecordsTotalAmount,proto3" json:"claim_records_total_amount,omitempty"`
	ClaimRecordsNumber      int64  `protobuf:"varint,4,opt,name=claim_records_number,json=claimRecordsNumber,proto3" json:"claim_records_number,omitempty"`
}

func (m *EventAddClaimRecords) Reset()         { *m = EventAddClaimRecords{} }
func (m *EventAddClaimRecords) String() string { return proto.CompactTextString(m) }
func (*EventAddClaimRecords) ProtoMessage()    {}
func (*EventAddClaimRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{7}
}
func (m *EventAddClaimRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddClaimRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddClaimRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddClaimRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddClaimRecords.Merge(m, src)
}
func (m *EventAddClaimRecords) XXX_Size() int {
	return m.Size()
}
func (m *EventAddClaimRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddClaimRecords.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddClaimRecords proto.InternalMessageInfo

func (m *EventAddClaimRecords) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventAddClaimRecords) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventAddClaimRecords) GetClaimRecordsTotalAmount() string {
	if m != nil {
		return m.ClaimRecordsTotalAmount
	}
	return ""
}

func (m *EventAddClaimRecords) GetClaimRecordsNumber() int64 {
	if m != nil {
		return m.ClaimRecordsNumber
	}
	return 0
}

type EventDeleteClaimRecord struct {
	Owner             string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CampaignId        uint64 `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	UserAddress       string `protobuf:"bytes,3,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	ClaimRecordAmount string `protobuf:"bytes,4,opt,name=claim_record_amount,json=claimRecordAmount,proto3" json:"claim_record_amount,omitempty"`
}

func (m *EventDeleteClaimRecord) Reset()         { *m = EventDeleteClaimRecord{} }
func (m *EventDeleteClaimRecord) String() string { return proto.CompactTextString(m) }
func (*EventDeleteClaimRecord) ProtoMessage()    {}
func (*EventDeleteClaimRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{8}
}
func (m *EventDeleteClaimRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteClaimRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteClaimRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteClaimRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteClaimRecord.Merge(m, src)
}
func (m *EventDeleteClaimRecord) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteClaimRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteClaimRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteClaimRecord proto.InternalMessageInfo

func (m *EventDeleteClaimRecord) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventDeleteClaimRecord) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventDeleteClaimRecord) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *EventDeleteClaimRecord) GetClaimRecordAmount() string {
	if m != nil {
		return m.ClaimRecordAmount
	}
	return ""
}

type EventCompleteMission struct {
	CampaignId  uint64 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	MissionId   uint64 `protobuf:"varint,2,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	UserAddress string `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *EventCompleteMission) Reset()         { *m = EventCompleteMission{} }
func (m *EventCompleteMission) String() string { return proto.CompactTextString(m) }
func (*EventCompleteMission) ProtoMessage()    {}
func (*EventCompleteMission) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c2c1d49a2a732a, []int{9}
}
func (m *EventCompleteMission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCompleteMission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCompleteMission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCompleteMission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCompleteMission.Merge(m, src)
}
func (m *EventCompleteMission) XXX_Size() int {
	return m.Size()
}
func (m *EventCompleteMission) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCompleteMission.DiscardUnknown(m)
}

var xxx_messageInfo_EventCompleteMission proto.InternalMessageInfo

func (m *EventCompleteMission) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *EventCompleteMission) GetMissionId() uint64 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *EventCompleteMission) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EventNewCampaign)(nil), "chain4energy.c4echain.cfeclaim.EventNewCampaign")
	proto.RegisterType((*EventCloseCampaign)(nil), "chain4energy.c4echain.cfeclaim.EventCloseCampaign")
	proto.RegisterType((*EventRemoveCampaign)(nil), "chain4energy.c4echain.cfeclaim.EventRemoveCampaign")
	proto.RegisterType((*EventEnableCampaign)(nil), "chain4energy.c4echain.cfeclaim.EventEnableCampaign")
	proto.RegisterType((*EventAddMission)(nil), "chain4energy.c4echain.cfeclaim.EventAddMission")
	proto.RegisterType((*EventClaim)(nil), "chain4energy.c4echain.cfeclaim.EventClaim")
	proto.RegisterType((*EventInitialClaim)(nil), "chain4energy.c4echain.cfeclaim.EventInitialClaim")
	proto.RegisterType((*EventAddClaimRecords)(nil), "chain4energy.c4echain.cfeclaim.EventAddClaimRecords")
	proto.RegisterType((*EventDeleteClaimRecord)(nil), "chain4energy.c4echain.cfeclaim.EventDeleteClaimRecord")
	proto.RegisterType((*EventCompleteMission)(nil), "chain4energy.c4echain.cfeclaim.EventCompleteMission")
}

func init() { proto.RegisterFile("c4echain/cfeclaim/event.proto", fileDescriptor_a4c2c1d49a2a732a) }

var fileDescriptor_a4c2c1d49a2a732a = []byte{
	// 957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0x67, 0x8d, 0x31, 0xf0, 0x6c, 0x0c, 0x19, 0x08, 0xd9, 0x20, 0xc5, 0x76, 0x7d, 0xa8, 0x5c,
	0xb5, 0x59, 0x57, 0x14, 0xf5, 0xd2, 0x43, 0x05, 0x26, 0x51, 0xa9, 0x52, 0xab, 0xdd, 0x22, 0x55,
	0xea, 0x65, 0x35, 0xde, 0x7d, 0x2c, 0xa3, 0x78, 0x77, 0xac, 0xdd, 0x31, 0x94, 0x4b, 0xfb, 0x15,
	0x38, 0xf6, 0xda, 0xef, 0xd1, 0x0f, 0x90, 0x63, 0x8e, 0x55, 0x0f, 0x69, 0x05, 0xdf, 0xa1, 0xe7,
	0x6a, 0xfe, 0x6d, 0x16, 0x2c, 0x42, 0x02, 0x27, 0xef, 0xcc, 0x9b, 0xf7, 0x7b, 0xbf, 0x79, 0xfb,
	0x7e, 0xbf, 0x35, 0x3c, 0x09, 0x77, 0x30, 0x3c, 0xa6, 0x2c, 0xed, 0x87, 0x47, 0x18, 0x8e, 0x29,
	0x4b, 0xfa, 0x78, 0x82, 0xa9, 0xf0, 0x26, 0x19, 0x17, 0x9c, 0xb4, 0x54, 0x6c, 0x07, 0x53, 0xcc,
	0xe2, 0x33, 0xcf, 0x9e, 0xf5, 0xec, 0xd9, 0xad, 0xce, 0x6c, 0x7a, 0x48, 0x93, 0x09, 0x65, 0x71,
	0xaa, 0x11, 0xb6, 0x36, 0x62, 0x1e, 0x73, 0xf5, 0xd8, 0x97, 0x4f, 0x66, 0xb7, 0x15, 0x73, 0x1e,
	0x8f, 0xb1, 0xaf, 0x56, 0xa3, 0xe9, 0x51, 0x3f, 0x9a, 0x66, 0x54, 0x30, 0x6e, 0xb3, 0xda, 0xd7,
	0xe3, 0x82, 0x25, 0x98, 0x0b, 0x9a, 0x4c, 0xec, 0x81, 0xd9, 0xc2, 0x09, 0xcb, 0xf3, 0x02, 0xa1,
	0x7b, 0x51, 0x83, 0xb5, 0x67, 0xf2, 0x26, 0x43, 0x3c, 0x1d, 0x18, 0x4a, 0xa4, 0x09, 0x15, 0x16,
	0xb9, 0x4e, 0xc7, 0xe9, 0x55, 0xfd, 0x0a, 0x8b, 0xc8, 0x06, 0x2c, 0xf0, 0xd3, 0x14, 0x33, 0xb7,
	0xd2, 0x71, 0x7a, 0xcb, 0xbe, 0x5e, 0x10, 0x02, 0xd5, 0x94, 0x26, 0xe8, 0xce, 0xab, 0x4d, 0xf5,
	0x4c, 0x3a, 0x50, 0x8f, 0x30, 0x0f, 0x33, 0x36, 0x91, 0x2c, 0xdd, 0xaa, 0x0a, 0x95, 0xb7, 0xc8,
	0x0f, 0xb0, 0x62, 0xaf, 0x1e, 0x88, 0xb3, 0x09, 0xba, 0x0b, 0x1d, 0xa7, 0xd7, 0xdc, 0xfe, 0xcc,
	0x7b, 0x77, 0x0b, 0x3d, 0x4b, 0xee, 0xf0, 0x6c, 0x82, 0x7e, 0x23, 0x2c, 0xad, 0xc8, 0x97, 0xf0,
	0x28, 0xc3, 0x84, 0x9f, 0xd0, 0xd1, 0x18, 0x03, 0x75, 0x3a, 0xc8, 0x30, 0xe4, 0x59, 0x94, 0xbb,
	0xb5, 0x8e, 0xd3, 0x5b, 0xf2, 0x1f, 0x16, 0xe1, 0x81, 0x8c, 0xfa, 0x3a, 0x48, 0x7e, 0x82, 0xd5,
	0x23, 0xc4, 0x38, 0xa3, 0xa9, 0x08, 0x68, 0xc2, 0xa7, 0xa9, 0x70, 0x17, 0x25, 0xe1, 0x3d, 0xef,
	0xd5, 0x9b, 0xf6, 0xdc, 0xdf, 0x6f, 0xda, 0x1f, 0xc7, 0x4c, 0x1c, 0x4f, 0x47, 0x5e, 0xc8, 0x93,
	0x7e, 0xc8, 0xf3, 0x84, 0xe7, 0xe6, 0xe7, 0x69, 0x1e, 0xbd, 0xec, 0x4b, 0xf6, 0xb9, 0x77, 0x90,
	0x0a, 0xbf, 0x69, 0x61, 0x76, 0x15, 0x0a, 0x61, 0xf0, 0x98, 0xa5, 0x4c, 0x30, 0x3a, 0x36, 0x74,
	0x8e, 0x32, 0x44, 0x5b, 0x62, 0xe9, 0x4e, 0x25, 0x36, 0x0d, 0xa0, 0xba, 0xc0, 0xf3, 0x0c, 0xd1,
	0x94, 0xda, 0x83, 0xaa, 0x04, 0x77, 0x97, 0x3f, 0x18, 0x75, 0x1f, 0x43, 0x5f, 0xe5, 0x12, 0x17,
	0x16, 0x31, 0x95, 0xdd, 0x89, 0x5c, 0x50, 0xfd, 0xb2, 0x4b, 0x32, 0x00, 0xc8, 0x05, 0xcd, 0x44,
	0x20, 0xe7, 0xca, 0xad, 0x77, 0x9c, 0x5e, 0x7d, 0x7b, 0xcb, 0xd3, 0x43, 0xe7, 0xd9, 0xa1, 0xf3,
	0x0e, 0xed, 0xd0, 0xed, 0x2d, 0xc9, 0xfa, 0xe7, 0xff, 0xb4, 0x1d, 0x7f, 0x59, 0xe5, 0xc9, 0x08,
	0xf9, 0x1a, 0x96, 0x30, 0x8d, 0x34, 0x44, 0xe3, 0x03, 0x20, 0x16, 0x31, 0x8d, 0x14, 0xc0, 0x37,
	0xb0, 0x32, 0xe6, 0xe1, 0xcb, 0xe9, 0x24, 0x98, 0x60, 0xc6, 0x78, 0xe4, 0xae, 0x28, 0x94, 0xc7,
	0x33, 0x28, 0xfb, 0x46, 0x1d, 0x1a, 0xe4, 0x77, 0x09, 0xd2, 0xd0, 0x99, 0xdf, 0xab, 0x44, 0xf2,
	0x2d, 0x34, 0x4f, 0x30, 0x17, 0x2c, 0x8d, 0x2d, 0x54, 0xf3, 0xfd, 0xa1, 0x56, 0x4c, 0xaa, 0xc1,
	0xfa, 0x04, 0xd6, 0x0a, 0x2c, 0xce, 0xc7, 0x43, 0x29, 0x85, 0x55, 0x35, 0xef, 0xab, 0xf6, 0xa0,
	0xd9, 0xee, 0xfe, 0x06, 0x44, 0x69, 0x6c, 0x30, 0xe6, 0x39, 0x16, 0x2a, 0x2b, 0x54, 0xe5, 0x94,
	0x55, 0xd5, 0x86, 0x7a, 0xa1, 0x0f, 0x16, 0x29, 0xc5, 0x55, 0x7d, 0xb0, 0x5b, 0x07, 0x11, 0xd9,
	0x86, 0x87, 0xc5, 0x81, 0x50, 0x02, 0x06, 0x34, 0x54, 0x62, 0xd3, 0x3a, 0x5c, 0xb7, 0x41, 0x55,
	0x6c, 0x57, 0x85, 0xba, 0x2f, 0x60, 0x5d, 0x11, 0xf0, 0xa5, 0x0e, 0xee, 0xcb, 0xa0, 0x40, 0x7b,
	0xa6, 0xa6, 0xe4, 0xbe, 0x68, 0xff, 0x55, 0x60, 0x55, 0xc1, 0xed, 0x46, 0xd1, 0x77, 0xda, 0x9b,
	0xde, 0xd3, 0x80, 0xae, 0x41, 0xcf, 0xcf, 0xb4, 0xca, 0x3a, 0x54, 0xf5, 0x66, 0x87, 0x5a, 0x98,
	0x75, 0xa8, 0x21, 0x34, 0x8c, 0x47, 0x6a, 0x83, 0xaa, 0x29, 0x83, 0xfa, 0xf4, 0x36, 0x83, 0x32,
	0xdc, 0x95, 0x3f, 0xd5, 0x93, 0xb7, 0x0b, 0xf2, 0x1c, 0x6a, 0xa7, 0xc8, 0xe2, 0xe3, 0xbb, 0xb8,
	0x8b, 0x14, 0xa9, 0xc9, 0x26, 0x43, 0x58, 0xd3, 0x6e, 0xa2, 0x25, 0x19, 0x51, 0x81, 0xca, 0x4c,
	0x6e, 0xd7, 0x93, 0xa3, 0xf4, 0xd4, 0x54, 0xd9, 0x3f, 0xca, 0xe4, 0x7d, 0x2a, 0xb0, 0xfb, 0x2b,
	0x80, 0x99, 0x4a, 0xca, 0x12, 0x69, 0x02, 0x2a, 0x5e, 0xbc, 0x3f, 0xbb, 0xbc, 0x7d, 0x22, 0x9f,
	0x00, 0xd8, 0x86, 0x15, 0xaf, 0x61, 0xd9, 0xec, 0x1c, 0x44, 0x64, 0x13, 0x6a, 0xc6, 0xfa, 0xf4,
	0x7b, 0x30, 0xab, 0xee, 0xb9, 0x03, 0x0f, 0x14, 0x81, 0x83, 0x92, 0xb5, 0xdd, 0x87, 0x47, 0x0f,
	0xd6, 0x68, 0x14, 0x65, 0x98, 0xe7, 0x81, 0xe0, 0xda, 0x79, 0x8d, 0x28, 0x9a, 0x66, 0xff, 0x90,
	0xeb, 0x22, 0x37, 0x51, 0xfa, 0xd3, 0x81, 0x0d, 0x3b, 0x8b, 0x57, 0x3e, 0x15, 0x77, 0xd4, 0xea,
	0x57, 0xb0, 0x75, 0xe5, 0x7b, 0x14, 0x08, 0x2e, 0xe8, 0xd8, 0x7e, 0x09, 0x34, 0xb7, 0x47, 0x61,
	0xa9, 0xd0, 0xa1, 0x8c, 0x1b, 0x6b, 0xff, 0x1c, 0x36, 0xae, 0x26, 0xa7, 0xd3, 0x64, 0x84, 0x99,
	0xa2, 0x3c, 0xef, 0x93, 0x72, 0xda, 0x50, 0x45, 0xba, 0x7f, 0x38, 0xb0, 0xa9, 0xe8, 0xef, 0xe3,
	0x18, 0x45, 0xf9, 0x63, 0x77, 0xd7, 0x0b, 0x74, 0xa0, 0x3e, 0xcd, 0x31, 0xdb, 0xd5, 0xed, 0x33,
	0x8c, 0xcb, 0x5b, 0xc4, 0x83, 0xf5, 0x32, 0xcb, 0xe0, 0x4a, 0x5f, 0x1f, 0x94, 0x48, 0xea, 0x5b,
	0x75, 0xcf, 0x4c, 0x87, 0x07, 0x3c, 0x99, 0x48, 0x92, 0x56, 0xf2, 0xd7, 0xa8, 0x38, 0xb7, 0x4c,
	0x59, 0xe5, 0xfa, 0x94, 0x7d, 0x04, 0x0d, 0x49, 0x2b, 0xa0, 0x37, 0x52, 0xdd, 0x7b, 0xf1, 0xea,
	0xa2, 0xe5, 0xbc, 0xbe, 0x68, 0x39, 0xff, 0x5e, 0xb4, 0x9c, 0xf3, 0xcb, 0xd6, 0xdc, 0xeb, 0xcb,
	0xd6, 0xdc, 0x5f, 0x97, 0xad, 0xb9, 0x9f, 0xb7, 0xcb, 0x52, 0x2c, 0xc9, 0xbc, 0x1f, 0xee, 0xe0,
	0x53, 0xfd, 0xff, 0xe9, 0x97, 0xb7, 0xff, 0xa0, 0x94, 0x34, 0x47, 0x35, 0x25, 0xb6, 0x2f, 0xfe,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0x40, 0xb5, 0xca, 0x44, 0x1b, 0x0a, 0x00, 0x00,
}

func (m *EventNewCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingPoolName) > 0 {
		i -= len(m.VestingPoolName)
		copy(dAtA[i:], m.VestingPoolName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.VestingPoolName)))
		i--
		dAtA[i] = 0x7a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VestingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VestingPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvent(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x72
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockupPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEvent(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x6a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintEvent(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x62
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintEvent(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x5a
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.Free.Size()
		i -= size
		if _, err := m.Free.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.InitialClaimFreeAmount.Size()
		i -= size
		if _, err := m.InitialClaimFreeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.FeegrantAmount.Size()
		i -= size
		if _, err := m.FeegrantAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.RemovableClaimRecords {
		i--
		if m.RemovableClaimRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CampaignType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCloseCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCloseCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCloseCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampaignCloseAction) > 0 {
		i -= len(m.CampaignCloseAction)
		copy(dAtA[i:], m.CampaignCloseAction)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CampaignCloseAction)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRemoveCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRemoveCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRemoveCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventEnableCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEnableCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEnableCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddMission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddMission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddMission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimStartDate != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ClaimStartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClaimStartDate):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintEvent(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.MissionType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MissionType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if m.MissionId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MissionId))
		i--
		dAtA[i] = 0x18
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInitialClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInitialClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInitialClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddressToClaim) > 0 {
		i -= len(m.AddressToClaim)
		copy(dAtA[i:], m.AddressToClaim)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AddressToClaim)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddClaimRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddClaimRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddClaimRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimRecordsNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClaimRecordsNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClaimRecordsTotalAmount) > 0 {
		i -= len(m.ClaimRecordsTotalAmount)
		copy(dAtA[i:], m.ClaimRecordsTotalAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimRecordsTotalAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteClaimRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteClaimRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteClaimRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimRecordAmount) > 0 {
		i -= len(m.ClaimRecordAmount)
		copy(dAtA[i:], m.ClaimRecordAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClaimRecordAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCompleteMission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCompleteMission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCompleteMission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MissionId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MissionId))
		i--
		dAtA[i] = 0x10
	}
	if m.CampaignId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventNewCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignType != 0 {
		n += 1 + sovEvent(uint64(m.CampaignType))
	}
	if m.RemovableClaimRecords {
		n += 2
	}
	l = m.FeegrantAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.InitialClaimFreeAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Free.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.Enabled {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovEvent(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovEvent(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupPeriod)
	n += 1 + l + sovEvent(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VestingPeriod)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.VestingPoolName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventCloseCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	l = len(m.CampaignCloseAction)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventRemoveCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	return n
}

func (m *EventEnableCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	return n
}

func (m *EventAddMission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.MissionType != 0 {
		n += 1 + sovEvent(uint64(m.MissionType))
	}
	l = m.Weight.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.ClaimStartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClaimStartDate)
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	if m.MissionId != 0 {
		n += 1 + sovEvent(uint64(m.MissionId))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventInitialClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	l = len(m.AddressToClaim)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAddClaimRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	l = len(m.ClaimRecordsTotalAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ClaimRecordsNumber != 0 {
		n += 1 + sovEvent(uint64(m.ClaimRecordsNumber))
	}
	return n
}

func (m *EventDeleteClaimRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ClaimRecordAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventCompleteMission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovEvent(uint64(m.CampaignId))
	}
	if m.MissionId != 0 {
		n += 1 + sovEvent(uint64(m.MissionId))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventNewCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignType", wireType)
			}
			m.CampaignType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignType |= CampaignType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovableClaimRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemovableClaimRecords = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeegrantAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeegrantAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimFreeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialClaimFreeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Free.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockupPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VestingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCloseCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCloseCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCloseCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignCloseAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignCloseAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRemoveCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRemoveCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRemoveCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEnableCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEnableCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEnableCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddMission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddMission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddMission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionType", wireType)
			}
			m.MissionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionType |= MissionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimStartDate == nil {
				m.ClaimStartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ClaimStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInitialClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInitialClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInitialClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressToClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressToClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddClaimRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddClaimRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddClaimRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecordsTotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecordsTotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecordsNumber", wireType)
			}
			m.ClaimRecordsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimRecordsNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteClaimRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteClaimRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteClaimRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecordAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecordAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCompleteMission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCompleteMission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCompleteMission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
