syntax = "proto3";

package chain4energy.c4echain.cfetokenization;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "c4echain/cfetokenization/params.proto";
import "c4echain/cfetokenization/certificate_type.proto";

option go_package = "github.com/chain4energy/c4e-chain/x/cfetokenization/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/chain4energy/c4e-chain/cfetokenization/params";
  
  }
  
  // Queries a list of CertificateType items.
  rpc CertificateType    (QueryGetCertificateTypeRequest) returns (QueryGetCertificateTypeResponse) {
    option (google.api.http).get = "/chain4energy/c4e-chain/cfetokenization/certificate_type/{id}";
  
  }
  rpc CertificateTypeAll (QueryAllCertificateTypeRequest) returns (QueryAllCertificateTypeResponse) {
    option (google.api.http).get = "/chain4energy/c4e-chain/cfetokenization/certificate_type";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCertificateTypeRequest {
  uint64 id = 1;
}

message QueryGetCertificateTypeResponse {
  CertificateType CertificateType = 1 [(gogoproto.nullable) = false];
}

message QueryAllCertificateTypeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCertificateTypeResponse {
  repeated CertificateType                        CertificateType = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

