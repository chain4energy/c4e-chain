syntax = "proto3";

package chain4energy.c4echain.cfetokenization;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "c4echain/cfetokenization/params.proto";
import "c4echain/cfetokenization/certificate_type.proto";
import "c4echain/cfetokenization/user_devices.proto";
import "c4echain/cfetokenization/user_certificates.proto";

option go_package = "github.com/chain4energy/c4e-chain/x/cfetokenization/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/params";
  
  }
  
  // Queries a list of CertificateType items.
  rpc CertificateType    (QueryGetCertificateTypeRequest) returns (QueryGetCertificateTypeResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/certificate_type/{id}";
  
  }
  rpc CertificateTypeAll (QueryAllCertificateTypeRequest) returns (QueryAllCertificateTypeResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/certificate_type";
  
  }
  
  // Queries a list of UserDevices items.
  rpc UserDevices    (QueryGetUserDevicesRequest) returns (QueryGetUserDevicesResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/user_devices/{owner}";
  
  }
  rpc UserDevicesAll (QueryAllUserDevicesRequest) returns (QueryAllUserDevicesResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/user_devices";
  
  }
  
  // Queries a list of UserCertificates items.
  rpc UserCertificates    (QueryGetUserCertificatesRequest) returns (QueryGetUserCertificatesResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/user_certificates/{owner}";
  
  }
  rpc UserCertificatesAll (QueryAllUserCertificatesRequest) returns (QueryAllUserCertificatesResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/user_certificates";
  }

  rpc Device (QueryDeviceRequest) returns (QueryDeviceResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/device/{device_address}";
  }

  rpc DeviceAll (QueryDeviceAllRequest) returns (QueryDeviceAllResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/devices";
  }

  rpc MarketplaceCertificatesAll (QueryMarketplaceCertificatesAllRequest) returns (QueryMarketplaceCertificatesAllResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/marketplace_certificates";
  }

  rpc MarketplaceCertificate (QueryMarketplaceCertificateRequest) returns (QueryMarketplaceCertificateResponse) {
    option (google.api.http).get = "/c4e/tokenization/v1beta1/marketplace_certificate/{id}";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCertificateTypeRequest {
  uint64 id = 1;
}

message QueryDeviceRequest {
  string device_address = 1;
}

message QueryDeviceResponse{
  Device device = 1;
}

message QueryDeviceAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryDeviceAllResponse{
  repeated Device                        devices = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

message QueryMarketplaceCertificatesAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMarketplaceCertificatesAllResponse{
  repeated CertificateOffer  marketplace_certificates = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

message QueryMarketplaceCertificateRequest{
  uint64 id = 1;
}

message QueryMarketplaceCertificateResponse {
  CertificateOffer marketplace_certificate = 1;
}


message QueryGetCertificateTypeResponse {
  CertificateType CertificateType = 1 [(gogoproto.nullable) = false];
}

message QueryAllCertificateTypeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCertificateTypeResponse {
  repeated CertificateType                        CertificateType = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

message QueryGetUserDevicesRequest {
  string owner = 1;
}

message QueryGetUserDevicesResponse {
  UserDevices UserDevices = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserDevicesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserDevicesResponse {
  repeated UserDevices                            UserDevices = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryGetUserCertificatesRequest {
  string owner = 1;
}

message QueryGetUserCertificatesResponse {
  UserCertificates UserCertificates = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserCertificatesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserCertificatesResponse {
  repeated UserCertificates                       UserCertificates = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination       = 2;
}

