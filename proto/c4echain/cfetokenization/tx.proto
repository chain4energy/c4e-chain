syntax = "proto3";

package chain4energy.c4echain.cfetokenization;

import "c4echain/cfetokenization/user_devices.proto";
import "c4echain/cfetokenization/user_certificates.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/chain4energy/c4e-chain/x/cfetokenization/types";

// Msg defines the Msg service.
service Msg {
  rpc AssignDeviceToUser (MsgAssignDeviceToUser) returns (MsgAssignDeviceToUserResponse);
  rpc AcceptDevice (MsgAcceptDevice) returns (MsgAcceptDeviceResponse);
  rpc CreateUserCertificate (MsgCreateUserCertificates) returns (MsgCreateUserCertificatesResponse);
  rpc AuthorizeCertificate (MsgAuthorizeCertificate) returns (MsgAuthorizeCertificateResponse);
  rpc AddCertificateToMarketplace (MsgAddCertificateToMarketplace) returns (MsgAddCertificateToMarketplaceResponse);
  rpc BurnCertificate (MsgBurnCertificate) returns (MsgBurnCertificateResponse);
  rpc BuyCertificate (MsgBuyCertificate) returns (MsgBuyCertificateResponse);
  rpc AddMeasurement (MsgAddMeasurement) returns (MsgAddMeasurementResponse);
}

message MsgAssignDeviceToUser {
  string device_address = 1;
  string user_address = 2;
}

message MsgAssignDeviceToUserResponse {}

message MsgAcceptDevice {
  string user_address = 1;
  string device_address = 2;
  string device_name = 3;
  string device_location = 4;
}

message MsgAcceptDeviceResponse {}

message MsgCreateUserCertificates {
  string owner = 1;
  string device_address = 2;
  repeated string allowed_authorities = 4;
  uint64 certyficate_type_id = 5;
  repeated uint64 measurements = 6;
}

message MsgCreateUserCertificatesResponse {}

message MsgAddMeasurement {
  string device_address = 1;
  google.protobuf.Timestamp timestamp = 2 [
    (gogoproto.nullable) = true,
    (gogoproto.stdtime) = true
  ];
  uint64 active_power = 3;
  uint64 reverse_power = 4;
  string metadata = 5;
}

message MsgAddMeasurementResponse {}

message MsgAddCertificateToMarketplace {
  string owner = 1;
  uint64 certificate_id = 2;
  repeated cosmos.base.v1beta1.Coin price = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgAddCertificateToMarketplaceResponse {}

message MsgBuyCertificate {
  string buyer = 1;
  uint64 marketplace_certificate_id = 2;
}

message MsgBuyCertificateResponse {}

message MsgBurnCertificate {
  string owner = 1;
  uint64 certificate_id = 2;
  string device_address = 3;
}

message MsgBurnCertificateResponse {}

message MsgAuthorizeCertificate {
  string authorizer = 1;
  string user_address = 2;
  uint64 certificate_id = 3;
  google.protobuf.Timestamp valid_until = 4 [
    (gogoproto.nullable) = true,
    (gogoproto.stdtime) = true
  ];
}

message MsgAuthorizeCertificateResponse {}