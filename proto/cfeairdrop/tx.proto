syntax = "proto3";
package chain4energy.c4echain.cfeairdrop;
import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";


// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/chain4energy/c4e-chain/x/cfeairdrop/types";

// Msg defines the Msg service.
service Msg {
  rpc Claim(MsgClaim) returns (MsgClaimResponse);
  rpc CreateAirdropCampaign(MsgCreateAirdropCampaign) returns (MsgCreateAirdropCampaignResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgClaim {
  string claimer = 1;
  string campaign_id = 2;
  string mission_id = 3;
}

message MsgClaimResponse {}

message MsgCreateAirdropCampaign {
  string owner = 1;
  string name = 2;
  string description = 3;
  int64 start_time = 4 [
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
  int64 end_time = 5 [
    (gogoproto.moretags) = "yaml:\"end_time\""
  ];
  google.protobuf.Duration lockup_period = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true
  ];
  google.protobuf.Duration vesting_period = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true
  ];
}

message MsgCreateAirdropCampaignResponse {}

// this line is used by starport scaffolding # proto/tx/message
