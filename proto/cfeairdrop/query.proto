syntax = "proto3";
package chain4energy.c4echain.cfeairdrop;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cfeairdrop/params.proto";
import "cfeairdrop/airdrop.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/chain4energy/c4e-chain/x/cfeairdrop/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/c4e/airdrop/params";
  }
  // Queries a UserAirdropEntries by index.
	rpc UserAirdropEntries(QueryUserAirdropEntriesRequest) returns (QueryUserAirdropEntriesResponse) {
		option (google.api.http).get = "/c4e/airdrop/user_airdrop_entries/{address}";
	}

	// Queries a list of UserAirdropEntries items.
	rpc UsersAirdropEntries(QueryUsersAirdropEntriesRequest) returns (QueryUsersAirdropEntriesResponse) {
		option (google.api.http).get = "/c4e/airdrop/users_airdrop_entries";
	}

// Queries a InitialClaim by index.
	rpc InitialClaim(QueryInitialClaimRequest) returns (QueryInitialClaimResponse) {
		option (google.api.http).get = "/c4e/airdrop/initial_claim/{campaignId}";
	}

	// Queries a list of InitialClaim items.
	rpc InitialClaims(QueryInitialClaimsRequest) returns (QueryInitialClaimsResponse) {
		option (google.api.http).get = "/c4e/airdrop/initial_claim";
	}

// Queries a Mission by index.
	rpc Mission(QueryMissionRequest) returns (QueryMissionResponse) {
		option (google.api.http).get = "/c4e/airdrop/mission/{campaignId}/{missionId}";
	}

	// Queries a list of Mission items.
	rpc MissionAll(QueryMissionsRequest) returns (QueryMissionsResponse) {
		option (google.api.http).get = "/c4e/airdrop/mission";
	}

// Queries a list of Campaigns items.
	rpc Campaigns(QueryCampaignsRequest) returns (QueryCampaignsResponse) {
		option (google.api.http).get = "/c4e/airdrop/campaigns";
	}
	// Queries a list of Campaigns items.
	rpc Campaign(QueryCampaignRequest) returns (QueryCampaignResponse) {
		option (google.api.http).get = "/c4e/airdrop/campaign/{campaignId}";
	}
// Queries a AirdropEntry by id.
//	rpc AirdropEntry(QueryGetAirdropEntryRequest) returns (QueryGetAirdropEntryResponse) {
//		option (google.api.http).get = "/chain4energy/c4e-chain/cfeairdrop/airdrop_entry/{id}";
//	}
//
//	// Queries a list of AirdropEntry items.
//	rpc AirdropEntryAll(QueryAllAirdropEntryRequest) returns (QueryAllAirdropEntryResponse) {
//		option (google.api.http).get = "/chain4energy/c4e-chain/cfeairdrop/airdrop_entry";
//	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
		(gogoproto.nullable) = false
	];
}

message QueryUserAirdropEntriesRequest {
	  string address = 1;
}

message QueryUserAirdropEntriesResponse {
	UserAirdropEntries userAirdropEntries = 1 [
		(gogoproto.nullable) = false
	];
}

message QueryUsersAirdropEntriesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryUsersAirdropEntriesResponse {
	repeated UserAirdropEntries usersAirdropEntries = 1 [
		(gogoproto.nullable) = false
	];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryInitialClaimRequest {
	  uint64 campaignId = 1;
}

message QueryInitialClaimResponse {
	InitialClaim initialClaim = 1 [
		(gogoproto.nullable) = false
	];
}

message QueryInitialClaimsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryInitialClaimsResponse {
	repeated InitialClaim initialClaim = 1 [
		(gogoproto.nullable) = false
	];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMissionRequest {
	uint64 campaignId = 1;
	uint64 missionId = 2;
}

message QueryMissionResponse {
	Mission mission = 1 [
		(gogoproto.nullable) = false
	];
}

message QueryMissionsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMissionsResponse {
	repeated Mission mission = 1 [
		(gogoproto.nullable) = false
	];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCampaignsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryCampaignsResponse {
	repeated Campaign campaign = 1 [
		(gogoproto.nullable) = false
	];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCampaignRequest {
	uint64 campaignId = 1;
}

message QueryCampaignResponse {
	Campaign campaign = 1 [
		(gogoproto.nullable) = false
	];
}
//
//message QueryGetAirdropEntryRequest {
//	uint64 id = 1;
//}
//
//message QueryGetAirdropEntryResponse {
//	AirdropEntry AirdropEntry = 1 [(gogoproto.nullable) = false];
//}
//
//message QueryAllAirdropEntryRequest {
//	cosmos.base.query.v1beta1.PageRequest pagination = 1;
//}
//
//message QueryAllAirdropEntryResponse {
//	repeated AirdropEntry AirdropEntry = 1 [(gogoproto.nullable) = false];
//	cosmos.base.query.v1beta1.PageResponse pagination = 2;
//}

// this line is used by starport scaffolding # 3
