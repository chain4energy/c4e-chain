syntax = "proto3";
package chain4energy.c4echain.cfeairdrop;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cfeairdrop/params.proto";
import "cfeairdrop/airdrop.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/chain4energy/c4e-chain/x/cfeairdrop/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/c4e/airdrop/params";
  }
  // Queries a ClaimRecord by index.
	rpc ClaimRecord(QueryGetClaimRecordRequest) returns (QueryGetClaimRecordResponse) {
		option (google.api.http).get = "/c4e/airdrop/claim_record/{address}";
	}

	// Queries a list of ClaimRecord items.
	rpc ClaimRecordAll(QueryAllClaimRecordRequest) returns (QueryAllClaimRecordResponse) {
		option (google.api.http).get = "/c4e/airdrop/claim_record";
	}

// Queries a InitialClaim by index.
	rpc InitialClaim(QueryGetInitialClaimRequest) returns (QueryGetInitialClaimResponse) {
		option (google.api.http).get = "/c4e/airdrop/initial_claim/{campaignId}";
	}

	// Queries a list of InitialClaim items.
	rpc InitialClaimAll(QueryAllInitialClaimRequest) returns (QueryAllInitialClaimResponse) {
		option (google.api.http).get = "/c4e/airdrop/initial_claim";
	}

// Queries a Mission by index.
	rpc Mission(QueryGetMissionRequest) returns (QueryGetMissionResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/cfeairdrop/mission/{campaignId}/{missionId}";
	}

	// Queries a list of Mission items.
	rpc MissionAll(QueryAllMissionRequest) returns (QueryAllMissionResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/cfeairdrop/mission";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetClaimRecordRequest {
	  string address = 1;

}

message QueryGetClaimRecordResponse {
	ClaimRecord claimRecord = 1 [(gogoproto.nullable) = false];
}

message QueryAllClaimRecordRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllClaimRecordResponse {
	repeated ClaimRecord claimRecord = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetInitialClaimRequest {
	  uint64 campaignId = 1;

}

message QueryGetInitialClaimResponse {
	InitialClaim initialClaim = 1 [(gogoproto.nullable) = false];
}

message QueryAllInitialClaimRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInitialClaimResponse {
	repeated InitialClaim initialClaim = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetMissionRequest {
	uint64 campaignId = 1;
	uint64 missionId = 2;

}

message QueryGetMissionResponse {
	Mission mission = 1 [(gogoproto.nullable) = false];
}

message QueryAllMissionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMissionResponse {
	repeated Mission mission = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
