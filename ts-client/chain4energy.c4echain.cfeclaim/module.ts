// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgAddClaimRecords } from "./types/c4echain/cfeclaim/tx";
import { MsgDeleteClaimRecord } from "./types/c4echain/cfeclaim/tx";
import { MsgCreateCampaign } from "./types/c4echain/cfeclaim/tx";
import { MsgAddMission } from "./types/c4echain/cfeclaim/tx";
import { MsgClaim } from "./types/c4echain/cfeclaim/tx";
import { MsgCloseCampaign } from "./types/c4echain/cfeclaim/tx";
import { MsgInitialClaim } from "./types/c4echain/cfeclaim/tx";
import { MsgEnableCampaign } from "./types/c4echain/cfeclaim/tx";
import { MsgRemoveCampaign } from "./types/c4echain/cfeclaim/tx";

import { Campaign as typeCampaign} from "./types"
import { UserEntry as typeUserEntry} from "./types"
import { ClaimRecord as typeClaimRecord} from "./types"
import { ClaimRecordEntry as typeClaimRecordEntry} from "./types"
import { EventNewCampaign as typeEventNewCampaign} from "./types"
import { EventCloseCampaign as typeEventCloseCampaign} from "./types"
import { EventRemoveCampaign as typeEventRemoveCampaign} from "./types"
import { EventEnableCampaign as typeEventEnableCampaign} from "./types"
import { EventAddMission as typeEventAddMission} from "./types"
import { EventClaim as typeEventClaim} from "./types"
import { EventInitialClaim as typeEventInitialClaim} from "./types"
import { EventAddClaimRecords as typeEventAddClaimRecords} from "./types"
import { EventDeleteClaimRecord as typeEventDeleteClaimRecord} from "./types"
import { EventCompleteMission as typeEventCompleteMission} from "./types"
import { MissionCount as typeMissionCount} from "./types"
import { Mission as typeMission} from "./types"

export { MsgAddClaimRecords, MsgDeleteClaimRecord, MsgCreateCampaign, MsgAddMission, MsgClaim, MsgCloseCampaign, MsgInitialClaim, MsgEnableCampaign, MsgRemoveCampaign };

type sendMsgAddClaimRecordsParams = {
  value: MsgAddClaimRecords,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteClaimRecordParams = {
  value: MsgDeleteClaimRecord,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateCampaignParams = {
  value: MsgCreateCampaign,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddMissionParams = {
  value: MsgAddMission,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimParams = {
  value: MsgClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgCloseCampaignParams = {
  value: MsgCloseCampaign,
  fee?: StdFee,
  memo?: string
};

type sendMsgInitialClaimParams = {
  value: MsgInitialClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgEnableCampaignParams = {
  value: MsgEnableCampaign,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveCampaignParams = {
  value: MsgRemoveCampaign,
  fee?: StdFee,
  memo?: string
};


type msgAddClaimRecordsParams = {
  value: MsgAddClaimRecords,
};

type msgDeleteClaimRecordParams = {
  value: MsgDeleteClaimRecord,
};

type msgCreateCampaignParams = {
  value: MsgCreateCampaign,
};

type msgAddMissionParams = {
  value: MsgAddMission,
};

type msgClaimParams = {
  value: MsgClaim,
};

type msgCloseCampaignParams = {
  value: MsgCloseCampaign,
};

type msgInitialClaimParams = {
  value: MsgInitialClaim,
};

type msgEnableCampaignParams = {
  value: MsgEnableCampaign,
};

type msgRemoveCampaignParams = {
  value: MsgRemoveCampaign,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgAddClaimRecords({ value, fee, memo }: sendMsgAddClaimRecordsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddClaimRecords: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddClaimRecords({ value: MsgAddClaimRecords.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddClaimRecords: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteClaimRecord({ value, fee, memo }: sendMsgDeleteClaimRecordParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteClaimRecord: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteClaimRecord({ value: MsgDeleteClaimRecord.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteClaimRecord: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateCampaign({ value, fee, memo }: sendMsgCreateCampaignParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateCampaign: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateCampaign({ value: MsgCreateCampaign.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateCampaign: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddMission({ value, fee, memo }: sendMsgAddMissionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddMission: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAddMission({ value: MsgAddMission.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddMission: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaim({ value, fee, memo }: sendMsgClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClaim({ value: MsgClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCloseCampaign({ value, fee, memo }: sendMsgCloseCampaignParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCloseCampaign: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCloseCampaign({ value: MsgCloseCampaign.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCloseCampaign: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgInitialClaim({ value, fee, memo }: sendMsgInitialClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgInitialClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgInitialClaim({ value: MsgInitialClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgInitialClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgEnableCampaign({ value, fee, memo }: sendMsgEnableCampaignParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgEnableCampaign: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgEnableCampaign({ value: MsgEnableCampaign.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgEnableCampaign: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveCampaign({ value, fee, memo }: sendMsgRemoveCampaignParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveCampaign: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRemoveCampaign({ value: MsgRemoveCampaign.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveCampaign: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgAddClaimRecords({ value }: msgAddClaimRecordsParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgAddClaimRecords", value: MsgAddClaimRecords.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddClaimRecords: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteClaimRecord({ value }: msgDeleteClaimRecordParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgDeleteClaimRecord", value: MsgDeleteClaimRecord.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteClaimRecord: Could not create message: ' + e.message)
			}
		},
		
		msgCreateCampaign({ value }: msgCreateCampaignParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgCreateCampaign", value: MsgCreateCampaign.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateCampaign: Could not create message: ' + e.message)
			}
		},
		
		msgAddMission({ value }: msgAddMissionParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgAddMission", value: MsgAddMission.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddMission: Could not create message: ' + e.message)
			}
		},
		
		msgClaim({ value }: msgClaimParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgClaim", value: MsgClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaim: Could not create message: ' + e.message)
			}
		},
		
		msgCloseCampaign({ value }: msgCloseCampaignParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgCloseCampaign", value: MsgCloseCampaign.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCloseCampaign: Could not create message: ' + e.message)
			}
		},
		
		msgInitialClaim({ value }: msgInitialClaimParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgInitialClaim", value: MsgInitialClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgInitialClaim: Could not create message: ' + e.message)
			}
		},
		
		msgEnableCampaign({ value }: msgEnableCampaignParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgEnableCampaign", value: MsgEnableCampaign.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgEnableCampaign: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveCampaign({ value }: msgRemoveCampaignParams): EncodeObject {
			try {
				return { typeUrl: "/chain4energy.c4echain.cfeclaim.MsgRemoveCampaign", value: MsgRemoveCampaign.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveCampaign: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Campaign: getStructure(typeCampaign.fromPartial({})),
						UserEntry: getStructure(typeUserEntry.fromPartial({})),
						ClaimRecord: getStructure(typeClaimRecord.fromPartial({})),
						ClaimRecordEntry: getStructure(typeClaimRecordEntry.fromPartial({})),
						EventNewCampaign: getStructure(typeEventNewCampaign.fromPartial({})),
						EventCloseCampaign: getStructure(typeEventCloseCampaign.fromPartial({})),
						EventRemoveCampaign: getStructure(typeEventRemoveCampaign.fromPartial({})),
						EventEnableCampaign: getStructure(typeEventEnableCampaign.fromPartial({})),
						EventAddMission: getStructure(typeEventAddMission.fromPartial({})),
						EventClaim: getStructure(typeEventClaim.fromPartial({})),
						EventInitialClaim: getStructure(typeEventInitialClaim.fromPartial({})),
						EventAddClaimRecords: getStructure(typeEventAddClaimRecords.fromPartial({})),
						EventDeleteClaimRecord: getStructure(typeEventDeleteClaimRecord.fromPartial({})),
						EventCompleteMission: getStructure(typeEventCompleteMission.fromPartial({})),
						MissionCount: getStructure(typeMissionCount.fromPartial({})),
						Mission: getStructure(typeMission.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			Chain4EnergyC4EchainCfeclaim: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;